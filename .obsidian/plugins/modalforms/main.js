/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ModalFormPlugin
});
module.exports = __toCommonJS(main_exports);

// src/std/index.ts
var std_exports = {};
__export(std_exports, {
  A: () => Array_exports,
  E: () => E,
  EFunSemigroup: () => EFunSemigroup,
  NEA: () => NEA,
  O: () => O,
  absurd: () => absurd2,
  ensureError: () => ensureError,
  flow: () => flow2,
  parse: () => parse2,
  parseC: () => parseC,
  parseFunctionBody: () => parseFunctionBody,
  pipe: () => pipe2,
  tap: () => tap6,
  throttle: () => throttle,
  trySchemas: () => trySchemas
});

// node_modules/fp-ts/es6/function.js
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function identity(a) {
  return a;
}
function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {
  switch (arguments.length) {
    case 1:
      return ab;
    case 2:
      return function() {
        return bc(ab.apply(this, arguments));
      };
    case 3:
      return function() {
        return cd(bc(ab.apply(this, arguments)));
      };
    case 4:
      return function() {
        return de(cd(bc(ab.apply(this, arguments))));
      };
    case 5:
      return function() {
        return ef(de(cd(bc(ab.apply(this, arguments)))));
      };
    case 6:
      return function() {
        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
      };
    case 7:
      return function() {
        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
      };
    case 8:
      return function() {
        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
      };
    case 9:
      return function() {
        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
      };
  }
  return;
}
function absurd(_) {
  throw new Error("Called `absurd` function which should be uncallable");
}
function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {
  switch (arguments.length) {
    case 1:
      return a;
    case 2:
      return ab(a);
    case 3:
      return bc(ab(a));
    case 4:
      return cd(bc(ab(a)));
    case 5:
      return de(cd(bc(ab(a))));
    case 6:
      return ef(de(cd(bc(ab(a)))));
    case 7:
      return fg(ef(de(cd(bc(ab(a))))));
    case 8:
      return gh(fg(ef(de(cd(bc(ab(a)))))));
    case 9:
      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));
    default: {
      var ret = arguments[0];
      for (var i = 1; i < arguments.length; i++) {
        ret = arguments[i](ret);
      }
      return ret;
    }
  }
}
var dual = function(arity, body) {
  var isDataFirst = typeof arity === "number" ? function(args) {
    return args.length >= arity;
  } : arity;
  return function() {
    var args = Array.from(arguments);
    if (isDataFirst(arguments)) {
      return body.apply(this, args);
    }
    return function(self) {
      return body.apply(void 0, __spreadArray([self], args, false));
    };
  };
};

// node_modules/fp-ts/es6/internal.js
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isNone = function(fa) {
  return fa._tag === "None";
};
var isSome = function(fa) {
  return fa._tag === "Some";
};
var none = { _tag: "None" };
var some = function(a) {
  return { _tag: "Some", value: a };
};
var isLeft = function(ma) {
  return ma._tag === "Left";
};
var isRight = function(ma) {
  return ma._tag === "Right";
};
var left = function(e) {
  return { _tag: "Left", left: e };
};
var right = function(a) {
  return { _tag: "Right", right: a };
};
var singleton = function(a) {
  return [a];
};
var isNonEmpty = function(as6) {
  return as6.length > 0;
};
var head = function(as6) {
  return as6[0];
};
var tail = function(as6) {
  return as6.slice(1);
};
var emptyRecord = {};
var has = Object.prototype.hasOwnProperty;
var fromReadonlyNonEmptyArray = function(as6) {
  return __spreadArray2([as6[0]], as6.slice(1), true);
};
var flatMapIO = function(F, M) {
  return dual(2, function(self, f) {
    return M.flatMap(self, function(a) {
      return F.fromIO(f(a));
    });
  });
};

// node_modules/fp-ts/es6/Apply.js
function ap(F, G) {
  return function(fa) {
    return function(fab) {
      return F.ap(F.map(fab, function(gab) {
        return function(ga) {
          return G.ap(gab, ga);
        };
      }), fa);
    };
  };
}
function apFirst(A) {
  return function(second) {
    return function(first2) {
      return A.ap(A.map(first2, function(a) {
        return function() {
          return a;
        };
      }), second);
    };
  };
}
function apSecond(A) {
  return function(second) {
    return function(first2) {
      return A.ap(A.map(first2, function() {
        return function(b) {
          return b;
        };
      }), second);
    };
  };
}
function apS(F) {
  return function(name, fb) {
    return function(fa) {
      return F.ap(F.map(fa, function(a) {
        return function(b) {
          var _a;
          return Object.assign({}, a, (_a = {}, _a[name] = b, _a));
        };
      }), fb);
    };
  };
}

// node_modules/fp-ts/es6/Chain.js
function chainFirst(M) {
  var tapM = tap(M);
  return function(f) {
    return function(first2) {
      return tapM(first2, f);
    };
  };
}
function tap(M) {
  return function(first2, f) {
    return M.chain(first2, function(a) {
      return M.map(f(a), function() {
        return a;
      });
    });
  };
}
function bind(M) {
  return function(name, f) {
    return function(ma) {
      return M.chain(ma, function(a) {
        return M.map(f(a), function(b) {
          var _a;
          return Object.assign({}, a, (_a = {}, _a[name] = b, _a));
        });
      });
    };
  };
}

// node_modules/fp-ts/es6/FromEither.js
function fromEitherK(F) {
  return function(f) {
    return flow(f, F.fromEither);
  };
}
function tapEither(F, M) {
  var fromEither4 = fromEitherK(F);
  var tapM = tap(M);
  return function(self, f) {
    return tapM(self, fromEither4(f));
  };
}

// node_modules/fp-ts/es6/Functor.js
function map(F, G) {
  return function(f) {
    return function(fa) {
      return F.map(fa, function(ga) {
        return G.map(ga, f);
      });
    };
  };
}
function flap(F) {
  return function(a) {
    return function(fab) {
      return F.map(fab, function(f) {
        return f(a);
      });
    };
  };
}
function bindTo(F) {
  return function(name) {
    return function(fa) {
      return F.map(fa, function(a) {
        var _a;
        return _a = {}, _a[name] = a, _a;
      });
    };
  };
}
function let_(F) {
  return function(name, f) {
    return function(fa) {
      return F.map(fa, function(a) {
        var _a;
        return Object.assign({}, a, (_a = {}, _a[name] = f(a), _a));
      });
    };
  };
}
function as(F) {
  return function(self, b) {
    return F.map(self, function() {
      return b;
    });
  };
}
function asUnit(F) {
  var asM = as(F);
  return function(self) {
    return asM(self, void 0);
  };
}

// node_modules/fp-ts/es6/Eq.js
var fromEquals = function(equals) {
  return {
    equals: function(x, y) {
      return x === y || equals(x, y);
    }
  };
};
var eqStrict = {
  equals: function(a, b) {
    return a === b;
  }
};
var strictEqual = eqStrict.equals;

// node_modules/fp-ts/es6/Ord.js
var equalsDefault = function(compare2) {
  return function(first2, second) {
    return first2 === second || compare2(first2, second) === 0;
  };
};
var fromCompare = function(compare2) {
  return {
    equals: equalsDefault(compare2),
    compare: function(first2, second) {
      return first2 === second ? 0 : compare2(first2, second);
    }
  };
};
var getSemigroup = function() {
  return {
    concat: function(first2, second) {
      return fromCompare(function(a, b) {
        var ox = first2.compare(a, b);
        return ox !== 0 ? ox : second.compare(a, b);
      });
    }
  };
};
var getMonoid = function() {
  return {
    concat: getSemigroup().concat,
    empty: fromCompare(function() {
      return 0;
    })
  };
};
function compare(first2, second) {
  return first2 < second ? -1 : first2 > second ? 1 : 0;
}
var strictOrd = {
  equals: eqStrict.equals,
  compare
};

// node_modules/fp-ts/es6/Magma.js
var concatAll = function(M) {
  return function(startWith) {
    return function(as6) {
      return as6.reduce(function(a, acc) {
        return M.concat(a, acc);
      }, startWith);
    };
  };
};

// node_modules/fp-ts/es6/Semigroup.js
var constant = function(a) {
  return {
    concat: function() {
      return a;
    }
  };
};
var struct = function(semigroups) {
  return {
    concat: function(first2, second) {
      var r = {};
      for (var k in semigroups) {
        if (has.call(semigroups, k)) {
          r[k] = semigroups[k].concat(first2[k], second[k]);
        }
      }
      return r;
    }
  };
};
var first = function() {
  return { concat: identity };
};
var last = function() {
  return { concat: function(_, y) {
    return y;
  } };
};
var concatAll2 = concatAll;
var semigroupVoid = constant(void 0);
var semigroupAll = {
  concat: function(x, y) {
    return x && y;
  }
};
var semigroupAny = {
  concat: function(x, y) {
    return x || y;
  }
};
var semigroupString = {
  concat: function(x, y) {
    return x + y;
  }
};
var semigroupSum = {
  concat: function(x, y) {
    return x + y;
  }
};
var semigroupProduct = {
  concat: function(x, y) {
    return x * y;
  }
};

// node_modules/fp-ts/es6/ReadonlyNonEmptyArray.js
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isNonEmpty2 = isNonEmpty;
var isOutOfBound = function(i, as6) {
  return i < 0 || i >= as6.length;
};
var prependW = function(head6) {
  return function(tail5) {
    return __spreadArray3([head6], tail5, true);
  };
};
var prepend = prependW;
var appendW = function(end) {
  return function(init5) {
    return __spreadArray3(__spreadArray3([], init5, true), [end], false);
  };
};
var append = appendW;
var prependAll = function(middle) {
  return function(as6) {
    var out = [middle, as6[0]];
    for (var i = 1; i < as6.length; i++) {
      out.push(middle, as6[i]);
    }
    return out;
  };
};
var intersperse = function(middle) {
  return function(as6) {
    var rest = tail2(as6);
    return isNonEmpty2(rest) ? pipe(rest, prependAll(middle), prepend(head2(as6))) : as6;
  };
};
var of = singleton;
var extract = head;
var head2 = extract;
var tail2 = tail;
var last2 = function(as6) {
  return as6[as6.length - 1];
};
var concatAll3 = function(S) {
  return function(as6) {
    return as6.reduce(S.concat);
  };
};
var intercalate = function(S) {
  var concatAllS = concatAll3(S);
  return function(middle) {
    return flow(intersperse(middle), concatAllS);
  };
};

// node_modules/fp-ts/es6/NonEmptyArray.js
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isNonEmpty3 = function(as6) {
  return as6.length > 0;
};
var isOutOfBound2 = function(i, as6) {
  return i < 0 || i >= as6.length;
};
var prependW2 = function(head6) {
  return function(tail5) {
    return __spreadArray4([head6], tail5, true);
  };
};
var prepend2 = prependW2;
var appendW2 = function(end) {
  return function(init5) {
    return __spreadArray4(__spreadArray4([], init5, true), [end], false);
  };
};
var append2 = appendW2;
var unsafeInsertAt = function(i, a, as6) {
  if (isNonEmpty3(as6)) {
    var xs = fromReadonlyNonEmptyArray2(as6);
    xs.splice(i, 0, a);
    return xs;
  }
  return [a];
};
var unsafeUpdateAt = function(i, a, as6) {
  var xs = fromReadonlyNonEmptyArray2(as6);
  xs[i] = a;
  return xs;
};
var uniq = function(E2) {
  return function(as6) {
    if (as6.length === 1) {
      return copy(as6);
    }
    var out = [head3(as6)];
    var rest = tail3(as6);
    var _loop_1 = function(a2) {
      if (out.every(function(o) {
        return !E2.equals(o, a2);
      })) {
        out.push(a2);
      }
    };
    for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {
      var a = rest_1[_i];
      _loop_1(a);
    }
    return out;
  };
};
var sortBy = function(ords) {
  if (isNonEmpty3(ords)) {
    var M = getMonoid();
    return sort(ords.reduce(M.concat, M.empty));
  }
  return copy;
};
var union = function(E2) {
  var uniqE = uniq(E2);
  return function(second) {
    return function(first2) {
      return uniqE(pipe(first2, concat(second)));
    };
  };
};
var rotate = function(n) {
  return function(as6) {
    var len = as6.length;
    var m = Math.round(n) % len;
    if (isOutOfBound2(Math.abs(m), as6) || m === 0) {
      return copy(as6);
    }
    if (m < 0) {
      var _a = splitAt(-m)(as6), f = _a[0], s = _a[1];
      return pipe(s, concat(f));
    } else {
      return rotate(m - len)(as6);
    }
  };
};
var fromReadonlyNonEmptyArray2 = fromReadonlyNonEmptyArray;
var fromArray = function(as6) {
  return isNonEmpty3(as6) ? some(as6) : none;
};
var makeBy = function(f) {
  return function(n) {
    var j = Math.max(0, Math.floor(n));
    var out = [f(0)];
    for (var i = 1; i < j; i++) {
      out.push(f(i));
    }
    return out;
  };
};
var range = function(start, end) {
  return start <= end ? makeBy(function(i) {
    return start + i;
  })(end - start + 1) : [start];
};
function concat(x, y) {
  return y ? x.concat(y) : function(y2) {
    return y2.concat(x);
  };
}
var sort = function(O2) {
  return function(as6) {
    return as6.slice().sort(O2.compare);
  };
};
var copy = fromReadonlyNonEmptyArray2;
var of2 = function(a) {
  return [a];
};
var prependAll2 = function(middle) {
  return function(as6) {
    var out = [middle, as6[0]];
    for (var i = 1; i < as6.length; i++) {
      out.push(middle, as6[i]);
    }
    return out;
  };
};
var intersperse2 = function(middle) {
  return function(as6) {
    var rest = tail3(as6);
    return isNonEmpty3(rest) ? pipe(rest, prependAll2(middle), prepend2(head3(as6))) : copy(as6);
  };
};
var chop = function(f) {
  return function(as6) {
    var _a = f(as6), b = _a[0], rest = _a[1];
    var out = [b];
    var next = rest;
    while (isNonEmpty3(next)) {
      var _b = f(next), b_1 = _b[0], rest_2 = _b[1];
      out.push(b_1);
      next = rest_2;
    }
    return out;
  };
};
var splitAt = function(n) {
  return function(as6) {
    var m = Math.max(1, n);
    return m >= as6.length ? [copy(as6), []] : [pipe(as6.slice(1, m), prepend2(head3(as6))), as6.slice(m)];
  };
};
var chunksOf = function(n) {
  return chop(splitAt(n));
};
var head3 = head2;
var tail3 = function(as6) {
  return as6.slice(1);
};
var last3 = last2;
var init = function(as6) {
  return as6.slice(0, -1);
};
var concatAll4 = function(S) {
  return function(as6) {
    return as6.reduce(S.concat);
  };
};
function cons(head6, tail5) {
  return tail5 === void 0 ? prepend2(head6) : pipe(tail5, prepend2(head6));
}
var snoc = function(init5, end) {
  return pipe(init5, append2(end));
};

// node_modules/fp-ts/es6/number.js
var Eq = {
  equals: function(first2, second) {
    return first2 === second;
  }
};
var Ord = {
  equals: Eq.equals,
  compare: function(first2, second) {
    return first2 < second ? -1 : first2 > second ? 1 : 0;
  }
};
var Bounded = {
  equals: Eq.equals,
  compare: Ord.compare,
  top: Infinity,
  bottom: -Infinity
};
var MagmaSub = {
  concat: function(first2, second) {
    return first2 - second;
  }
};
var SemigroupSum = {
  concat: function(first2, second) {
    return first2 + second;
  }
};
var SemigroupProduct = {
  concat: function(first2, second) {
    return first2 * second;
  }
};
var MonoidSum = {
  concat: SemigroupSum.concat,
  empty: 0
};
var MonoidProduct = {
  concat: SemigroupProduct.concat,
  empty: 1
};
var Field = {
  add: SemigroupSum.concat,
  zero: 0,
  mul: SemigroupProduct.concat,
  one: 1,
  sub: MagmaSub.concat,
  degree: function(_) {
    return 1;
  },
  div: function(first2, second) {
    return first2 / second;
  },
  mod: function(first2, second) {
    return first2 % second;
  }
};

// node_modules/fp-ts/es6/Separated.js
var separated = function(left6, right6) {
  return { left: left6, right: right6 };
};
var left2 = function(s) {
  return s.left;
};
var right2 = function(s) {
  return s.right;
};

// node_modules/fp-ts/es6/Witherable.js
function wiltDefault(T, C) {
  return function(F) {
    var traverseF = T.traverse(F);
    return function(wa, f) {
      return F.map(traverseF(wa, f), C.separate);
    };
  };
}
function witherDefault(T, C) {
  return function(F) {
    var traverseF = T.traverse(F);
    return function(wa, f) {
      return F.map(traverseF(wa, f), C.compact);
    };
  };
}
function filterE(W) {
  return function(F) {
    var witherF = W.wither(F);
    return function(predicate) {
      return function(ga) {
        return witherF(ga, function(a) {
          return F.map(predicate(a), function(b) {
            return b ? some(a) : none;
          });
        });
      };
    };
  };
}

// node_modules/fp-ts/es6/Zero.js
function guard(F, P) {
  return function(b) {
    return b ? P.of(void 0) : F.zero();
  };
}

// node_modules/fp-ts/es6/ReadonlyArray.js
var __spreadArray5 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isNonEmpty4 = isNonEmpty2;
var append3 = append;
var matchW = function(onEmpty, onNonEmpty) {
  return function(as6) {
    return isNonEmpty4(as6) ? onNonEmpty(as6) : onEmpty();
  };
};
var match = matchW;
var isOutOfBound3 = isOutOfBound;
function lookup(i, as6) {
  return as6 === void 0 ? function(as7) {
    return lookup(i, as7);
  } : isOutOfBound3(i, as6) ? none : some(as6[i]);
}
var head4 = function(as6) {
  return isNonEmpty4(as6) ? some(head2(as6)) : none;
};
var last4 = function(as6) {
  return isNonEmpty4(as6) ? some(last2(as6)) : none;
};
var findIndex = function(predicate) {
  return function(as6) {
    for (var i = 0; i < as6.length; i++) {
      if (predicate(as6[i])) {
        return some(i);
      }
    }
    return none;
  };
};
function findFirst(predicate) {
  return function(as6) {
    for (var i = 0; i < as6.length; i++) {
      if (predicate(as6[i])) {
        return some(as6[i]);
      }
    }
    return none;
  };
}
var findFirstMap = function(f) {
  return function(as6) {
    for (var i = 0; i < as6.length; i++) {
      var out = f(as6[i]);
      if (isSome(out)) {
        return out;
      }
    }
    return none;
  };
};
function findLast(predicate) {
  return function(as6) {
    for (var i = as6.length - 1; i >= 0; i--) {
      if (predicate(as6[i])) {
        return some(as6[i]);
      }
    }
    return none;
  };
}
var findLastMap = function(f) {
  return function(as6) {
    for (var i = as6.length - 1; i >= 0; i--) {
      var out = f(as6[i]);
      if (isSome(out)) {
        return out;
      }
    }
    return none;
  };
};
var findLastIndex = function(predicate) {
  return function(as6) {
    for (var i = as6.length - 1; i >= 0; i--) {
      if (predicate(as6[i])) {
        return some(i);
      }
    }
    return none;
  };
};
function elem(E2) {
  return function(a, as6) {
    if (as6 === void 0) {
      var elemE_1 = elem(E2);
      return function(as7) {
        return elemE_1(a, as7);
      };
    }
    var predicate = function(element2) {
      return E2.equals(element2, a);
    };
    var i = 0;
    for (; i < as6.length; i++) {
      if (predicate(as6[i])) {
        return true;
      }
    }
    return false;
  };
}
var _chainRecDepthFirst = function(a, f) {
  return pipe(a, chainRecDepthFirst(f));
};
var _chainRecBreadthFirst = function(a, f) {
  return pipe(a, chainRecBreadthFirst(f));
};
var foldMapWithIndex2 = function(M) {
  return function(f) {
    return function(fa) {
      return fa.reduce(function(b, a, i) {
        return M.concat(b, f(i, a));
      }, M.empty);
    };
  };
};
var reduce2 = function(b, f) {
  return reduceWithIndex2(b, function(_, b2, a) {
    return f(b2, a);
  });
};
var foldMap2 = function(M) {
  var foldMapWithIndexM = foldMapWithIndex2(M);
  return function(f) {
    return foldMapWithIndexM(function(_, a) {
      return f(a);
    });
  };
};
var reduceWithIndex2 = function(b, f) {
  return function(fa) {
    var len = fa.length;
    var out = b;
    for (var i = 0; i < len; i++) {
      out = f(i, out, fa[i]);
    }
    return out;
  };
};
var reduceRight2 = function(b, f) {
  return reduceRightWithIndex2(b, function(_, a, b2) {
    return f(a, b2);
  });
};
var reduceRightWithIndex2 = function(b, f) {
  return function(fa) {
    return fa.reduceRight(function(b2, a, i) {
      return f(i, a, b2);
    }, b);
  };
};
var getShow2 = function(S) {
  return {
    show: function(as6) {
      return "[".concat(as6.map(S.show).join(", "), "]");
    }
  };
};
var getEq2 = function(E2) {
  return fromEquals(function(xs, ys) {
    return xs.length === ys.length && xs.every(function(x, i) {
      return E2.equals(x, ys[i]);
    });
  });
};
var getOrd = function(O2) {
  return fromCompare(function(a, b) {
    var aLen = a.length;
    var bLen = b.length;
    var len = Math.min(aLen, bLen);
    for (var i = 0; i < len; i++) {
      var ordering = O2.compare(a[i], b[i]);
      if (ordering !== 0) {
        return ordering;
      }
    }
    return Ord.compare(aLen, bLen);
  });
};
var chainRecDepthFirst = function(f) {
  return function(a) {
    var todo = __spreadArray5([], f(a), true);
    var out = [];
    while (todo.length > 0) {
      var e = todo.shift();
      if (isLeft(e)) {
        todo.unshift.apply(todo, f(e.left));
      } else {
        out.push(e.right);
      }
    }
    return out;
  };
};
var chainRecBreadthFirst = function(f) {
  return function(a) {
    var initial = f(a);
    var todo = [];
    var out = [];
    function go(e2) {
      if (isLeft(e2)) {
        f(e2.left).forEach(function(v) {
          return todo.push(v);
        });
      } else {
        out.push(e2.right);
      }
    }
    for (var _i = 0, initial_1 = initial; _i < initial_1.length; _i++) {
      var e = initial_1[_i];
      go(e);
    }
    while (todo.length > 0) {
      go(todo.shift());
    }
    return out;
  };
};
function every(predicate) {
  return function(as6) {
    return as6.every(predicate);
  };
}
var intercalate2 = function(M) {
  var intercalateM = intercalate(M);
  return function(middle) {
    return match(function() {
      return M.empty;
    }, intercalateM(middle));
  };
};

// node_modules/fp-ts/es6/Array.js
var isEmpty = function(as6) {
  return as6.length === 0;
};
var isNonEmpty5 = isNonEmpty3;
var prepend3 = prepend2;
var prependW3 = prependW2;
var append4 = append2;
var appendW3 = appendW2;
var makeBy3 = function(n, f) {
  return n <= 0 ? [] : makeBy(f)(n);
};
var replicate = function(n, a) {
  return makeBy3(n, function() {
    return a;
  });
};
function fromPredicate(predicate) {
  return function(a) {
    return predicate(a) ? [a] : [];
  };
}
var fromOption = function(ma) {
  return isNone(ma) ? [] : [ma.value];
};
var fromEither = function(e) {
  return isLeft(e) ? [] : [e.right];
};
var matchW2 = function(onEmpty, onNonEmpty) {
  return function(as6) {
    return isNonEmpty5(as6) ? onNonEmpty(as6) : onEmpty();
  };
};
var match2 = matchW2;
var matchLeftW = function(onEmpty, onNonEmpty) {
  return function(as6) {
    return isNonEmpty5(as6) ? onNonEmpty(head3(as6), tail3(as6)) : onEmpty();
  };
};
var matchLeft = matchLeftW;
var foldLeft = matchLeft;
var matchRightW = function(onEmpty, onNonEmpty) {
  return function(as6) {
    return isNonEmpty5(as6) ? onNonEmpty(init(as6), last3(as6)) : onEmpty();
  };
};
var matchRight = matchRightW;
var foldRight = matchRight;
var chainWithIndex = function(f) {
  return function(as6) {
    var out = [];
    for (var i = 0; i < as6.length; i++) {
      out.push.apply(out, f(i, as6[i]));
    }
    return out;
  };
};
var scanLeft = function(b, f) {
  return function(as6) {
    var len = as6.length;
    var out = new Array(len + 1);
    out[0] = b;
    for (var i = 0; i < len; i++) {
      out[i + 1] = f(out[i], as6[i]);
    }
    return out;
  };
};
var scanRight = function(b, f) {
  return function(as6) {
    var len = as6.length;
    var out = new Array(len + 1);
    out[len] = b;
    for (var i = len - 1; i >= 0; i--) {
      out[i] = f(as6[i], out[i + 1]);
    }
    return out;
  };
};
var size = function(as6) {
  return as6.length;
};
var isOutOfBound4 = isOutOfBound2;
var lookup2 = lookup;
var head5 = head4;
var last5 = last4;
var tail4 = function(as6) {
  return isNonEmpty5(as6) ? some(tail3(as6)) : none;
};
var init3 = function(as6) {
  return isNonEmpty5(as6) ? some(init(as6)) : none;
};
var takeLeft = function(n) {
  return function(as6) {
    return isOutOfBound4(n, as6) ? copy2(as6) : as6.slice(0, n);
  };
};
var takeRight = function(n) {
  return function(as6) {
    return isOutOfBound4(n, as6) ? copy2(as6) : n === 0 ? [] : as6.slice(-n);
  };
};
function takeLeftWhile(predicate) {
  return function(as6) {
    var out = [];
    for (var _i = 0, as_1 = as6; _i < as_1.length; _i++) {
      var a = as_1[_i];
      if (!predicate(a)) {
        break;
      }
      out.push(a);
    }
    return out;
  };
}
var spanLeftIndex = function(as6, predicate) {
  var l = as6.length;
  var i = 0;
  for (; i < l; i++) {
    if (!predicate(as6[i])) {
      break;
    }
  }
  return i;
};
function spanLeft(predicate) {
  return function(as6) {
    var _a = splitAt3(spanLeftIndex(as6, predicate))(as6), init5 = _a[0], rest = _a[1];
    return { init: init5, rest };
  };
}
var dropLeft = function(n) {
  return function(as6) {
    return n <= 0 || isEmpty(as6) ? copy2(as6) : n >= as6.length ? [] : as6.slice(n, as6.length);
  };
};
var dropRight = function(n) {
  return function(as6) {
    return n <= 0 || isEmpty(as6) ? copy2(as6) : n >= as6.length ? [] : as6.slice(0, as6.length - n);
  };
};
function dropLeftWhile(predicate) {
  return function(as6) {
    return as6.slice(spanLeftIndex(as6, predicate));
  };
}
var findIndex2 = findIndex;
function findFirst2(predicate) {
  return findFirst(predicate);
}
var findFirstMap2 = findFirstMap;
function findLast2(predicate) {
  return findLast(predicate);
}
var findLastMap2 = findLastMap;
var findLastIndex2 = findLastIndex;
var copy2 = function(as6) {
  return as6.slice();
};
var insertAt = function(i, a) {
  return function(as6) {
    return i < 0 || i > as6.length ? none : some(unsafeInsertAt3(i, a, as6));
  };
};
var updateAt = function(i, a) {
  return modifyAt(i, function() {
    return a;
  });
};
var deleteAt = function(i) {
  return function(as6) {
    return isOutOfBound4(i, as6) ? none : some(unsafeDeleteAt(i, as6));
  };
};
var modifyAt = function(i, f) {
  return function(as6) {
    return isOutOfBound4(i, as6) ? none : some(unsafeUpdateAt3(i, f(as6[i]), as6));
  };
};
var reverse2 = function(as6) {
  return isEmpty(as6) ? [] : as6.slice().reverse();
};
var rights = function(as6) {
  var r = [];
  for (var i = 0; i < as6.length; i++) {
    var a = as6[i];
    if (a._tag === "Right") {
      r.push(a.right);
    }
  }
  return r;
};
var lefts = function(as6) {
  var r = [];
  for (var i = 0; i < as6.length; i++) {
    var a = as6[i];
    if (a._tag === "Left") {
      r.push(a.left);
    }
  }
  return r;
};
var sort2 = function(O2) {
  return function(as6) {
    return as6.length <= 1 ? copy2(as6) : as6.slice().sort(O2.compare);
  };
};
var zipWith = function(fa, fb, f) {
  var fc = [];
  var len = Math.min(fa.length, fb.length);
  for (var i = 0; i < len; i++) {
    fc[i] = f(fa[i], fb[i]);
  }
  return fc;
};
function zip(as6, bs) {
  if (bs === void 0) {
    return function(bs2) {
      return zip(bs2, as6);
    };
  }
  return zipWith(as6, bs, function(a, b) {
    return [a, b];
  });
}
var unzip = function(as6) {
  var fa = [];
  var fb = [];
  for (var i = 0; i < as6.length; i++) {
    fa[i] = as6[i][0];
    fb[i] = as6[i][1];
  }
  return [fa, fb];
};
var prependAll3 = function(middle) {
  var f = prependAll2(middle);
  return function(as6) {
    return isNonEmpty5(as6) ? f(as6) : [];
  };
};
var intersperse3 = function(middle) {
  var f = intersperse2(middle);
  return function(as6) {
    return isNonEmpty5(as6) ? f(as6) : copy2(as6);
  };
};
var rotate3 = function(n) {
  var f = rotate(n);
  return function(as6) {
    return isNonEmpty5(as6) ? f(as6) : copy2(as6);
  };
};
var elem2 = elem;
var uniq3 = function(E2) {
  var f = uniq(E2);
  return function(as6) {
    return isNonEmpty5(as6) ? f(as6) : copy2(as6);
  };
};
var sortBy3 = function(ords) {
  var f = sortBy(ords);
  return function(as6) {
    return isNonEmpty5(as6) ? f(as6) : copy2(as6);
  };
};
var chop3 = function(f) {
  var g = chop(f);
  return function(as6) {
    return isNonEmpty5(as6) ? g(as6) : [];
  };
};
var splitAt3 = function(n) {
  return function(as6) {
    return n >= 1 && isNonEmpty5(as6) ? splitAt(n)(as6) : isEmpty(as6) ? [copy2(as6), []] : [[], copy2(as6)];
  };
};
var chunksOf3 = function(n) {
  var f = chunksOf(n);
  return function(as6) {
    return isNonEmpty5(as6) ? f(as6) : [];
  };
};
var fromOptionK = function(f) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return fromOption(f.apply(void 0, a));
  };
};
function comprehension(input, f, g) {
  if (g === void 0) {
    g = function() {
      return true;
    };
  }
  var go = function(scope, input2) {
    return isNonEmpty5(input2) ? flatMap(head3(input2), function(a) {
      return go(pipe(scope, append4(a)), tail3(input2));
    }) : g.apply(void 0, scope) ? [f.apply(void 0, scope)] : [];
  };
  return go([], input);
}
var concatW = function(second) {
  return function(first2) {
    return isEmpty(first2) ? copy2(second) : isEmpty(second) ? copy2(first2) : first2.concat(second);
  };
};
var concat2 = concatW;
function union3(E2) {
  var unionE = union(E2);
  return function(first2, second) {
    if (second === void 0) {
      var unionE_1 = union3(E2);
      return function(second2) {
        return unionE_1(second2, first2);
      };
    }
    return isNonEmpty5(first2) && isNonEmpty5(second) ? unionE(second)(first2) : isNonEmpty5(first2) ? copy2(first2) : copy2(second);
  };
}
function intersection(E2) {
  var elemE = elem2(E2);
  return function(xs, ys) {
    if (ys === void 0) {
      var intersectionE_1 = intersection(E2);
      return function(ys2) {
        return intersectionE_1(ys2, xs);
      };
    }
    return xs.filter(function(a) {
      return elemE(a, ys);
    });
  };
}
function difference(E2) {
  var elemE = elem2(E2);
  return function(xs, ys) {
    if (ys === void 0) {
      var differenceE_1 = difference(E2);
      return function(ys2) {
        return differenceE_1(ys2, xs);
      };
    }
    return xs.filter(function(a) {
      return !elemE(a, ys);
    });
  };
}
var _map = function(fa, f) {
  return pipe(fa, map2(f));
};
var _mapWithIndex = function(fa, f) {
  return pipe(fa, mapWithIndex(f));
};
var _ap = function(fab, fa) {
  return pipe(fab, ap2(fa));
};
var _filter = function(fa, predicate) {
  return pipe(fa, filter(predicate));
};
var _filterMap = function(fa, f) {
  return pipe(fa, filterMap(f));
};
var _partition = function(fa, predicate) {
  return pipe(fa, partition(predicate));
};
var _partitionMap = function(fa, f) {
  return pipe(fa, partitionMap(f));
};
var _partitionWithIndex = function(fa, predicateWithIndex) {
  return pipe(fa, partitionWithIndex(predicateWithIndex));
};
var _partitionMapWithIndex = function(fa, f) {
  return pipe(fa, partitionMapWithIndex(f));
};
var _alt = function(fa, that) {
  return pipe(fa, alt(that));
};
var _reduce = function(fa, b, f) {
  return pipe(fa, reduce3(b, f));
};
var _foldMap = function(M) {
  var foldMapM = foldMap3(M);
  return function(fa, f) {
    return pipe(fa, foldMapM(f));
  };
};
var _reduceRight = function(fa, b, f) {
  return pipe(fa, reduceRight3(b, f));
};
var _reduceWithIndex = function(fa, b, f) {
  return pipe(fa, reduceWithIndex3(b, f));
};
var _foldMapWithIndex = function(M) {
  var foldMapWithIndexM = foldMapWithIndex3(M);
  return function(fa, f) {
    return pipe(fa, foldMapWithIndexM(f));
  };
};
var _reduceRightWithIndex = function(fa, b, f) {
  return pipe(fa, reduceRightWithIndex3(b, f));
};
var _filterMapWithIndex = function(fa, f) {
  return pipe(fa, filterMapWithIndex(f));
};
var _filterWithIndex = function(fa, predicateWithIndex) {
  return pipe(fa, filterWithIndex(predicateWithIndex));
};
var _extend = function(fa, f) {
  return pipe(fa, extend(f));
};
var _traverse = function(F) {
  var traverseF = traverse(F);
  return function(ta, f) {
    return pipe(ta, traverseF(f));
  };
};
var _traverseWithIndex = function(F) {
  var traverseWithIndexF = traverseWithIndex(F);
  return function(ta, f) {
    return pipe(ta, traverseWithIndexF(f));
  };
};
var _chainRecDepthFirst2 = _chainRecDepthFirst;
var _chainRecBreadthFirst2 = _chainRecBreadthFirst;
var of3 = of2;
var zero = function() {
  return [];
};
var map2 = function(f) {
  return function(fa) {
    return fa.map(function(a) {
      return f(a);
    });
  };
};
var ap2 = function(fa) {
  return flatMap(function(f) {
    return pipe(fa, map2(f));
  });
};
var flatMap = /* @__PURE__ */ dual(2, function(ma, f) {
  return pipe(ma, chainWithIndex(function(i, a) {
    return f(a, i);
  }));
});
var flatten = /* @__PURE__ */ flatMap(identity);
var mapWithIndex = function(f) {
  return function(fa) {
    return fa.map(function(a, i) {
      return f(i, a);
    });
  };
};
var filterMapWithIndex = function(f) {
  return function(fa) {
    var out = [];
    for (var i = 0; i < fa.length; i++) {
      var optionB = f(i, fa[i]);
      if (isSome(optionB)) {
        out.push(optionB.value);
      }
    }
    return out;
  };
};
var filterMap = function(f) {
  return filterMapWithIndex(function(_, a) {
    return f(a);
  });
};
var compact = /* @__PURE__ */ filterMap(identity);
var separate = function(fa) {
  var left6 = [];
  var right6 = [];
  for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {
    var e = fa_1[_i];
    if (e._tag === "Left") {
      left6.push(e.left);
    } else {
      right6.push(e.right);
    }
  }
  return separated(left6, right6);
};
var filter = function(predicate) {
  return function(as6) {
    return as6.filter(predicate);
  };
};
var partition = function(predicate) {
  return partitionWithIndex(function(_, a) {
    return predicate(a);
  });
};
var partitionWithIndex = function(predicateWithIndex) {
  return function(as6) {
    var left6 = [];
    var right6 = [];
    for (var i = 0; i < as6.length; i++) {
      var b = as6[i];
      if (predicateWithIndex(i, b)) {
        right6.push(b);
      } else {
        left6.push(b);
      }
    }
    return separated(left6, right6);
  };
};
var partitionMap = function(f) {
  return partitionMapWithIndex(function(_, a) {
    return f(a);
  });
};
var partitionMapWithIndex = function(f) {
  return function(fa) {
    var left6 = [];
    var right6 = [];
    for (var i = 0; i < fa.length; i++) {
      var e = f(i, fa[i]);
      if (e._tag === "Left") {
        left6.push(e.left);
      } else {
        right6.push(e.right);
      }
    }
    return separated(left6, right6);
  };
};
var altW = function(that) {
  return function(fa) {
    return fa.concat(that());
  };
};
var alt = altW;
var filterWithIndex = function(predicateWithIndex) {
  return function(as6) {
    return as6.filter(function(b, i) {
      return predicateWithIndex(i, b);
    });
  };
};
var extend = function(f) {
  return function(wa) {
    return wa.map(function(_, i) {
      return f(wa.slice(i));
    });
  };
};
var duplicate = /* @__PURE__ */ extend(identity);
var foldMap3 = foldMap2;
var foldMapWithIndex3 = foldMapWithIndex2;
var reduce3 = reduce2;
var reduceWithIndex3 = reduceWithIndex2;
var reduceRight3 = reduceRight2;
var reduceRightWithIndex3 = reduceRightWithIndex2;
var traverse = function(F) {
  var traverseWithIndexF = traverseWithIndex(F);
  return function(f) {
    return traverseWithIndexF(function(_, a) {
      return f(a);
    });
  };
};
var sequence = function(F) {
  return function(ta) {
    return _reduce(ta, F.of(zero()), function(fas, fa) {
      return F.ap(F.map(fas, function(as6) {
        return function(a) {
          return pipe(as6, append4(a));
        };
      }), fa);
    });
  };
};
var traverseWithIndex = function(F) {
  return function(f) {
    return reduceWithIndex3(F.of(zero()), function(i, fbs, a) {
      return F.ap(F.map(fbs, function(bs) {
        return function(b) {
          return pipe(bs, append4(b));
        };
      }), f(i, a));
    });
  };
};
var wither = function(F) {
  var _witherF = _wither(F);
  return function(f) {
    return function(fa) {
      return _witherF(fa, f);
    };
  };
};
var wilt = function(F) {
  var _wiltF = _wilt(F);
  return function(f) {
    return function(fa) {
      return _wiltF(fa, f);
    };
  };
};
var unfold = function(b, f) {
  var out = [];
  var bb = b;
  while (true) {
    var mt = f(bb);
    if (isSome(mt)) {
      var _a = mt.value, a = _a[0], b_1 = _a[1];
      out.push(a);
      bb = b_1;
    } else {
      break;
    }
  }
  return out;
};
var URI = "Array";
var getShow3 = getShow2;
var getSemigroup3 = function() {
  return {
    concat: function(first2, second) {
      return first2.concat(second);
    }
  };
};
var getMonoid2 = function() {
  return {
    concat: getSemigroup3().concat,
    empty: []
  };
};
var getEq3 = getEq2;
var getOrd2 = getOrd;
var getUnionSemigroup = function(E2) {
  var unionE = union3(E2);
  return {
    concat: function(first2, second) {
      return unionE(second)(first2);
    }
  };
};
var getUnionMonoid = function(E2) {
  return {
    concat: getUnionSemigroup(E2).concat,
    empty: []
  };
};
var getIntersectionSemigroup = function(E2) {
  var intersectionE = intersection(E2);
  return {
    concat: function(first2, second) {
      return intersectionE(second)(first2);
    }
  };
};
var getDifferenceMagma = function(E2) {
  var differenceE = difference(E2);
  return {
    concat: function(first2, second) {
      return differenceE(second)(first2);
    }
  };
};
var Functor = {
  URI,
  map: _map
};
var flap2 = /* @__PURE__ */ flap(Functor);
var Pointed = {
  URI,
  of: of3
};
var FunctorWithIndex = {
  URI,
  map: _map,
  mapWithIndex: _mapWithIndex
};
var Apply = {
  URI,
  map: _map,
  ap: _ap
};
var apFirst2 = /* @__PURE__ */ apFirst(Apply);
var apSecond2 = /* @__PURE__ */ apSecond(Apply);
var Applicative = {
  URI,
  map: _map,
  ap: _ap,
  of: of3
};
var Chain = {
  URI,
  map: _map,
  ap: _ap,
  chain: flatMap
};
var chainFirst2 = /* @__PURE__ */ chainFirst(Chain);
var Monad = {
  URI,
  map: _map,
  ap: _ap,
  of: of3,
  chain: flatMap
};
var Unfoldable = {
  URI,
  unfold
};
var Alt = {
  URI,
  map: _map,
  alt: _alt
};
var Zero = {
  URI,
  zero
};
var guard2 = /* @__PURE__ */ guard(Zero, Pointed);
var Alternative = {
  URI,
  map: _map,
  ap: _ap,
  of: of3,
  alt: _alt,
  zero
};
var Extend = {
  URI,
  map: _map,
  extend: _extend
};
var Compactable = {
  URI,
  compact,
  separate
};
var Filterable = {
  URI,
  map: _map,
  compact,
  separate,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap
};
var FilterableWithIndex = {
  URI,
  map: _map,
  mapWithIndex: _mapWithIndex,
  compact,
  separate,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap,
  partitionMapWithIndex: _partitionMapWithIndex,
  partitionWithIndex: _partitionWithIndex,
  filterMapWithIndex: _filterMapWithIndex,
  filterWithIndex: _filterWithIndex
};
var Foldable = {
  URI,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight
};
var FoldableWithIndex = {
  URI,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  reduceWithIndex: _reduceWithIndex,
  foldMapWithIndex: _foldMapWithIndex,
  reduceRightWithIndex: _reduceRightWithIndex
};
var Traversable = {
  URI,
  map: _map,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  traverse: _traverse,
  sequence
};
var TraversableWithIndex = {
  URI,
  map: _map,
  mapWithIndex: _mapWithIndex,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  reduceWithIndex: _reduceWithIndex,
  foldMapWithIndex: _foldMapWithIndex,
  reduceRightWithIndex: _reduceRightWithIndex,
  traverse: _traverse,
  sequence,
  traverseWithIndex: _traverseWithIndex
};
var _wither = /* @__PURE__ */ witherDefault(Traversable, Compactable);
var _wilt = /* @__PURE__ */ wiltDefault(Traversable, Compactable);
var Witherable = {
  URI,
  map: _map,
  compact,
  separate,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  traverse: _traverse,
  sequence,
  wither: _wither,
  wilt: _wilt
};
var chainRecDepthFirst2 = chainRecDepthFirst;
var ChainRecDepthFirst = {
  URI,
  map: _map,
  ap: _ap,
  chain: flatMap,
  chainRec: _chainRecDepthFirst2
};
var chainRecBreadthFirst2 = chainRecBreadthFirst;
var ChainRecBreadthFirst = {
  URI,
  map: _map,
  ap: _ap,
  chain: flatMap,
  chainRec: _chainRecBreadthFirst2
};
var filterE2 = /* @__PURE__ */ filterE(Witherable);
var FromEither = {
  URI,
  fromEither
};
var fromEitherK2 = /* @__PURE__ */ fromEitherK(FromEither);
var unsafeInsertAt3 = unsafeInsertAt;
var unsafeUpdateAt3 = function(i, a, as6) {
  return isNonEmpty5(as6) ? unsafeUpdateAt(i, a, as6) : [];
};
var unsafeDeleteAt = function(i, as6) {
  var xs = as6.slice();
  xs.splice(i, 1);
  return xs;
};
var every2 = every;
var some2 = function(predicate) {
  return function(as6) {
    return as6.some(predicate);
  };
};
var exists = some2;
var intercalate3 = intercalate2;
var Do = /* @__PURE__ */ of3(emptyRecord);
var bindTo2 = /* @__PURE__ */ bindTo(Functor);
var let_2 = /* @__PURE__ */ let_(Functor);
var bind2 = /* @__PURE__ */ bind(Chain);
var apS2 = /* @__PURE__ */ apS(Apply);
var chain = flatMap;
var range3 = range;
var empty2 = [];
var cons3 = cons;
var snoc3 = snoc;
var prependToAll = prependAll3;
var array = {
  URI,
  compact,
  separate,
  map: _map,
  ap: _ap,
  of: of3,
  chain: flatMap,
  filter: _filter,
  filterMap: _filterMap,
  partition: _partition,
  partitionMap: _partitionMap,
  mapWithIndex: _mapWithIndex,
  partitionMapWithIndex: _partitionMapWithIndex,
  partitionWithIndex: _partitionWithIndex,
  filterMapWithIndex: _filterMapWithIndex,
  filterWithIndex: _filterWithIndex,
  alt: _alt,
  zero,
  unfold,
  reduce: _reduce,
  foldMap: _foldMap,
  reduceRight: _reduceRight,
  traverse: _traverse,
  sequence,
  reduceWithIndex: _reduceWithIndex,
  foldMapWithIndex: _foldMapWithIndex,
  reduceRightWithIndex: _reduceRightWithIndex,
  traverseWithIndex: _traverseWithIndex,
  extend: _extend,
  wither: _wither,
  wilt: _wilt
};

// node_modules/fp-ts/es6/ChainRec.js
var tailRec = function(startWith, f) {
  var ab = f(startWith);
  while (ab._tag === "Left") {
    ab = f(ab.left);
  }
  return ab.right;
};

// node_modules/fp-ts/es6/Either.js
var left3 = left;
var right3 = right;
var flatMap2 = /* @__PURE__ */ dual(2, function(ma, f) {
  return isLeft2(ma) ? ma : f(ma.right);
});
var _map2 = function(fa, f) {
  return pipe(fa, map3(f));
};
var _ap2 = function(fab, fa) {
  return pipe(fab, ap3(fa));
};
var URI2 = "Either";
var map3 = function(f) {
  return function(fa) {
    return isLeft2(fa) ? fa : right3(f(fa.right));
  };
};
var Functor2 = {
  URI: URI2,
  map: _map2
};
var as2 = dual(2, as(Functor2));
var asUnit2 = asUnit(Functor2);
var of4 = right3;
var apW = function(fa) {
  return function(fab) {
    return isLeft2(fab) ? fab : isLeft2(fa) ? fa : right3(fab.right(fa.right));
  };
};
var ap3 = apW;
var Apply2 = {
  URI: URI2,
  map: _map2,
  ap: _ap2
};
var Chain2 = {
  URI: URI2,
  map: _map2,
  ap: _ap2,
  chain: flatMap2
};
var bimap = function(f, g) {
  return function(fa) {
    return isLeft2(fa) ? left3(f(fa.left)) : right3(g(fa.right));
  };
};
var mapLeft = function(f) {
  return function(fa) {
    return isLeft2(fa) ? left3(f(fa.left)) : fa;
  };
};
var FromEither2 = {
  URI: URI2,
  fromEither: identity
};
var isLeft2 = isLeft;
var isRight2 = isRight;
var matchW3 = function(onLeft, onRight) {
  return function(ma) {
    return isLeft2(ma) ? onLeft(ma.left) : onRight(ma.right);
  };
};
var match3 = matchW3;
var fold = match3;
var getOrElseW = function(onLeft) {
  return function(ma) {
    return isLeft2(ma) ? onLeft(ma.left) : ma.right;
  };
};
var getOrElse = getOrElseW;
var flap3 = /* @__PURE__ */ flap(Functor2);
var tap2 = /* @__PURE__ */ dual(2, tap(Chain2));
var _FromEither = {
  fromEither: FromEither2.fromEither
};
var orElseW = function(onLeft) {
  return function(ma) {
    return isLeft2(ma) ? onLeft(ma.left) : ma;
  };
};
var orElse = orElseW;
var fromNullable = function(e) {
  return function(a) {
    return a == null ? left3(e) : right3(a);
  };
};
var tryCatch = function(f, onThrow) {
  try {
    return right3(f());
  } catch (e) {
    return left3(onThrow(e));
  }
};
var tryCatchK = function(f, onThrow) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return tryCatch(function() {
      return f.apply(void 0, a);
    }, onThrow);
  };
};
var chainW = flatMap2;
var chain2 = flatMap2;

// node_modules/fp-ts/es6/Predicate.js
var not = function(predicate) {
  return function(a) {
    return !predicate(a);
  };
};

// node_modules/fp-ts/es6/Option.js
var none2 = none;
var some3 = some;
function fromPredicate2(predicate) {
  return function(a) {
    return predicate(a) ? some3(a) : none2;
  };
}
var getRight = function(ma) {
  return ma._tag === "Left" ? none2 : some3(ma.right);
};
var _map3 = function(fa, f) {
  return pipe(fa, map4(f));
};
var _ap3 = function(fab, fa) {
  return pipe(fab, ap4(fa));
};
var URI3 = "Option";
var map4 = function(f) {
  return function(fa) {
    return isNone2(fa) ? none2 : some3(f(fa.value));
  };
};
var Functor3 = {
  URI: URI3,
  map: _map3
};
var as3 = dual(2, as(Functor3));
var asUnit3 = asUnit(Functor3);
var ap4 = function(fa) {
  return function(fab) {
    return isNone2(fab) ? none2 : isNone2(fa) ? none2 : some3(fab.value(fa.value));
  };
};
var flatMap3 = /* @__PURE__ */ dual(2, function(ma, f) {
  return isNone2(ma) ? none2 : f(ma.value);
});
var Chain3 = {
  URI: URI3,
  map: _map3,
  ap: _ap3,
  chain: flatMap3
};
var orElse2 = dual(2, function(self, that) {
  return isNone2(self) ? that() : self;
});
var alt2 = orElse2;
var fromEither2 = getRight;
var FromEither3 = {
  URI: URI3,
  fromEither: fromEither2
};
var isSome2 = isSome;
var isNone2 = function(fa) {
  return fa._tag === "None";
};
var matchW4 = function(onNone, onSome) {
  return function(ma) {
    return isNone2(ma) ? onNone() : onSome(ma.value);
  };
};
var match4 = matchW4;
var fold2 = match4;
var getOrElseW2 = function(onNone) {
  return function(ma) {
    return isNone2(ma) ? onNone() : ma.value;
  };
};
var getOrElse2 = getOrElseW2;
var tap3 = /* @__PURE__ */ dual(2, tap(Chain3));
var tapEither2 = /* @__PURE__ */ dual(2, tapEither(FromEither3, Chain3));
var fromNullable2 = function(a) {
  return a == null ? none2 : some3(a);
};
var chain3 = flatMap3;

// node_modules/fp-ts/es6/EitherT.js
function right4(F) {
  return flow(right3, F.of);
}
function left4(F) {
  return flow(left3, F.of);
}
function rightF(F) {
  return function(fa) {
    return F.map(fa, right3);
  };
}
function map5(F) {
  return map(F, Functor2);
}
function ap5(F) {
  return ap(F, Apply2);
}
function flatMap4(M) {
  return function(ma, f) {
    return M.chain(ma, function(e) {
      return isLeft2(e) ? M.of(e) : f(e.right);
    });
  };
}
function mapBoth(F) {
  return function(self, f, g) {
    return F.map(self, bimap(f, g));
  };
}
function mapError(F) {
  return function(self, f) {
    return F.map(self, mapLeft(f));
  };
}
function match5(F) {
  return function(onLeft, onRight) {
    return function(ma) {
      return F.map(ma, match3(onLeft, onRight));
    };
  };
}
function getOrElse3(M) {
  return function(onLeft) {
    return function(ma) {
      return M.chain(ma, match3(onLeft, M.of));
    };
  };
}
function orElse3(M) {
  return function(onLeft) {
    return function(ma) {
      return M.chain(ma, function(e) {
        return isLeft2(e) ? onLeft(e.left) : M.of(e);
      });
    };
  };
}
function tapError(M) {
  var orElseM = orElse3(M);
  return function(ma, onLeft) {
    return pipe(ma, orElseM(function(e) {
      return M.map(onLeft(e), function(eb) {
        return isLeft2(eb) ? eb : left3(e);
      });
    }));
  };
}

// node_modules/fp-ts/es6/FromIO.js
function tapIO(F, M) {
  var chainFirstM = tap(M);
  return function(self, f) {
    return chainFirstM(self, flow(f, F.fromIO));
  };
}

// node_modules/fp-ts/es6/FromTask.js
function tapTask(F, M) {
  var tapM = tap(M);
  return function(self, f) {
    return tapM(self, flow(f, F.fromTask));
  };
}

// node_modules/fp-ts/es6/Task.js
var fromIO = function(ma) {
  return function() {
    return Promise.resolve().then(ma);
  };
};
var _map4 = function(fa, f) {
  return pipe(fa, map6(f));
};
var _apPar = function(fab, fa) {
  return pipe(fab, ap6(fa));
};
var map6 = function(f) {
  return function(fa) {
    return function() {
      return Promise.resolve().then(fa).then(f);
    };
  };
};
var ap6 = function(fa) {
  return function(fab) {
    return function() {
      return Promise.all([Promise.resolve().then(fab), Promise.resolve().then(fa)]).then(function(_a) {
        var f = _a[0], a = _a[1];
        return f(a);
      });
    };
  };
};
var of5 = function(a) {
  return function() {
    return Promise.resolve(a);
  };
};
var flatMap5 = /* @__PURE__ */ dual(2, function(ma, f) {
  return function() {
    return Promise.resolve().then(ma).then(function(a) {
      return f(a)();
    });
  };
});
var URI4 = "Task";
var Functor4 = {
  URI: URI4,
  map: _map4
};
var as4 = dual(2, as(Functor4));
var asUnit4 = asUnit(Functor4);
var Pointed2 = {
  URI: URI4,
  of: of5
};
var ApplyPar = {
  URI: URI4,
  map: _map4,
  ap: _apPar
};
var Chain4 = {
  URI: URI4,
  map: _map4,
  ap: _apPar,
  chain: flatMap5
};
var Monad2 = {
  URI: URI4,
  map: _map4,
  of: of5,
  ap: _apPar,
  chain: flatMap5
};
var FromIO = {
  URI: URI4,
  fromIO
};
var _FlatMap = {
  flatMap: flatMap5
};
var _FromIO = {
  fromIO: FromIO.fromIO
};
var flatMapIO2 = flatMapIO(_FromIO, _FlatMap);
var tap4 = /* @__PURE__ */ dual(2, tap(Chain4));
var tapIO2 = /* @__PURE__ */ dual(2, tapIO(FromIO, Chain4));

// node_modules/fp-ts/es6/TaskEither.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var left5 = /* @__PURE__ */ left4(Pointed2);
var right5 = /* @__PURE__ */ right4(Pointed2);
var rightTask = /* @__PURE__ */ rightF(Functor4);
var rightIO = /* @__PURE__ */ flow(fromIO, rightTask);
var fromIO2 = rightIO;
var fromTask = rightTask;
var fromEither3 = of5;
var match6 = /* @__PURE__ */ match5(Functor4);
var getOrElse4 = /* @__PURE__ */ getOrElse3(Monad2);
var tryCatch2 = function(f, onRejected) {
  return function() {
    return __awaiter(void 0, void 0, void 0, function() {
      var reason_1;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2, , 3]);
            return [4, f().then(right)];
          case 1:
            return [2, _a.sent()];
          case 2:
            reason_1 = _a.sent();
            return [2, left(onRejected(reason_1))];
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
};
var tryCatchK2 = function(f, onRejected) {
  return function() {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      a[_i] = arguments[_i];
    }
    return tryCatch2(function() {
      return f.apply(void 0, a);
    }, onRejected);
  };
};
var tapError2 = /* @__PURE__ */ dual(2, tapError(Monad2));
var _map5 = function(fa, f) {
  return pipe(fa, map7(f));
};
var _apPar2 = function(fab, fa) {
  return pipe(fab, ap7(fa));
};
var map7 = /* @__PURE__ */ map5(Functor4);
var mapBoth2 = /* @__PURE__ */ dual(3, mapBoth(Functor4));
var mapError2 = /* @__PURE__ */ dual(2, mapError(Functor4));
var mapLeft2 = mapError2;
var ap7 = /* @__PURE__ */ ap5(ApplyPar);
var flatMap6 = /* @__PURE__ */ dual(2, flatMap4(Monad2));
var URI5 = "TaskEither";
var Functor5 = {
  URI: URI5,
  map: _map5
};
var as5 = dual(2, as(Functor5));
var asUnit5 = asUnit(Functor5);
var Chain5 = {
  URI: URI5,
  map: _map5,
  ap: _apPar2,
  chain: flatMap6
};
var FromEither4 = {
  URI: URI5,
  fromEither: fromEither3
};
var FromIO2 = {
  URI: URI5,
  fromIO: fromIO2
};
var FromTask = {
  URI: URI5,
  fromIO: fromIO2,
  fromTask
};
var tap5 = /* @__PURE__ */ dual(2, tap(Chain5));
var tapEither3 = /* @__PURE__ */ dual(2, tapEither(FromEither4, Chain5));
var tapIO3 = /* @__PURE__ */ dual(2, tapIO(FromIO2, Chain5));
var tapTask2 = /* @__PURE__ */ dual(2, tapTask(FromTask, Chain5));
var _FromEither2 = {
  fromEither: FromEither4.fromEither
};
var _FromIO2 = {
  fromIO: FromIO2.fromIO
};
var chainW2 = flatMap6;

// node_modules/valibot/dist/index.js
var ValiError = class extends Error {
  /**
   * Creates a Valibot error with useful information.
   *
   * @param issues The error issues.
   */
  constructor(issues) {
    super(issues[0].message);
    __publicField(this, "issues");
    this.name = "ValiError";
    this.issues = issues;
  }
};
var BrandSymbol = Symbol("brand");
function coerce(schema, action) {
  return {
    ...schema,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      return schema._parse(action(input), info);
    }
  };
}
function getIssues(issues) {
  return { issues };
}
function getOutput(output) {
  return { output };
}
function getIssue(info, issue) {
  return {
    reason: info == null ? void 0 : info.reason,
    validation: issue.validation,
    origin: (info == null ? void 0 : info.origin) || "value",
    message: issue.message,
    input: issue.input,
    path: issue.path,
    abortEarly: info == null ? void 0 : info.abortEarly,
    abortPipeEarly: info == null ? void 0 : info.abortPipeEarly,
    skipPipe: info == null ? void 0 : info.skipPipe
  };
}
function getPipeInfo(info, reason) {
  return {
    reason,
    origin: info == null ? void 0 : info.origin,
    abortEarly: info == null ? void 0 : info.abortEarly,
    abortPipeEarly: info == null ? void 0 : info.abortPipeEarly,
    skipPipe: info == null ? void 0 : info.skipPipe
  };
}
function executePipe(input, pipe3, parseInfo, reason) {
  if (!pipe3 || !pipe3.length || (parseInfo == null ? void 0 : parseInfo.skipPipe)) {
    return getOutput(input);
  }
  let pipeInfo;
  let issues;
  let output = input;
  for (const action of pipe3) {
    const result2 = action(output);
    if (result2.issues) {
      pipeInfo = pipeInfo || getPipeInfo(parseInfo, reason);
      for (const issueInfo of result2.issues) {
        const issue = getIssue(pipeInfo, issueInfo);
        issues ? issues.push(issue) : issues = [issue];
      }
      if (pipeInfo.abortEarly || pipeInfo.abortPipeEarly) {
        break;
      }
    } else {
      output = result2.output;
    }
  }
  return issues ? getIssues(issues) : getOutput(output);
}
function getDefaultArgs(arg1, arg2) {
  return Array.isArray(arg1) ? [void 0, arg1] : [arg1, arg2];
}
function getErrorMessage(error2) {
  return typeof error2 === "function" ? error2() : error2;
}
function getPipeIssues(validation, error2, input) {
  return getIssues([
    {
      validation,
      message: getErrorMessage(error2),
      input
    }
  ]);
}
function getSchemaIssues(info, reason, validation, error2, input, issues) {
  return {
    issues: [
      {
        reason,
        validation,
        origin: (info == null ? void 0 : info.origin) || "value",
        message: getErrorMessage(error2),
        input,
        issues,
        abortEarly: info == null ? void 0 : info.abortEarly,
        abortPipeEarly: info == null ? void 0 : info.abortPipeEarly,
        skipPipe: info == null ? void 0 : info.skipPipe
      }
    ]
  };
}
function is(schema, input) {
  return !schema._parse(input, { abortEarly: true }).issues;
}
function array2(item2, arg2, arg3) {
  const [error2, pipe3] = getDefaultArgs(arg2, arg3);
  return {
    /**
     * The schema type.
     */
    schema: "array",
    /**
     * The array item schema.
     */
    array: { item: item2 },
    /**
     * Whether it's async.
     */
    async: false,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      if (!Array.isArray(input)) {
        return getSchemaIssues(
          info,
          "type",
          "array",
          error2 || "Invalid type",
          input
        );
      }
      let issues;
      const output = [];
      for (let key = 0; key < input.length; key++) {
        const value2 = input[key];
        const result2 = item2._parse(value2, info);
        if (result2.issues) {
          const pathItem = {
            schema: "array",
            input,
            key,
            value: value2
          };
          for (const issue of result2.issues) {
            if (issue.path) {
              issue.path.unshift(pathItem);
            } else {
              issue.path = [pathItem];
            }
            issues == null ? void 0 : issues.push(issue);
          }
          if (!issues) {
            issues = result2.issues;
          }
          if (info == null ? void 0 : info.abortEarly) {
            break;
          }
        } else {
          output.push(result2.output);
        }
      }
      return issues ? getIssues(issues) : executePipe(output, pipe3, info, "array");
    }
  };
}
function boolean(arg1, arg2) {
  const [error2, pipe3] = getDefaultArgs(arg1, arg2);
  return {
    /**
     * The schema type.
     */
    schema: "boolean",
    /**
     * Whether it's async.
     */
    async: false,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      if (typeof input !== "boolean") {
        return getSchemaIssues(
          info,
          "type",
          "boolean",
          error2 || "Invalid type",
          input
        );
      }
      return executePipe(input, pipe3, info, "boolean");
    }
  };
}
function enumType(enumValue, error2) {
  return {
    /**
     * The schema type.
     */
    schema: "enum",
    /**
     * The enum value.
     */
    enum: enumValue,
    /**
     * Whether it's async.
     */
    async: false,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      if (!enumValue.includes(input)) {
        return getSchemaIssues(
          info,
          "type",
          "enum",
          error2 || "Invalid type",
          input
        );
      }
      return getOutput(input);
    }
  };
}
function literal(literal2, error2) {
  return {
    /**
     * The schema type.
     */
    schema: "literal",
    /**
     * The literal value.
     */
    literal: literal2,
    /**
     * Whether it's async.
     */
    async: false,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      if (input !== literal2) {
        return getSchemaIssues(
          info,
          "type",
          "literal",
          error2 || "Invalid type",
          input
        );
      }
      return getOutput(input);
    }
  };
}
function number(arg1, arg2) {
  const [error2, pipe3] = getDefaultArgs(arg1, arg2);
  return {
    /**
     * The schema type.
     */
    schema: "number",
    /**
     * Whether it's async.
     */
    async: false,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      if (typeof input !== "number" || Number.isNaN(input)) {
        return getSchemaIssues(
          info,
          "type",
          "number",
          error2 || "Invalid type",
          input
        );
      }
      return executePipe(input, pipe3, info, "number");
    }
  };
}
function object(object2, arg2, arg3) {
  const [error2, pipe3] = getDefaultArgs(arg2, arg3);
  let cachedEntries;
  return {
    /**
     * The schema type.
     */
    schema: "object",
    /**
     * The object schema.
     */
    object: object2,
    /**
     * Whether it's async.
     */
    async: false,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      if (!input || typeof input !== "object") {
        return getSchemaIssues(
          info,
          "type",
          "object",
          error2 || "Invalid type",
          input
        );
      }
      cachedEntries = cachedEntries || Object.entries(object2);
      let issues;
      const output = {};
      for (const [key, schema] of cachedEntries) {
        const value2 = input[key];
        const result2 = schema._parse(value2, info);
        if (result2.issues) {
          const pathItem = {
            schema: "object",
            input,
            key,
            value: value2
          };
          for (const issue of result2.issues) {
            if (issue.path) {
              issue.path.unshift(pathItem);
            } else {
              issue.path = [pathItem];
            }
            issues == null ? void 0 : issues.push(issue);
          }
          if (!issues) {
            issues = result2.issues;
          }
          if (info == null ? void 0 : info.abortEarly) {
            break;
          }
        } else if (result2.output !== void 0 || key in input) {
          output[key] = result2.output;
        }
      }
      return issues ? getIssues(issues) : executePipe(
        output,
        pipe3,
        info,
        "object"
      );
    }
  };
}
function optional(wrapped, default_) {
  return {
    /**
     * The schema type.
     */
    schema: "optional",
    /**
     * The wrapped schema.
     */
    wrapped,
    /**
     * The default value.
     */
    get default() {
      return typeof default_ === "function" ? default_() : default_;
    },
    /**
     * Whether it's async.
     */
    async: false,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      const value2 = input === void 0 ? this.default : input;
      if (value2 === void 0) {
        return getOutput(value2);
      }
      return wrapped._parse(value2, info);
    }
  };
}
function string(arg1, arg2) {
  const [error2, pipe3] = getDefaultArgs(arg1, arg2);
  return {
    /**
     * The schema type.
     */
    schema: "string",
    /**
     * Whether it's async.
     */
    async: false,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      if (typeof input !== "string") {
        return getSchemaIssues(
          info,
          "type",
          "string",
          error2 || "Invalid type",
          input
        );
      }
      return executePipe(input, pipe3, info, "string");
    }
  };
}
function union4(union22, error2) {
  return {
    /**
     * The schema type.
     */
    schema: "union",
    /**
     * The union schema.
     */
    union: union22,
    /**
     * Whether it's async.
     */
    async: false,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      let issues;
      let output;
      for (const schema of union22) {
        const result2 = schema._parse(input, info);
        if (result2.issues) {
          if (issues) {
            for (const issue of result2.issues) {
              issues.push(issue);
            }
          } else {
            issues = result2.issues;
          }
        } else {
          output = [result2.output];
          break;
        }
      }
      return output ? getOutput(output[0]) : getSchemaIssues(
        info,
        "type",
        "union",
        error2 || "Invalid type",
        input,
        issues
      );
    }
  };
}
function unknown(pipe3 = []) {
  return {
    /**
     * The schema type.
     */
    schema: "unknown",
    /**
     * Whether it's async.
     */
    async: false,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      return executePipe(input, pipe3, info, "unknown");
    }
  };
}
function merge(schemas, arg2, arg3) {
  const [error2, pipe3] = getDefaultArgs(arg2, arg3);
  return object(
    schemas.reduce(
      (object2, schemas2) => ({ ...object2, ...schemas2.object }),
      {}
    ),
    error2,
    pipe3
  );
}
function parse(schema, input, info) {
  const result2 = schema._parse(input, info);
  if (result2.issues) {
    throw new ValiError(result2.issues);
  }
  return result2.output;
}
function passthrough(schema) {
  return {
    ...schema,
    /**
     * Parses unknown input based on its schema.
     *
     * @param input The input to be parsed.
     * @param info The parse info.
     *
     * @returns The parsed output.
     */
    _parse(input, info) {
      const result2 = schema._parse(input, info);
      return !result2.issues ? getOutput({ ...input, ...result2.output }) : result2;
    }
  };
}
function safeParse(schema, input, info) {
  const result2 = schema._parse(input, info);
  return result2.issues ? {
    success: false,
    error: new ValiError(result2.issues),
    issues: result2.issues
  } : {
    success: true,
    data: result2.output,
    output: result2.output
  };
}
function toTrimmed() {
  return (input) => getOutput(input.trim());
}
function minLength(requirement, error2) {
  return (input) => input.length < requirement ? getPipeIssues("min_length", error2 || "Invalid length", input) : getOutput(input);
}

// src/std/Array.ts
var Array_exports = {};
__export(Array_exports, {
  Alt: () => Alt,
  Alternative: () => Alternative,
  Applicative: () => Applicative,
  Apply: () => Apply,
  Chain: () => Chain,
  ChainRecBreadthFirst: () => ChainRecBreadthFirst,
  ChainRecDepthFirst: () => ChainRecDepthFirst,
  Compactable: () => Compactable,
  Do: () => Do,
  Extend: () => Extend,
  Filterable: () => Filterable,
  FilterableWithIndex: () => FilterableWithIndex,
  Foldable: () => Foldable,
  FoldableWithIndex: () => FoldableWithIndex,
  FromEither: () => FromEither,
  Functor: () => Functor,
  FunctorWithIndex: () => FunctorWithIndex,
  Monad: () => Monad,
  Pointed: () => Pointed,
  Traversable: () => Traversable,
  TraversableWithIndex: () => TraversableWithIndex,
  URI: () => URI,
  Unfoldable: () => Unfoldable,
  Witherable: () => Witherable,
  Zero: () => Zero,
  alt: () => alt,
  altW: () => altW,
  ap: () => ap2,
  apFirst: () => apFirst2,
  apS: () => apS2,
  apSecond: () => apSecond2,
  append: () => append4,
  appendW: () => appendW3,
  array: () => array,
  bind: () => bind2,
  bindTo: () => bindTo2,
  chain: () => chain,
  chainFirst: () => chainFirst2,
  chainRecBreadthFirst: () => chainRecBreadthFirst2,
  chainRecDepthFirst: () => chainRecDepthFirst2,
  chainWithIndex: () => chainWithIndex,
  chop: () => chop3,
  chunksOf: () => chunksOf3,
  compact: () => compact,
  comprehension: () => comprehension,
  concat: () => concat2,
  concatW: () => concatW,
  cons: () => cons3,
  copy: () => copy2,
  deleteAt: () => deleteAt,
  difference: () => difference,
  dropLeft: () => dropLeft,
  dropLeftWhile: () => dropLeftWhile,
  dropRight: () => dropRight,
  duplicate: () => duplicate,
  elem: () => elem2,
  empty: () => empty2,
  every: () => every2,
  exists: () => exists,
  extend: () => extend,
  filter: () => filter,
  filterE: () => filterE2,
  filterMap: () => filterMap,
  filterMapWithIndex: () => filterMapWithIndex,
  filterWithIndex: () => filterWithIndex,
  findFirst: () => findFirst2,
  findFirstMap: () => findFirstMap2,
  findIndex: () => findIndex2,
  findLast: () => findLast2,
  findLastIndex: () => findLastIndex2,
  findLastMap: () => findLastMap2,
  flap: () => flap2,
  flatMap: () => flatMap,
  flatten: () => flatten,
  foldLeft: () => foldLeft,
  foldMap: () => foldMap3,
  foldMapWithIndex: () => foldMapWithIndex3,
  foldRight: () => foldRight,
  fromEither: () => fromEither,
  fromEitherK: () => fromEitherK2,
  fromOption: () => fromOption,
  fromOptionK: () => fromOptionK,
  fromPredicate: () => fromPredicate,
  getDifferenceMagma: () => getDifferenceMagma,
  getEq: () => getEq3,
  getIntersectionSemigroup: () => getIntersectionSemigroup,
  getMonoid: () => getMonoid2,
  getOrd: () => getOrd2,
  getSemigroup: () => getSemigroup3,
  getShow: () => getShow3,
  getUnionMonoid: () => getUnionMonoid,
  getUnionSemigroup: () => getUnionSemigroup,
  guard: () => guard2,
  head: () => head5,
  init: () => init3,
  insertAt: () => insertAt,
  intercalate: () => intercalate3,
  intersection: () => intersection,
  intersperse: () => intersperse3,
  isEmpty: () => isEmpty,
  isNonEmpty: () => isNonEmpty5,
  isOutOfBound: () => isOutOfBound4,
  last: () => last5,
  lefts: () => lefts,
  let: () => let_2,
  lookup: () => lookup2,
  makeBy: () => makeBy3,
  map: () => map2,
  mapWithIndex: () => mapWithIndex,
  match: () => match2,
  matchLeft: () => matchLeft,
  matchLeftW: () => matchLeftW,
  matchRight: () => matchRight,
  matchRightW: () => matchRightW,
  matchW: () => matchW2,
  modifyAt: () => modifyAt,
  of: () => of3,
  partition: () => partition,
  partitionMap: () => partitionMap,
  partitionMapWithIndex: () => partitionMapWithIndex,
  partitionWithIndex: () => partitionWithIndex,
  prepend: () => prepend3,
  prependAll: () => prependAll3,
  prependToAll: () => prependToAll,
  prependW: () => prependW3,
  range: () => range3,
  reduce: () => reduce3,
  reduceRight: () => reduceRight3,
  reduceRightWithIndex: () => reduceRightWithIndex3,
  reduceWithIndex: () => reduceWithIndex3,
  replicate: () => replicate,
  reverse: () => reverse2,
  rights: () => rights,
  rotate: () => rotate3,
  scanLeft: () => scanLeft,
  scanRight: () => scanRight,
  separate: () => separate,
  sequence: () => sequence,
  size: () => size,
  snoc: () => snoc3,
  some: () => some2,
  sort: () => sort2,
  sortBy: () => sortBy3,
  spanLeft: () => spanLeft,
  splitAt: () => splitAt3,
  tail: () => tail4,
  takeLeft: () => takeLeft,
  takeLeftWhile: () => takeLeftWhile,
  takeRight: () => takeRight,
  traverse: () => traverse,
  traverseWithIndex: () => traverseWithIndex,
  unfold: () => unfold,
  union: () => union3,
  uniq: () => uniq3,
  unsafeDeleteAt: () => unsafeDeleteAt,
  unsafeInsertAt: () => unsafeInsertAt3,
  unsafeUpdateAt: () => unsafeUpdateAt3,
  unzip: () => unzip,
  updateAt: () => updateAt,
  updateFirst: () => updateFirst,
  wilt: () => wilt,
  wither: () => wither,
  zero: () => zero,
  zip: () => zip,
  zipWith: () => zipWith
});
var updateFirst = (predicate, update3) => (as6) => {
  return as6.reduce((acc, a) => {
    if (predicate(a)) {
      acc.push(update3(a));
      return acc;
    }
    acc.push(a);
    return acc;
  }, []);
};

// src/std/index.ts
var flow2 = flow;
var pipe2 = pipe;
var absurd2 = absurd;
var NEA = {
  concatAll: concatAll4
};
var E = {
  isLeft: isLeft2,
  isRight: isRight2,
  left: left3,
  right: right3,
  tryCatchK,
  tryCatch,
  getOrElse,
  map: map3,
  mapLeft,
  bimap,
  flatMap: flatMap2,
  fromNullable,
  match: match3,
  ap: ap3,
  flap: flap3,
  chainW,
  fold: match3
};
var O = {
  map: map4,
  getOrElse: getOrElse2,
  some: some3,
  none: none2,
  fold: fold2,
  fromNullable: fromNullable2,
  chain: chain3,
  fromPredicate: fromPredicate2,
  isNone: isNone2,
  isSome: isSome2,
  alt: alt2,
  match: match4
};
var parse2 = tryCatchK(parse, (e) => e);
function parseC(schema, options) {
  return (input, moreOptions) => parse2(schema, input, { ...options, ...moreOptions });
}
var _EFunSemigroup = class {
  concat(f, g) {
    return (i) => {
      const fRes = f(i);
      if (isRight2(fRes))
        return fRes;
      return g(i);
    };
  }
};
var EFunSemigroup = new _EFunSemigroup();
function trySchemas(schemas, options) {
  const [first2, ...rest] = schemas;
  return pipe2(
    rest,
    map2((schema) => parseC(schema, options)),
    concatAll2(EFunSemigroup)(parseC(first2, options))
  );
}
function throttle(fn, ms = 100) {
  let lastCall = 0;
  let lastResult;
  return function(...args) {
    const now2 = Date.now();
    if (now2 - lastCall > ms) {
      lastResult = fn(...args);
    }
    lastCall = now2;
    return lastResult;
  };
}
function tap6(msg) {
  return (x) => {
    console.log(msg, x);
    return x;
  };
}
function ensureError(e) {
  return e instanceof Error ? e : new Error(String(e));
}
var AsyncFunction = new Function("return async () => {}")().constructor;
function parseFunctionBody(body, ...args) {
  const fnBody = `"use strict";
${body}`;
  try {
    const fn = AsyncFunction(...args, fnBody);
    return right3(tryCatchK2(fn, ensureError));
  } catch (e) {
    return left3(ensureError(e));
  }
}

// src/main.ts
var import_obsidian25 = require("obsidian");

// src/API.ts
var import_obsidian9 = require("obsidian");

// node_modules/fp-ts/es6/string.js
var Eq2 = {
  equals: function(first2, second) {
    return first2 === second;
  }
};
var Semigroup2 = {
  concat: function(first2, second) {
    return first2 + second;
  }
};
var empty3 = "";
var Monoid = {
  concat: Semigroup2.concat,
  empty: empty3
};
var Ord2 = {
  equals: Eq2.equals,
  compare: function(first2, second) {
    return first2 < second ? -1 : first2 > second ? 1 : 0;
  }
};
var isString = function(u) {
  return typeof u === "string";
};
var trim = function(s) {
  return s.trim();
};
var split = function(separator) {
  return function(s) {
    var out = s.split(separator);
    return isNonEmpty2(out) ? out : [s];
  };
};

// node_modules/fp-ts/es6/ReadonlyRecord.js
function filterMapWithIndex2(f) {
  return function(r) {
    var out = {};
    for (var k in r) {
      if (has.call(r, k)) {
        var ob = f(k, r[k]);
        if (isSome(ob)) {
          out[k] = ob.value;
        }
      }
    }
    return out;
  };
}
function filterWithIndex2(predicateWithIndex) {
  return function(fa) {
    var out = {};
    var changed = false;
    for (var key in fa) {
      if (has.call(fa, key)) {
        var a = fa[key];
        if (predicateWithIndex(key, a)) {
          out[key] = a;
        } else {
          changed = true;
        }
      }
    }
    return changed ? out : fa;
  };
}
function fromFoldable(M, F) {
  var fromFoldableMapM = fromFoldableMap(M, F);
  return function(fka) {
    return fromFoldableMapM(fka, identity);
  };
}
function fromFoldableMap(M, F) {
  return function(ta, f) {
    return F.reduce(ta, {}, function(r, a) {
      var _a = f(a), k = _a[0], b = _a[1];
      r[k] = has.call(r, k) ? M.concat(r[k], b) : b;
      return r;
    });
  };
}
var filterMap2 = function(f) {
  return filterMapWithIndex2(function(_, a) {
    return f(a);
  });
};

// node_modules/fp-ts/es6/Record.js
var keys_ = function(O2) {
  return function(r) {
    return Object.keys(r).sort(O2.compare);
  };
};
function collect(O2) {
  if (typeof O2 === "function") {
    return collect(Ord2)(O2);
  }
  var keysO = keys_(O2);
  return function(f) {
    return function(r) {
      var out = [];
      for (var _i = 0, _a = keysO(r); _i < _a.length; _i++) {
        var key = _a[_i];
        out.push(f(key, r[key]));
      }
      return out;
    };
  };
}
var toArray = /* @__PURE__ */ collect(Ord2)(function(k, a) {
  return [
    k,
    a
  ];
});
var filterMapWithIndex3 = filterMapWithIndex2;
function filterWithIndex3(predicateWithIndex) {
  return filterWithIndex2(predicateWithIndex);
}
function fromFoldable2(M, F) {
  return fromFoldable(M, F);
}
var toEntries = toArray;
var fromEntries = function(fa) {
  return fromFoldable2(last(), Foldable)(fa);
};
var filterMap3 = filterMap2;

// src/FormModal.ts
var import_obsidian8 = require("obsidian");

// src/utils/Log.ts
var import_obsidian = require("obsidian");

// src/utils/ModalFormError.ts
var ModalFormError = class extends Error {
  constructor(msg, console_msg) {
    super(msg);
    this.console_msg = console_msg;
    this.name = this.constructor.name;
    Error.captureStackTrace(this, this.constructor);
  }
};

// src/utils/Log.ts
function log_notice(title, msg, titleClass, bodyClass) {
  const notice = new import_obsidian.Notice("", 15e3);
  const el = notice.noticeEl;
  el.empty();
  const head6 = el.createEl("h6", { text: title, cls: titleClass });
  head6.setCssStyles({ marginTop: "0px" });
  const body = el.createEl("div", { text: msg, cls: bodyClass });
  el.append(head6, body);
}
function log_error(e) {
  if (e instanceof ModalFormError && e.console_msg) {
    log_notice("Modal from error: ", e.message + "\n" + e.console_msg, "var(--text-error)");
    console.error(`Modal form Error:`, e.message, "\n", e.console_msg);
  } else {
    log_notice("Modal from error", e.message);
  }
}
var notifyError = (title) => (msg) => log_notice(`\u{1F6A8} ${title} \u{1F6A8}`, msg, "notice-error");

// src/core/ResultValue.ts
function _toBulletList(value) {
  if (Array.isArray(value)) {
    return value.map((v) => `- ${v}`).join("\n");
  }
  return Object.entries(value).map(([key, value2]) => `- ${key}: ${value2}`).join("\n");
}
function isRecord(value) {
  return typeof value === "object" && value !== null && !Array.isArray(value);
}
function deepMap(value, fn) {
  if (Array.isArray(value)) {
    return value.map((v) => deepMap(v, fn));
  }
  if (isRecord(value)) {
    return Object.fromEntries(
      Object.entries(value).map(([key, value2]) => [key, deepMap(value2, fn)])
    );
  }
  return fn(value);
}
var ResultValue = class {
  constructor(value, name, notify2 = notify2) {
    this.value = value;
    this.name = name;
    this.notify = notify2;
    /** Alias for `toDataview` */
    this.toDv = this.toDataview;
    /** Alias for `toBulletList` */
    this.toBullets = this.toBulletList;
  }
  static from(value, name, notify2 = notifyError) {
    return new ResultValue(value, name, notify2);
  }
  /**
   * Returns the value as a string.
   * If the value is an array, it will be joined with a comma.
   * If the value is an object, it will be stringified.
   * This is convenient because it is the default method called automatically
   * when the value needs to be rendered as a string, so you can just drop
   * the value directly into a template without having to call this method.
   * @returns string
   */
  toString() {
    switch (typeof this.value) {
      case "string":
        return this.value;
      case "number":
      case "boolean":
        return this.value.toString();
      case "object":
        if (Array.isArray(this.value)) {
          return this.value.join(", ");
        }
        return JSON.stringify(this.value);
      default:
        return "";
    }
  }
  /**
   * Returns the value as a bullet list.
   * If the value is empty or undefined, it will return an empty string.
   * If the value is a single value, it will return as a single item bullet list.
   * If the value is an array, it will return a bullet list with each item in the array.
   * If the value is an object, it will return a bullet list with each key/value pair in the object.
   * @returns string
   */
  toBulletList() {
    switch (typeof this.value) {
      case "boolean":
      case "number":
      case "string":
        return `- ${this.value}`;
      case "object": {
        const value = this.value;
        if (value === null)
          return "";
        if (Array.isArray(value)) {
          return _toBulletList(value);
        }
        if (isRecord(value)) {
          return _toBulletList(value);
        }
        return `- ${JSON.stringify(value)}`;
      }
      default:
        return "";
    }
  }
  /**
   * Converts the value to a dataview property using the field name as the key.
   * If the value is empty or undefined, it will return an empty string and not render anything.
   */
  toDataview() {
    const value = this.value;
    if (value === void 0)
      return "";
    if (Array.isArray(value)) {
      return `[${this.name}:: ${JSON.stringify(value).slice(1, -1)}]`;
    }
    return `[${this.name}:: ${this.toString()}]`;
  }
  /**
   * Transforms the containerd value using the provided function.
   * If the value is undefined or null the function will not be called
   * and the result will be the same as the original.
   * This is useful if you want to apply somme modifications to the value
   * before rendering it, for example if none of the existing format methods suit your needs.
   * @param {function} fn the function to transform the values
   * @returns a new FormValue with the transformed value
   **/
  map(fn) {
    const safeFn = E.tryCatchK(fn, ensureError);
    const unchanged = () => this;
    return pipe2(
      this.value,
      O.fromNullable,
      O.map(safeFn),
      O.fold(
        unchanged,
        (v) => pipe2(
          v,
          E.fold(
            (e) => {
              this.notify("Error in map of " + this.name)(e.message);
              return unchanged();
            },
            (v2) => ResultValue.from(v2, this.name, this.notify)
          )
        )
      )
    );
  }
  /**
   * Convenient getter to get the value as bullets, so you don't need to call `toBulletList` manually.
   * example:
   * ```ts
   *  result.getValue("myField").bullets;
   * ```
   */
  get bullets() {
    return this.toBulletList();
  }
  /**
   * getter that returns all the string values uppercased.
   * If the value is an array, it will return an array with all the strings uppercased.
   */
  get upper() {
    return this.map(
      (v) => deepMap(v, (it) => typeof it === "string" ? it.toLocaleUpperCase() : it)
    );
  }
  /**
   * getter that returns all the string values lowercased.
   * If the value is an array, it will return an array with all the strings lowercased.
   * If the value is an object, it will return an object with all the string values lowercased.
   * @returns FormValue
   */
  get lower() {
    return this.map(
      (v) => deepMap(v, (it) => typeof it === "string" ? it.toLocaleLowerCase() : it)
    );
  }
  /**
   * getter that returns all the string values trimmed.
   * */
  get trimmed() {
    return this.map((v) => deepMap(v, (it) => typeof it === "string" ? it.trim() : it));
  }
};

// src/core/objectSelect.ts
var KeysSchema = array2(coerce(string(), String));
var PickOmitSchema = object({
  pick: optional(KeysSchema),
  omit: optional(KeysSchema)
});
function picKeys(obj) {
  return (keys) => pipe2(
    obj,
    filterWithIndex3((k) => keys.includes(k))
  );
}
function omitKeys(obj) {
  return (keys) => pipe2(
    obj,
    filterWithIndex3((k) => !keys.includes(k))
  );
}
function objectSelect(obj, opts) {
  return pipe2(
    parse2(PickOmitSchema, opts, { abortEarly: true }),
    E.map(
      (opts2) => {
        const picked = pipe2(
          fromNullable2(opts2.pick),
          flatMap3(fromArray),
          map4(picKeys(obj)),
          getOrElse2(() => obj)
        );
        return pipe2(
          fromNullable2(opts2.omit),
          flatMap3(fromArray),
          map4(omitKeys(picked)),
          getOrElse2(() => picked)
        );
      }
    ),
    E.getOrElse(() => obj)
  );
}

// src/core/FormResult.ts
var import_obsidian2 = require("obsidian");
function isPrimitive(value) {
  return typeof value === "string" || typeof value === "boolean" || typeof value === "number";
}
function isPrimitiveArray(value) {
  return Array.isArray(value) && value.every(isPrimitive);
}
var FormResult = class {
  constructor(data, status) {
    this.data = data;
    this.status = status;
    // alias
    this.getV = this.getValue;
    /* == Aliases ==*/
    /** just an alias for `asFrontmatterString` */
    this.asFrontmatter = this.asFrontmatterString;
    /** just an alias for `asFrontmatterString` */
    this.asYaml = this.asFrontmatterString;
    /** just an alias for `asDataviewProperties` */
    this.asDataview = this.asDataviewProperties;
    /** just an alias for `asDataviewProperties` */
    this.asDv = this.asDataviewProperties;
  }
  static make(data, status) {
    return new Proxy(new FormResult(data, status), {
      get(target, key, receiver) {
        if (key in target || typeof key !== "string") {
          return Reflect.get(target, key, receiver);
        }
        return target.getValue(key);
      }
    });
  }
  /**
   * Transform  the current data into a frontmatter string, which is expected
   * to be enclosed in `---` when used in a markdown file.
   * This method does not add the enclosing `---` to the string,
   * so you can put it anywhere inside the frontmatter.
   * @param {Object} [options] an options object describing what options to pick or omit
   * @param {string[]} [options.pick] an array of key names to pick from the data
   * @param {string[]} [options.omit] an array of key names to omit from the data
   * @returns the data formatted as a frontmatter string
   */
  asFrontmatterString(options) {
    const data = objectSelect(this.data, options);
    return (0, import_obsidian2.stringifyYaml)(data);
  }
  /**
   * Return the current data as a block of dataview properties
   * @param {Object} [options] an options object describing what options to pick or omit
   * @param {string[]} [options.pick] an array of key names to pick from the data
   * @param {string[]} [options.omit] an array of key names to omit from the data
   * @returns string
   */
  asDataviewProperties(options) {
    const data = objectSelect(this.data, options);
    return Object.entries(data).map(([key, value]) => `${key}:: ${Array.isArray(value) ? value.map((v) => JSON.stringify(v)) : value}`).join("\n");
  }
  /**
  Returns a copy of the data contained on this result.
  */
  getData() {
    return { ...this.data };
  }
  /**
   * Returns the data formatted as a string matching the provided
   * template.
   */
  asString(template) {
    let result2 = template;
    for (const [key, value] of Object.entries(this.data)) {
      result2 = result2.replace(new RegExp(`{{${key}}}`, "g"), value + "");
    }
    return result2;
  }
  /**
   * Gets a single value from the data.
   * It takes an optiional mapping function thatt can be used to transform the value.
   * The function will only be called if the value exists.
   * @param {string} key the key to get the value from
   * @param {function} [mapFn] a function to transform the value
   * @returns the value transformed by the function if it was provided, the value or empty string if it doesn't exist
   */
  get(key, mapFn) {
    const value = this.data[key];
    if (value === void 0) {
      return "";
    }
    if (mapFn) {
      return mapFn(value);
    }
    if (typeof value === "object") {
      return JSON.stringify(value);
    }
    return value;
  }
  getValue(key) {
    return ResultValue.from(this.data[key], key);
  }
};

// src/core/formDataFromFormDefaults.ts
function formDataFromFormDefaults(fields, values) {
  const result2 = {};
  const invalidKeys = [];
  for (const [key, value] of Object.entries(values)) {
    if (Array.isArray(value) && isPrimitiveArray(value)) {
      result2[key] = value;
    } else if (isPrimitive(value)) {
      result2[key] = value;
    } else {
      invalidKeys.push(key);
    }
  }
  if (invalidKeys.length > 0) {
    log_error(new ModalFormError(`Invalid keys in form options: ${invalidKeys.join(", ")}`));
  }
  return pipe2(
    fields,
    Array_exports.map((field) => {
      return pipe2(
        result2[field.name],
        fromNullable2,
        match4(() => field.input.type === "toggle" ? some3(false) : none2, some3),
        map4((value) => [field.name, value])
      );
    }),
    Array_exports.compact,
    fromEntries
  );
}

// node_modules/svelte/src/runtime/internal/utils.js
function noop() {
}
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return (
    /** @type {T & S} */
    tar
  );
}
function is_promise(value) {
  return !!value && (typeof value === "object" || typeof value === "function") && typeof /** @type {any} */
  value.then === "function";
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    for (const callback of callbacks) {
      callback(void 0);
    }
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
  let value;
  subscribe(store, (_) => value = _)();
  return value;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function set_store_value(store, ret, value) {
  store.set(value);
  return ret;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

// node_modules/svelte/src/runtime/internal/globals.js
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
  // @ts-ignore Node typings have this
  global
);

// node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
var ResizeObserverSingleton = class {
  /** @param {ResizeObserverOptions} options */
  constructor(options) {
    /**
     * @private
     * @readonly
     * @type {WeakMap<Element, import('./private.js').Listener>}
     */
    __publicField(this, "_listeners", "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0);
    /**
     * @private
     * @type {ResizeObserver}
     */
    __publicField(this, "_observer");
    /** @type {ResizeObserverOptions} */
    __publicField(this, "options");
    this.options = options;
  }
  /**
   * @param {Element} element
   * @param {import('./private.js').Listener} listener
   * @returns {() => void}
   */
  observe(element2, listener) {
    this._listeners.set(element2, listener);
    this._getObserver().observe(element2, this.options);
    return () => {
      this._listeners.delete(element2);
      this._observer.unobserve(element2);
    };
  }
  /**
   * @private
   */
  _getObserver() {
    var _a;
    return (_a = this._observer) != null ? _a : this._observer = new ResizeObserver((entries) => {
      var _a2;
      for (const entry of entries) {
        ResizeObserverSingleton.entries.set(entry.target, entry);
        (_a2 = this._listeners.get(entry.target)) == null ? void 0 : _a2(entry);
      }
    });
  }
};
ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

// node_modules/svelte/src/runtime/internal/dom.js
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append5(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && /** @type {ShadowRoot} */
  root.host) {
    return (
      /** @type {ShadowRoot} */
      root
    );
  }
  return node.ownerDocument;
}
function append_stylesheet(node, style) {
  append5(
    /** @type {Document} */
    node.head || node,
    style
  );
  return style.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty4() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
  return function(event) {
    event.preventDefault();
    return fn.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function to_number(value) {
  return value === "" ? null : +value;
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text3, data) {
  data = "" + data;
  if (text3.data === data)
    return;
  text3.data = /** @type {string} */
  data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function select_option(select, value, mounting) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
  if (!mounting || value !== void 0) {
    select.selectedIndex = -1;
  }
}
function select_value(select) {
  const selected_option = select.querySelector(":checked");
  return selected_option && selected_option.__value;
}
function toggle_class(element2, name, toggle) {
  element2.classList.toggle(name, !!toggle);
}
function get_custom_elements_slots(element2) {
  const result2 = {};
  element2.childNodes.forEach(
    /** @param {Element} node */
    (node) => {
      result2[node.slot || "default"] = true;
    }
  );
  return result2;
}

// node_modules/svelte/src/runtime/internal/lifecycle.js
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}

// node_modules/svelte/src/runtime/internal/scheduler.js
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = /* @__PURE__ */ Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}

// node_modules/svelte/src/runtime/internal/transitions.js
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}

// node_modules/svelte/src/runtime/internal/await_block.js
function handle_promise(promise, info) {
  const token = info.token = {};
  function update3(type, index, key, value) {
    if (info.token !== token)
      return;
    info.resolved = value;
    let child_ctx = info.ctx;
    if (key !== void 0) {
      child_ctx = child_ctx.slice();
      child_ctx[key] = value;
    }
    const block = type && (info.current = type)(child_ctx);
    let needs_flush = false;
    if (info.block) {
      if (info.blocks) {
        info.blocks.forEach((block2, i) => {
          if (i !== index && block2) {
            group_outros();
            transition_out(block2, 1, 1, () => {
              if (info.blocks[i] === block2) {
                info.blocks[i] = null;
              }
            });
            check_outros();
          }
        });
      } else {
        info.block.d(1);
      }
      block.c();
      transition_in(block, 1);
      block.m(info.mount(), info.anchor);
      needs_flush = true;
    }
    info.block = block;
    if (info.blocks)
      info.blocks[index] = block;
    if (needs_flush) {
      flush();
    }
  }
  if (is_promise(promise)) {
    const current_component2 = get_current_component();
    promise.then(
      (value) => {
        set_current_component(current_component2);
        update3(info.then, 1, info.value, value);
        set_current_component(null);
      },
      (error2) => {
        set_current_component(current_component2);
        update3(info.catch, 2, info.error, error2);
        set_current_component(null);
        if (!info.hasCatch) {
          throw error2;
        }
      }
    );
    if (info.current !== info.pending) {
      update3(info.pending, 0);
      return true;
    }
  } else {
    if (info.current !== info.then) {
      update3(info.then, 1, info.value, promise);
      return true;
    }
    info.resolved = /** @type {T} */
    promise;
  }
}
function update_await_block_branch(info, ctx, dirty) {
  const child_ctx = ctx.slice();
  const { resolved } = info;
  if (info.current === info.then) {
    child_ctx[info.value] = resolved;
  }
  if (info.current === info.catch) {
    child_ctx[info.error] = resolved;
  }
  info.block.p(child_ctx, dirty);
}

// node_modules/svelte/src/runtime/internal/each.js
function ensure_array_like(array_like_or_iterator) {
  return (array_like_or_iterator == null ? void 0 : array_like_or_iterator.length) !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}
function destroy_block(block, lookup4) {
  block.d(1);
  lookup4.delete(block.key);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup4, node, destroy, create_each_block9, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  const updates = [];
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup4.get(key);
    if (!block) {
      block = create_each_block9(key, child_ctx);
      block.c();
    } else if (dynamic) {
      updates.push(() => block.p(child_ctx, dirty));
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup4.set(block.key, block);
    next = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup4);
      o--;
    } else if (!lookup4.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup4);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  run_all(updates);
  return new_blocks;
}

// node_modules/svelte/src/shared/boolean_attributes.js
var _boolean_attributes = (
  /** @type {const} */
  [
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "hidden",
    "inert",
    "ismap",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected"
  ]
);
var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

// node_modules/svelte/src/runtime/internal/Component.js
function bind3(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
    if (component.$$.on_destroy) {
      component.$$.on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init4(component, options, instance18, create_fragment18, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance18 ? instance18(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment18 ? create_fragment18($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor($$componentCtor, $$slots, use_shadow_dom) {
      super();
      /** The Svelte component constructor */
      __publicField(this, "$$ctor");
      /** Slots */
      __publicField(this, "$$s");
      /** The Svelte component instance */
      __publicField(this, "$$c");
      /** Whether or not the custom element is connected */
      __publicField(this, "$$cn", false);
      /** Component props data */
      __publicField(this, "$$d", {});
      /** `true` if currently in the process of reflecting component props back to attributes */
      __publicField(this, "$$r", false);
      /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
      __publicField(this, "$$p_d", {});
      /** @type {Record<string, Function[]>} Event listeners */
      __publicField(this, "$$l", {});
      /** @type {Map<Function, Function>} Event listener unsubscribe functions */
      __publicField(this, "$$l_u", /* @__PURE__ */ new Map());
      this.$$ctor = $$componentCtor;
      this.$$s = $$slots;
      if (use_shadow_dom) {
        this.attachShadow({ mode: "open" });
      }
    }
    addEventListener(type, listener, options) {
      this.$$l[type] = this.$$l[type] || [];
      this.$$l[type].push(listener);
      if (this.$$c) {
        const unsub = this.$$c.$on(type, listener);
        this.$$l_u.set(listener, unsub);
      }
      super.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
      super.removeEventListener(type, listener, options);
      if (this.$$c) {
        const unsub = this.$$l_u.get(listener);
        if (unsub) {
          unsub();
          this.$$l_u.delete(listener);
        }
      }
    }
    async connectedCallback() {
      this.$$cn = true;
      if (!this.$$c) {
        let create_slot2 = function(name) {
          return () => {
            let node;
            const obj = {
              c: function create() {
                node = element("slot");
                if (name !== "default") {
                  attr(node, "name", name);
                }
              },
              /**
               * @param {HTMLElement} target
               * @param {HTMLElement} [anchor]
               */
              m: function mount(target, anchor) {
                insert(target, node, anchor);
              },
              d: function destroy(detaching) {
                if (detaching) {
                  detach(node);
                }
              }
            };
            return obj;
          };
        };
        await Promise.resolve();
        if (!this.$$cn) {
          return;
        }
        const $$slots = {};
        const existing_slots = get_custom_elements_slots(this);
        for (const name of this.$$s) {
          if (name in existing_slots) {
            $$slots[name] = [create_slot2(name)];
          }
        }
        for (const attribute of this.attributes) {
          const name = this.$$g_p(attribute.name);
          if (!(name in this.$$d)) {
            this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
          }
        }
        this.$$c = new this.$$ctor({
          target: this.shadowRoot || this,
          props: {
            ...this.$$d,
            $$slots,
            $$scope: {
              ctx: []
            }
          }
        });
        const reflect_attributes = () => {
          this.$$r = true;
          for (const key in this.$$p_d) {
            this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
            if (this.$$p_d[key].reflect) {
              const attribute_value = get_custom_element_value(
                key,
                this.$$d[key],
                this.$$p_d,
                "toAttribute"
              );
              if (attribute_value == null) {
                this.removeAttribute(key);
              } else {
                this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
              }
            }
          }
          this.$$r = false;
        };
        this.$$c.$$.after_update.push(reflect_attributes);
        reflect_attributes();
        for (const type in this.$$l) {
          for (const listener of this.$$l[type]) {
            const unsub = this.$$c.$on(type, listener);
            this.$$l_u.set(listener, unsub);
          }
        }
        this.$$l = {};
      }
    }
    // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
    // and setting attributes through setAttribute etc, this is helpful
    attributeChangedCallback(attr2, _oldValue, newValue) {
      var _a;
      if (this.$$r)
        return;
      attr2 = this.$$g_p(attr2);
      this.$$d[attr2] = get_custom_element_value(attr2, newValue, this.$$p_d, "toProp");
      (_a = this.$$c) == null ? void 0 : _a.$set({ [attr2]: this.$$d[attr2] });
    }
    disconnectedCallback() {
      this.$$cn = false;
      Promise.resolve().then(() => {
        if (!this.$$cn) {
          this.$$c.$destroy();
          this.$$c = void 0;
        }
      });
    }
    $$g_p(attribute_name) {
      return Object.keys(this.$$p_d).find(
        (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
      ) || attribute_name;
    }
  };
}
function get_custom_element_value(prop, value, props_definition, transform) {
  var _a;
  const type = (_a = props_definition[prop]) == null ? void 0 : _a.type;
  value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
  if (!transform || !props_definition[prop]) {
    return value;
  } else if (transform === "toAttribute") {
    switch (type) {
      case "Object":
      case "Array":
        return value == null ? null : JSON.stringify(value);
      case "Boolean":
        return value ? "" : null;
      case "Number":
        return value == null ? null : value;
      default:
        return value;
    }
  } else {
    switch (type) {
      case "Object":
      case "Array":
        return value && JSON.parse(value);
      case "Boolean":
        return value;
      case "Number":
        return value != null ? +value : value;
      default:
        return value;
    }
  }
}
var SvelteComponent = class {
  constructor() {
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$");
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$set");
  }
  /** @returns {void} */
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  /**
   * @template {Extract<keyof Events, string>} K
   * @param {K} type
   * @param {((e: Events[K]) => void) | null | undefined} callback
   * @returns {() => void}
   */
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  /**
   * @param {Partial<Props>} props
   * @returns {void}
   */
  $set(props) {
    if (this.$$set && !is_empty(props)) {
      this.$$.skip_bound = true;
      this.$$set(props);
      this.$$.skip_bound = false;
    }
  }
};

// node_modules/svelte/src/shared/version.js
var PUBLIC_VERSION = "4";

// node_modules/svelte/src/runtime/store/index.js
var subscriber_queue = [];
function readable(value, start) {
  return {
    subscribe: writable(value, start).subscribe
  };
}
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set2(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update3(fn) {
    set2(fn(value));
  }
  function subscribe3(run3, invalidate = noop) {
    const subscriber = [run3, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set2, update3) || noop;
    }
    run3(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set: set2, update: update3, subscribe: subscribe3 };
}
function derived(stores, fn, initial_value) {
  const single = !Array.isArray(stores);
  const stores_array = single ? [stores] : stores;
  if (!stores_array.every(Boolean)) {
    throw new Error("derived() expects stores as input, got a falsy value");
  }
  const auto = fn.length < 2;
  return readable(initial_value, (set2, update3) => {
    let started = false;
    const values = [];
    let pending = 0;
    let cleanup = noop;
    const sync = () => {
      if (pending) {
        return;
      }
      cleanup();
      const result2 = fn(single ? values[0] : values, set2, update3);
      if (auto) {
        set2(result2);
      } else {
        cleanup = is_function(result2) ? result2 : noop;
      }
    };
    const unsubscribers = stores_array.map(
      (store, i) => subscribe(
        store,
        (value) => {
          values[i] = value;
          pending &= ~(1 << i);
          if (started) {
            sync();
          }
        },
        () => {
          pending |= 1 << i;
        }
      )
    );
    started = true;
    sync();
    return function stop() {
      run_all(unsubscribers);
      cleanup();
      started = false;
    };
  });
}

// src/store/formStore.ts
function requiredRule(fieldName, message) {
  return { tag: "required", message: message != null ? message : `'${fieldName}' is required` };
}
function FieldFailed(field, failedRule) {
  return { ...field, rules: failedRule, errors: [failedRule.message] };
}
function nonEmptyValue(s) {
  switch (typeof s) {
    case "string":
      return s.length > 0 ? some3(s) : none2;
    case "number":
    case "boolean":
      return some3(s);
    case "object":
      return Array.isArray(s) ? s.length > 0 ? some3(s) : none2 : none2;
    default:
      return absurd(s);
  }
}
function parseField(field) {
  if (!field.rules)
    return right3(field);
  const rule = field.rules;
  switch (rule.tag) {
    case "required":
      return pipe2(
        field.value,
        chain3(nonEmptyValue),
        match4(
          () => left3(FieldFailed(field, rule)),
          (value) => right3(field)
        )
      );
    default:
      return absurd(rule.tag);
  }
}
function parseForm(fields) {
  const { right: ok, left: failed } = pipe2(
    fields,
    Object.values,
    map2(parseField),
    separate
  );
  if (failed.length > 0)
    return left3(failed);
  return right3(
    pipe2(
      ok,
      map2(
        (field) => pipe2(
          field.value,
          map4((value) => [field.name, value])
        )
      ),
      compact,
      fromEntries
    )
  );
}
function makeFormEngine({
  onSubmit,
  onCancel,
  defaultValues = {}
}) {
  const formStore = writable({ fields: {}, status: "draft" });
  function setFormField(name) {
    function initField(errors = [], rules) {
      formStore.update((form) => {
        return {
          ...form,
          fields: {
            ...form.fields,
            [name]: { value: fromNullable2(defaultValues[name]), name, errors, rules }
          }
        };
      });
    }
    function setValue(value) {
      formStore.update((form) => {
        const field = form.fields[name];
        if (!field) {
          console.error(new Error(`Field ${name} does not exist`));
          return form;
        }
        return {
          ...form,
          fields: {
            ...form.fields,
            [name]: { ...field, value: some3(value), errors: [] }
          }
        };
      });
    }
    return { initField, setValue };
  }
  function setErrors(failedFields) {
    formStore.update((form) => {
      return pipe2(
        failedFields,
        reduce3(form, (form2, field) => {
          return {
            ...form2,
            fields: { ...form2.fields, [field.name]: field }
          };
        })
      );
    });
  }
  return {
    subscribe: formStore.subscribe,
    isValid: derived(
      formStore,
      ({ fields }) => pipe2(
        fields,
        toEntries,
        some2(([_, f]) => f.errors.length > 0),
        (x) => !x
      )
    ),
    triggerSubmit() {
      formStore.update((form) => ({ ...form, status: "submitted" }));
      const formState = get_store_value(formStore);
      pipe2(
        formState.fields,
        parseForm,
        match3(setErrors, onSubmit)
      );
    },
    triggerCancel() {
      formStore.update((form) => ({ ...form, status: "cancelled" }));
      onCancel == null ? void 0 : onCancel();
    },
    addField: (field) => {
      const { initField: setField, setValue } = setFormField(field.name);
      setField([], field.isRequired ? requiredRule(field.label || field.name) : void 0);
      const fieldStore = derived(formStore, ({ fields }) => fields[field.name]);
      const fieldValueStore = {
        subscribe(cb) {
          return fieldStore.subscribe(
            (x) => pipe2(
              x,
              fromNullable2,
              chain3((x2) => x2.value),
              map4(cb)
            )
          );
        },
        set(value) {
          setValue(value);
        },
        update: (updater) => {
          formStore.update((form) => {
            const current = form.fields[field.name];
            if (!current) {
              console.error(new Error(`Field ${field.name} does not exist`));
              return form;
            }
            const newValue = pipe2(
              // fuck prettier
              current.value,
              map4(updater)
            );
            return {
              ...form,
              fields: {
                ...form.fields,
                [field.name]: {
                  ...current,
                  value: newValue,
                  errors: []
                }
              }
            };
          });
        }
      };
      return {
        value: fieldValueStore,
        errors: derived(formStore, ({ fields }) => {
          var _a, _b;
          return (_b = (_a = fields[field.name]) == null ? void 0 : _a.errors) != null ? _b : [];
        })
      };
    }
  };
}

// src/suggesters/suggestFile.ts
var import_obsidian4 = require("obsidian");

// src/utils/files.ts
var import_obsidian3 = require("obsidian");
var FolderDoesNotExistError = class extends Error {
};
FolderDoesNotExistError.tag = "FolderDoesNotExistError";
var NotAFolderError = class extends Error {
  constructor(file) {
    super(`File ${file.path} is not a folder`);
    this.file = file;
  }
};
NotAFolderError.tag = "NotAFolderError";
var _FileDoesNotExistError = class extends Error {
  static of(file) {
    return new _FileDoesNotExistError(`File "${file}" doesn't exist`);
  }
};
var FileDoesNotExistError = _FileDoesNotExistError;
FileDoesNotExistError.tag = "FileDoesNotExistError";
var NotAFileError = class extends Error {
  constructor(file) {
    super(`File ${file.path} is not a file`);
    this.file = file;
  }
};
NotAFileError.tag = "NotAFileError";
function resolve_tfolder(folder_str, app2) {
  return pipe2(
    (0, import_obsidian3.normalizePath)(folder_str),
    (path) => app2.vault.getAbstractFileByPath(path),
    E.fromNullable(new FolderDoesNotExistError(`Folder "${folder_str}" doesn't exist`)),
    E.flatMap((file) => {
      if (!(file instanceof import_obsidian3.TFolder)) {
        return E.left(new NotAFolderError(file));
      }
      return E.right(file);
    })
  );
}
function resolve_tfile(file_str, app2) {
  return pipe2(
    (0, import_obsidian3.normalizePath)(file_str),
    (path) => app2.vault.getAbstractFileByPath(path),
    E.fromNullable(FileDoesNotExistError.of(file_str)),
    E.flatMap((file) => {
      if (!(file instanceof import_obsidian3.TFile)) {
        return E.left(new NotAFileError(file));
      }
      return E.right(file);
    })
  );
}
function get_tfiles_from_folder(folder_str, app2) {
  return pipe2(
    resolve_tfolder(folder_str, app2),
    E.flatMap((folder) => {
      const files = [];
      import_obsidian3.Vault.recurseChildren(folder, (file) => {
        if (file instanceof import_obsidian3.TFile) {
          files.push(file);
        }
      });
      return E.right(files);
    }),
    E.map((files) => {
      return files.sort((a, b) => {
        return a.basename.localeCompare(b.basename);
      });
    })
  );
}
function isArrayOfStrings(value) {
  return Array.isArray(value) && value.every((v) => typeof v === "string");
}
var splitIfString = (value) => pipe2(
  value,
  O.fromPredicate(isString),
  O.map((s) => s.split(","))
);
function parseToArrOfStr(str) {
  return pipe2(
    str,
    O.fromNullable,
    O.chain(
      (value) => pipe2(
        value,
        splitIfString,
        /* prettier-ignore */
        O.alt(() => pipe2(
          value,
          O.fromPredicate(isArrayOfStrings)
        ))
      )
    )
  );
}
function extract_tags(cache) {
  const bodyTags = pipe2(
    cache.tags,
    O.fromNullable,
    O.map(Array_exports.map((tag) => tag.tag))
  );
  const frontmatterTags = pipe2(
    cache.frontmatter,
    O.fromNullable,
    O.chain((frontmatter) => parseToArrOfStr(frontmatter.tags))
  );
  return pipe2(
    [bodyTags, frontmatterTags],
    Array_exports.compact,
    Array_exports.flatten
  );
}
function enrich_tfile(file, app2) {
  var _a;
  const metadata = app2.metadataCache.getCache(file.path);
  return {
    ...file,
    frontmatter: (_a = metadata == null ? void 0 : metadata.frontmatter) != null ? _a : {},
    tags: pipe2(
      metadata,
      O.fromNullable,
      O.map(extract_tags),
      O.getOrElse(() => [])
    )
  };
}
function file_exists(file_str, app2) {
  return pipe2(
    (0, import_obsidian3.normalizePath)(file_str),
    (path) => app2.vault.getAbstractFileByPath(path),
    (value) => value !== null
  );
}

// node_modules/fuse.js/dist/fuse.esm.js
function isArray(value) {
  return !Array.isArray ? getTag(value) === "[object Array]" : Array.isArray(value);
}
var INFINITY = 1 / 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  let result2 = value + "";
  return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
}
function toString(value) {
  return value == null ? "" : baseToString(value);
}
function isString2(value) {
  return typeof value === "string";
}
function isNumber(value) {
  return typeof value === "number";
}
function isBoolean(value) {
  return value === true || value === false || isObjectLike(value) && getTag(value) == "[object Boolean]";
}
function isObject(value) {
  return typeof value === "object";
}
function isObjectLike(value) {
  return isObject(value) && value !== null;
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function isBlank(value) {
  return !value.trim().length;
}
function getTag(value) {
  return value == null ? value === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(value);
}
var INCORRECT_INDEX_TYPE = "Incorrect 'index' type";
var LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) => `Invalid value for key ${key}`;
var PATTERN_LENGTH_TOO_LARGE = (max3) => `Pattern length exceeds max of ${max3}.`;
var MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;
var INVALID_KEY_WEIGHT_VALUE = (key) => `Property 'weight' in key '${key}' must be a positive integer`;
var hasOwn = Object.prototype.hasOwnProperty;
var KeyStore = class {
  constructor(keys) {
    this._keys = [];
    this._keyMap = {};
    let totalWeight = 0;
    keys.forEach((key) => {
      let obj = createKey(key);
      totalWeight += obj.weight;
      this._keys.push(obj);
      this._keyMap[obj.id] = obj;
      totalWeight += obj.weight;
    });
    this._keys.forEach((key) => {
      key.weight /= totalWeight;
    });
  }
  get(keyId) {
    return this._keyMap[keyId];
  }
  keys() {
    return this._keys;
  }
  toJSON() {
    return JSON.stringify(this._keys);
  }
};
function createKey(key) {
  let path = null;
  let id = null;
  let src = null;
  let weight = 1;
  let getFn = null;
  if (isString2(key) || isArray(key)) {
    src = key;
    path = createKeyPath(key);
    id = createKeyId(key);
  } else {
    if (!hasOwn.call(key, "name")) {
      throw new Error(MISSING_KEY_PROPERTY("name"));
    }
    const name = key.name;
    src = name;
    if (hasOwn.call(key, "weight")) {
      weight = key.weight;
      if (weight <= 0) {
        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));
      }
    }
    path = createKeyPath(name);
    id = createKeyId(name);
    getFn = key.getFn;
  }
  return { path, id, weight, src, getFn };
}
function createKeyPath(key) {
  return isArray(key) ? key : key.split(".");
}
function createKeyId(key) {
  return isArray(key) ? key.join(".") : key;
}
function get(obj, path) {
  let list = [];
  let arr = false;
  const deepGet = (obj2, path2, index) => {
    if (!isDefined(obj2)) {
      return;
    }
    if (!path2[index]) {
      list.push(obj2);
    } else {
      let key = path2[index];
      const value = obj2[key];
      if (!isDefined(value)) {
        return;
      }
      if (index === path2.length - 1 && (isString2(value) || isNumber(value) || isBoolean(value))) {
        list.push(toString(value));
      } else if (isArray(value)) {
        arr = true;
        for (let i = 0, len = value.length; i < len; i += 1) {
          deepGet(value[i], path2, index + 1);
        }
      } else if (path2.length) {
        deepGet(value, path2, index + 1);
      }
    }
  };
  deepGet(obj, isString2(path) ? path.split(".") : path, 0);
  return arr ? list : list[0];
}
var MatchOptions = {
  // Whether the matches should be included in the result set. When `true`, each record in the result
  // set will include the indices of the matched characters.
  // These can consequently be used for highlighting purposes.
  includeMatches: false,
  // When `true`, the matching function will continue to the end of a search pattern even if
  // a perfect match has already been located in the string.
  findAllMatches: false,
  // Minimum number of characters that must be matched before a result is considered a match
  minMatchCharLength: 1
};
var BasicOptions = {
  // When `true`, the algorithm continues searching to the end of the input even if a perfect
  // match is found before the end of the same input.
  isCaseSensitive: false,
  // When true, the matching function will continue to the end of a search pattern even if
  includeScore: false,
  // List of properties that will be searched. This also supports nested properties.
  keys: [],
  // Whether to sort the result list, by score
  shouldSort: true,
  // Default sort function: sort by ascending score, ascending index
  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1
};
var FuzzyOptions = {
  // Approximately where in the text is the pattern expected to be found?
  location: 0,
  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match
  // (of both letters and location), a threshold of '1.0' would match anything.
  threshold: 0.6,
  // Determines how close the match must be to the fuzzy location (specified above).
  // An exact letter match which is 'distance' characters away from the fuzzy location
  // would score as a complete mismatch. A distance of '0' requires the match be at
  // the exact location specified, a threshold of '1000' would require a perfect match
  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.
  distance: 100
};
var AdvancedOptions = {
  // When `true`, it enables the use of unix-like search commands
  useExtendedSearch: false,
  // The get function to use when fetching an object's properties.
  // The default will search nested paths *ie foo.bar.baz*
  getFn: get,
  // When `true`, search will ignore `location` and `distance`, so it won't matter
  // where in the string the pattern appears.
  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score
  ignoreLocation: false,
  // When `true`, the calculation for the relevance score (used for sorting) will
  // ignore the field-length norm.
  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm
  ignoreFieldNorm: false,
  // The weight to determine how much field length norm effects scoring.
  fieldNormWeight: 1
};
var Config = {
  ...BasicOptions,
  ...MatchOptions,
  ...FuzzyOptions,
  ...AdvancedOptions
};
var SPACE = /[^ ]+/g;
function norm(weight = 1, mantissa = 3) {
  const cache = /* @__PURE__ */ new Map();
  const m = Math.pow(10, mantissa);
  return {
    get(value) {
      const numTokens = value.match(SPACE).length;
      if (cache.has(numTokens)) {
        return cache.get(numTokens);
      }
      const norm2 = 1 / Math.pow(numTokens, 0.5 * weight);
      const n = parseFloat(Math.round(norm2 * m) / m);
      cache.set(numTokens, n);
      return n;
    },
    clear() {
      cache.clear();
    }
  };
}
var FuseIndex = class {
  constructor({
    getFn = Config.getFn,
    fieldNormWeight = Config.fieldNormWeight
  } = {}) {
    this.norm = norm(fieldNormWeight, 3);
    this.getFn = getFn;
    this.isCreated = false;
    this.setIndexRecords();
  }
  setSources(docs = []) {
    this.docs = docs;
  }
  setIndexRecords(records = []) {
    this.records = records;
  }
  setKeys(keys = []) {
    this.keys = keys;
    this._keysMap = {};
    keys.forEach((key, idx) => {
      this._keysMap[key.id] = idx;
    });
  }
  create() {
    if (this.isCreated || !this.docs.length) {
      return;
    }
    this.isCreated = true;
    if (isString2(this.docs[0])) {
      this.docs.forEach((doc, docIndex) => {
        this._addString(doc, docIndex);
      });
    } else {
      this.docs.forEach((doc, docIndex) => {
        this._addObject(doc, docIndex);
      });
    }
    this.norm.clear();
  }
  // Adds a doc to the end of the index
  add(doc) {
    const idx = this.size();
    if (isString2(doc)) {
      this._addString(doc, idx);
    } else {
      this._addObject(doc, idx);
    }
  }
  // Removes the doc at the specified index of the index
  removeAt(idx) {
    this.records.splice(idx, 1);
    for (let i = idx, len = this.size(); i < len; i += 1) {
      this.records[i].i -= 1;
    }
  }
  getValueForItemAtKeyId(item2, keyId) {
    return item2[this._keysMap[keyId]];
  }
  size() {
    return this.records.length;
  }
  _addString(doc, docIndex) {
    if (!isDefined(doc) || isBlank(doc)) {
      return;
    }
    let record = {
      v: doc,
      i: docIndex,
      n: this.norm.get(doc)
    };
    this.records.push(record);
  }
  _addObject(doc, docIndex) {
    let record = { i: docIndex, $: {} };
    this.keys.forEach((key, keyIndex) => {
      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);
      if (!isDefined(value)) {
        return;
      }
      if (isArray(value)) {
        let subRecords = [];
        const stack = [{ nestedArrIndex: -1, value }];
        while (stack.length) {
          const { nestedArrIndex, value: value2 } = stack.pop();
          if (!isDefined(value2)) {
            continue;
          }
          if (isString2(value2) && !isBlank(value2)) {
            let subRecord = {
              v: value2,
              i: nestedArrIndex,
              n: this.norm.get(value2)
            };
            subRecords.push(subRecord);
          } else if (isArray(value2)) {
            value2.forEach((item2, k) => {
              stack.push({
                nestedArrIndex: k,
                value: item2
              });
            });
          } else
            ;
        }
        record.$[keyIndex] = subRecords;
      } else if (isString2(value) && !isBlank(value)) {
        let subRecord = {
          v: value,
          n: this.norm.get(value)
        };
        record.$[keyIndex] = subRecord;
      }
    });
    this.records.push(record);
  }
  toJSON() {
    return {
      keys: this.keys,
      records: this.records
    };
  }
};
function createIndex(keys, docs, { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}) {
  const myIndex = new FuseIndex({ getFn, fieldNormWeight });
  myIndex.setKeys(keys.map(createKey));
  myIndex.setSources(docs);
  myIndex.create();
  return myIndex;
}
function parseIndex(data, { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}) {
  const { keys, records } = data;
  const myIndex = new FuseIndex({ getFn, fieldNormWeight });
  myIndex.setKeys(keys);
  myIndex.setIndexRecords(records);
  return myIndex;
}
function computeScore$1(pattern, {
  errors = 0,
  currentLocation = 0,
  expectedLocation = 0,
  distance = Config.distance,
  ignoreLocation = Config.ignoreLocation
} = {}) {
  const accuracy = errors / pattern.length;
  if (ignoreLocation) {
    return accuracy;
  }
  const proximity = Math.abs(expectedLocation - currentLocation);
  if (!distance) {
    return proximity ? 1 : accuracy;
  }
  return accuracy + proximity / distance;
}
function convertMaskToIndices(matchmask = [], minMatchCharLength = Config.minMatchCharLength) {
  let indices = [];
  let start = -1;
  let end = -1;
  let i = 0;
  for (let len = matchmask.length; i < len; i += 1) {
    let match7 = matchmask[i];
    if (match7 && start === -1) {
      start = i;
    } else if (!match7 && start !== -1) {
      end = i - 1;
      if (end - start + 1 >= minMatchCharLength) {
        indices.push([start, end]);
      }
      start = -1;
    }
  }
  if (matchmask[i - 1] && i - start >= minMatchCharLength) {
    indices.push([start, i - 1]);
  }
  return indices;
}
var MAX_BITS = 32;
function search(text3, pattern, patternAlphabet, {
  location = Config.location,
  distance = Config.distance,
  threshold = Config.threshold,
  findAllMatches = Config.findAllMatches,
  minMatchCharLength = Config.minMatchCharLength,
  includeMatches = Config.includeMatches,
  ignoreLocation = Config.ignoreLocation
} = {}) {
  if (pattern.length > MAX_BITS) {
    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));
  }
  const patternLen = pattern.length;
  const textLen = text3.length;
  const expectedLocation = Math.max(0, Math.min(location, textLen));
  let currentThreshold = threshold;
  let bestLocation = expectedLocation;
  const computeMatches = minMatchCharLength > 1 || includeMatches;
  const matchMask = computeMatches ? Array(textLen) : [];
  let index;
  while ((index = text3.indexOf(pattern, bestLocation)) > -1) {
    let score = computeScore$1(pattern, {
      currentLocation: index,
      expectedLocation,
      distance,
      ignoreLocation
    });
    currentThreshold = Math.min(score, currentThreshold);
    bestLocation = index + patternLen;
    if (computeMatches) {
      let i = 0;
      while (i < patternLen) {
        matchMask[index + i] = 1;
        i += 1;
      }
    }
  }
  bestLocation = -1;
  let lastBitArr = [];
  let finalScore = 1;
  let binMax = patternLen + textLen;
  const mask = 1 << patternLen - 1;
  for (let i = 0; i < patternLen; i += 1) {
    let binMin = 0;
    let binMid = binMax;
    while (binMin < binMid) {
      const score2 = computeScore$1(pattern, {
        errors: i,
        currentLocation: expectedLocation + binMid,
        expectedLocation,
        distance,
        ignoreLocation
      });
      if (score2 <= currentThreshold) {
        binMin = binMid;
      } else {
        binMax = binMid;
      }
      binMid = Math.floor((binMax - binMin) / 2 + binMin);
    }
    binMax = binMid;
    let start = Math.max(1, expectedLocation - binMid + 1);
    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;
    let bitArr = Array(finish + 2);
    bitArr[finish + 1] = (1 << i) - 1;
    for (let j = finish; j >= start; j -= 1) {
      let currentLocation = j - 1;
      let charMatch = patternAlphabet[text3.charAt(currentLocation)];
      if (computeMatches) {
        matchMask[currentLocation] = +!!charMatch;
      }
      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;
      if (i) {
        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
      }
      if (bitArr[j] & mask) {
        finalScore = computeScore$1(pattern, {
          errors: i,
          currentLocation,
          expectedLocation,
          distance,
          ignoreLocation
        });
        if (finalScore <= currentThreshold) {
          currentThreshold = finalScore;
          bestLocation = currentLocation;
          if (bestLocation <= expectedLocation) {
            break;
          }
          start = Math.max(1, 2 * expectedLocation - bestLocation);
        }
      }
    }
    const score = computeScore$1(pattern, {
      errors: i + 1,
      currentLocation: expectedLocation,
      expectedLocation,
      distance,
      ignoreLocation
    });
    if (score > currentThreshold) {
      break;
    }
    lastBitArr = bitArr;
  }
  const result2 = {
    isMatch: bestLocation >= 0,
    // Count exact matches (those with a score of 0) to be "almost" exact
    score: Math.max(1e-3, finalScore)
  };
  if (computeMatches) {
    const indices = convertMaskToIndices(matchMask, minMatchCharLength);
    if (!indices.length) {
      result2.isMatch = false;
    } else if (includeMatches) {
      result2.indices = indices;
    }
  }
  return result2;
}
function createPatternAlphabet(pattern) {
  let mask = {};
  for (let i = 0, len = pattern.length; i < len; i += 1) {
    const char2 = pattern.charAt(i);
    mask[char2] = (mask[char2] || 0) | 1 << len - i - 1;
  }
  return mask;
}
var BitapSearch = class {
  constructor(pattern, {
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance,
    includeMatches = Config.includeMatches,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    isCaseSensitive = Config.isCaseSensitive,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    this.options = {
      location,
      threshold,
      distance,
      includeMatches,
      findAllMatches,
      minMatchCharLength,
      isCaseSensitive,
      ignoreLocation
    };
    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
    this.chunks = [];
    if (!this.pattern.length) {
      return;
    }
    const addChunk = (pattern2, startIndex) => {
      this.chunks.push({
        pattern: pattern2,
        alphabet: createPatternAlphabet(pattern2),
        startIndex
      });
    };
    const len = this.pattern.length;
    if (len > MAX_BITS) {
      let i = 0;
      const remainder = len % MAX_BITS;
      const end = len - remainder;
      while (i < end) {
        addChunk(this.pattern.substr(i, MAX_BITS), i);
        i += MAX_BITS;
      }
      if (remainder) {
        const startIndex = len - MAX_BITS;
        addChunk(this.pattern.substr(startIndex), startIndex);
      }
    } else {
      addChunk(this.pattern, 0);
    }
  }
  searchIn(text3) {
    const { isCaseSensitive, includeMatches } = this.options;
    if (!isCaseSensitive) {
      text3 = text3.toLowerCase();
    }
    if (this.pattern === text3) {
      let result3 = {
        isMatch: true,
        score: 0
      };
      if (includeMatches) {
        result3.indices = [[0, text3.length - 1]];
      }
      return result3;
    }
    const {
      location,
      distance,
      threshold,
      findAllMatches,
      minMatchCharLength,
      ignoreLocation
    } = this.options;
    let allIndices = [];
    let totalScore = 0;
    let hasMatches = false;
    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {
      const { isMatch, score, indices } = search(text3, pattern, alphabet, {
        location: location + startIndex,
        distance,
        threshold,
        findAllMatches,
        minMatchCharLength,
        includeMatches,
        ignoreLocation
      });
      if (isMatch) {
        hasMatches = true;
      }
      totalScore += score;
      if (isMatch && indices) {
        allIndices = [...allIndices, ...indices];
      }
    });
    let result2 = {
      isMatch: hasMatches,
      score: hasMatches ? totalScore / this.chunks.length : 1
    };
    if (hasMatches && includeMatches) {
      result2.indices = allIndices;
    }
    return result2;
  }
};
var BaseMatch = class {
  constructor(pattern) {
    this.pattern = pattern;
  }
  static isMultiMatch(pattern) {
    return getMatch(pattern, this.multiRegex);
  }
  static isSingleMatch(pattern) {
    return getMatch(pattern, this.singleRegex);
  }
  search() {
  }
};
function getMatch(pattern, exp) {
  const matches = pattern.match(exp);
  return matches ? matches[1] : null;
}
var ExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "exact";
  }
  static get multiRegex() {
    return /^="(.*)"$/;
  }
  static get singleRegex() {
    return /^=(.*)$/;
  }
  search(text3) {
    const isMatch = text3 === this.pattern;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, this.pattern.length - 1]
    };
  }
};
var InverseExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-exact";
  }
  static get multiRegex() {
    return /^!"(.*)"$/;
  }
  static get singleRegex() {
    return /^!(.*)$/;
  }
  search(text3) {
    const index = text3.indexOf(this.pattern);
    const isMatch = index === -1;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text3.length - 1]
    };
  }
};
var PrefixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "prefix-exact";
  }
  static get multiRegex() {
    return /^\^"(.*)"$/;
  }
  static get singleRegex() {
    return /^\^(.*)$/;
  }
  search(text3) {
    const isMatch = text3.startsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, this.pattern.length - 1]
    };
  }
};
var InversePrefixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-prefix-exact";
  }
  static get multiRegex() {
    return /^!\^"(.*)"$/;
  }
  static get singleRegex() {
    return /^!\^(.*)$/;
  }
  search(text3) {
    const isMatch = !text3.startsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text3.length - 1]
    };
  }
};
var SuffixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "suffix-exact";
  }
  static get multiRegex() {
    return /^"(.*)"\$$/;
  }
  static get singleRegex() {
    return /^(.*)\$$/;
  }
  search(text3) {
    const isMatch = text3.endsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [text3.length - this.pattern.length, text3.length - 1]
    };
  }
};
var InverseSuffixExactMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "inverse-suffix-exact";
  }
  static get multiRegex() {
    return /^!"(.*)"\$$/;
  }
  static get singleRegex() {
    return /^!(.*)\$$/;
  }
  search(text3) {
    const isMatch = !text3.endsWith(this.pattern);
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices: [0, text3.length - 1]
    };
  }
};
var FuzzyMatch = class extends BaseMatch {
  constructor(pattern, {
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance,
    includeMatches = Config.includeMatches,
    findAllMatches = Config.findAllMatches,
    minMatchCharLength = Config.minMatchCharLength,
    isCaseSensitive = Config.isCaseSensitive,
    ignoreLocation = Config.ignoreLocation
  } = {}) {
    super(pattern);
    this._bitapSearch = new BitapSearch(pattern, {
      location,
      threshold,
      distance,
      includeMatches,
      findAllMatches,
      minMatchCharLength,
      isCaseSensitive,
      ignoreLocation
    });
  }
  static get type() {
    return "fuzzy";
  }
  static get multiRegex() {
    return /^"(.*)"$/;
  }
  static get singleRegex() {
    return /^(.*)$/;
  }
  search(text3) {
    return this._bitapSearch.searchIn(text3);
  }
};
var IncludeMatch = class extends BaseMatch {
  constructor(pattern) {
    super(pattern);
  }
  static get type() {
    return "include";
  }
  static get multiRegex() {
    return /^'"(.*)"$/;
  }
  static get singleRegex() {
    return /^'(.*)$/;
  }
  search(text3) {
    let location = 0;
    let index;
    const indices = [];
    const patternLen = this.pattern.length;
    while ((index = text3.indexOf(this.pattern, location)) > -1) {
      location = index + patternLen;
      indices.push([index, location - 1]);
    }
    const isMatch = !!indices.length;
    return {
      isMatch,
      score: isMatch ? 0 : 1,
      indices
    };
  }
};
var searchers = [
  ExactMatch,
  IncludeMatch,
  PrefixExactMatch,
  InversePrefixExactMatch,
  InverseSuffixExactMatch,
  SuffixExactMatch,
  InverseExactMatch,
  FuzzyMatch
];
var searchersLen = searchers.length;
var SPACE_RE = / +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;
var OR_TOKEN = "|";
function parseQuery(pattern, options = {}) {
  return pattern.split(OR_TOKEN).map((item2) => {
    let query = item2.trim().split(SPACE_RE).filter((item3) => item3 && !!item3.trim());
    let results = [];
    for (let i = 0, len = query.length; i < len; i += 1) {
      const queryItem = query[i];
      let found = false;
      let idx = -1;
      while (!found && ++idx < searchersLen) {
        const searcher = searchers[idx];
        let token = searcher.isMultiMatch(queryItem);
        if (token) {
          results.push(new searcher(token, options));
          found = true;
        }
      }
      if (found) {
        continue;
      }
      idx = -1;
      while (++idx < searchersLen) {
        const searcher = searchers[idx];
        let token = searcher.isSingleMatch(queryItem);
        if (token) {
          results.push(new searcher(token, options));
          break;
        }
      }
    }
    return results;
  });
}
var MultiMatchSet = /* @__PURE__ */ new Set([FuzzyMatch.type, IncludeMatch.type]);
var ExtendedSearch = class {
  constructor(pattern, {
    isCaseSensitive = Config.isCaseSensitive,
    includeMatches = Config.includeMatches,
    minMatchCharLength = Config.minMatchCharLength,
    ignoreLocation = Config.ignoreLocation,
    findAllMatches = Config.findAllMatches,
    location = Config.location,
    threshold = Config.threshold,
    distance = Config.distance
  } = {}) {
    this.query = null;
    this.options = {
      isCaseSensitive,
      includeMatches,
      minMatchCharLength,
      findAllMatches,
      ignoreLocation,
      location,
      threshold,
      distance
    };
    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
    this.query = parseQuery(this.pattern, this.options);
  }
  static condition(_, options) {
    return options.useExtendedSearch;
  }
  searchIn(text3) {
    const query = this.query;
    if (!query) {
      return {
        isMatch: false,
        score: 1
      };
    }
    const { includeMatches, isCaseSensitive } = this.options;
    text3 = isCaseSensitive ? text3 : text3.toLowerCase();
    let numMatches = 0;
    let allIndices = [];
    let totalScore = 0;
    for (let i = 0, qLen = query.length; i < qLen; i += 1) {
      const searchers2 = query[i];
      allIndices.length = 0;
      numMatches = 0;
      for (let j = 0, pLen = searchers2.length; j < pLen; j += 1) {
        const searcher = searchers2[j];
        const { isMatch, indices, score } = searcher.search(text3);
        if (isMatch) {
          numMatches += 1;
          totalScore += score;
          if (includeMatches) {
            const type = searcher.constructor.type;
            if (MultiMatchSet.has(type)) {
              allIndices = [...allIndices, ...indices];
            } else {
              allIndices.push(indices);
            }
          }
        } else {
          totalScore = 0;
          numMatches = 0;
          allIndices.length = 0;
          break;
        }
      }
      if (numMatches) {
        let result2 = {
          isMatch: true,
          score: totalScore / numMatches
        };
        if (includeMatches) {
          result2.indices = allIndices;
        }
        return result2;
      }
    }
    return {
      isMatch: false,
      score: 1
    };
  }
};
var registeredSearchers = [];
function register(...args) {
  registeredSearchers.push(...args);
}
function createSearcher(pattern, options) {
  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {
    let searcherClass = registeredSearchers[i];
    if (searcherClass.condition(pattern, options)) {
      return new searcherClass(pattern, options);
    }
  }
  return new BitapSearch(pattern, options);
}
var LogicalOperator = {
  AND: "$and",
  OR: "$or"
};
var KeyType = {
  PATH: "$path",
  PATTERN: "$val"
};
var isExpression = (query) => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);
var isPath = (query) => !!query[KeyType.PATH];
var isLeaf = (query) => !isArray(query) && isObject(query) && !isExpression(query);
var convertToExplicit = (query) => ({
  [LogicalOperator.AND]: Object.keys(query).map((key) => ({
    [key]: query[key]
  }))
});
function parse3(query, options, { auto = true } = {}) {
  const next = (query2) => {
    let keys = Object.keys(query2);
    const isQueryPath = isPath(query2);
    if (!isQueryPath && keys.length > 1 && !isExpression(query2)) {
      return next(convertToExplicit(query2));
    }
    if (isLeaf(query2)) {
      const key = isQueryPath ? query2[KeyType.PATH] : keys[0];
      const pattern = isQueryPath ? query2[KeyType.PATTERN] : query2[key];
      if (!isString2(pattern)) {
        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));
      }
      const obj = {
        keyId: createKeyId(key),
        pattern
      };
      if (auto) {
        obj.searcher = createSearcher(pattern, options);
      }
      return obj;
    }
    let node = {
      children: [],
      operator: keys[0]
    };
    keys.forEach((key) => {
      const value = query2[key];
      if (isArray(value)) {
        value.forEach((item2) => {
          node.children.push(next(item2));
        });
      }
    });
    return node;
  };
  if (!isExpression(query)) {
    query = convertToExplicit(query);
  }
  return next(query);
}
function computeScore(results, { ignoreFieldNorm = Config.ignoreFieldNorm }) {
  results.forEach((result2) => {
    let totalScore = 1;
    result2.matches.forEach(({ key, norm: norm2, score }) => {
      const weight = key ? key.weight : null;
      totalScore *= Math.pow(
        score === 0 && weight ? Number.EPSILON : score,
        (weight || 1) * (ignoreFieldNorm ? 1 : norm2)
      );
    });
    result2.score = totalScore;
  });
}
function transformMatches(result2, data) {
  const matches = result2.matches;
  data.matches = [];
  if (!isDefined(matches)) {
    return;
  }
  matches.forEach((match7) => {
    if (!isDefined(match7.indices) || !match7.indices.length) {
      return;
    }
    const { indices, value } = match7;
    let obj = {
      indices,
      value
    };
    if (match7.key) {
      obj.key = match7.key.src;
    }
    if (match7.idx > -1) {
      obj.refIndex = match7.idx;
    }
    data.matches.push(obj);
  });
}
function transformScore(result2, data) {
  data.score = result2.score;
}
function format(results, docs, {
  includeMatches = Config.includeMatches,
  includeScore = Config.includeScore
} = {}) {
  const transformers = [];
  if (includeMatches)
    transformers.push(transformMatches);
  if (includeScore)
    transformers.push(transformScore);
  return results.map((result2) => {
    const { idx } = result2;
    const data = {
      item: docs[idx],
      refIndex: idx
    };
    if (transformers.length) {
      transformers.forEach((transformer) => {
        transformer(result2, data);
      });
    }
    return data;
  });
}
var Fuse = class {
  constructor(docs, options = {}, index) {
    this.options = { ...Config, ...options };
    if (this.options.useExtendedSearch && false) {
      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);
    }
    this._keyStore = new KeyStore(this.options.keys);
    this.setCollection(docs, index);
  }
  setCollection(docs, index) {
    this._docs = docs;
    if (index && !(index instanceof FuseIndex)) {
      throw new Error(INCORRECT_INDEX_TYPE);
    }
    this._myIndex = index || createIndex(this.options.keys, this._docs, {
      getFn: this.options.getFn,
      fieldNormWeight: this.options.fieldNormWeight
    });
  }
  add(doc) {
    if (!isDefined(doc)) {
      return;
    }
    this._docs.push(doc);
    this._myIndex.add(doc);
  }
  remove(predicate = () => false) {
    const results = [];
    for (let i = 0, len = this._docs.length; i < len; i += 1) {
      const doc = this._docs[i];
      if (predicate(doc, i)) {
        this.removeAt(i);
        i -= 1;
        len -= 1;
        results.push(doc);
      }
    }
    return results;
  }
  removeAt(idx) {
    this._docs.splice(idx, 1);
    this._myIndex.removeAt(idx);
  }
  getIndex() {
    return this._myIndex;
  }
  search(query, { limit = -1 } = {}) {
    const {
      includeMatches,
      includeScore,
      shouldSort,
      sortFn,
      ignoreFieldNorm
    } = this.options;
    let results = isString2(query) ? isString2(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);
    computeScore(results, { ignoreFieldNorm });
    if (shouldSort) {
      results.sort(sortFn);
    }
    if (isNumber(limit) && limit > -1) {
      results = results.slice(0, limit);
    }
    return format(results, this._docs, {
      includeMatches,
      includeScore
    });
  }
  _searchStringList(query) {
    const searcher = createSearcher(query, this.options);
    const { records } = this._myIndex;
    const results = [];
    records.forEach(({ v: text3, i: idx, n: norm2 }) => {
      if (!isDefined(text3)) {
        return;
      }
      const { isMatch, score, indices } = searcher.searchIn(text3);
      if (isMatch) {
        results.push({
          item: text3,
          idx,
          matches: [{ score, value: text3, norm: norm2, indices }]
        });
      }
    });
    return results;
  }
  _searchLogical(query) {
    const expression = parse3(query, this.options);
    const evaluate = (node, item2, idx) => {
      if (!node.children) {
        const { keyId, searcher } = node;
        const matches = this._findMatches({
          key: this._keyStore.get(keyId),
          value: this._myIndex.getValueForItemAtKeyId(item2, keyId),
          searcher
        });
        if (matches && matches.length) {
          return [
            {
              idx,
              item: item2,
              matches
            }
          ];
        }
        return [];
      }
      const res = [];
      for (let i = 0, len = node.children.length; i < len; i += 1) {
        const child = node.children[i];
        const result2 = evaluate(child, item2, idx);
        if (result2.length) {
          res.push(...result2);
        } else if (node.operator === LogicalOperator.AND) {
          return [];
        }
      }
      return res;
    };
    const records = this._myIndex.records;
    const resultMap = {};
    const results = [];
    records.forEach(({ $: item2, i: idx }) => {
      if (isDefined(item2)) {
        let expResults = evaluate(expression, item2, idx);
        if (expResults.length) {
          if (!resultMap[idx]) {
            resultMap[idx] = { idx, item: item2, matches: [] };
            results.push(resultMap[idx]);
          }
          expResults.forEach(({ matches }) => {
            resultMap[idx].matches.push(...matches);
          });
        }
      }
    });
    return results;
  }
  _searchObjectList(query) {
    const searcher = createSearcher(query, this.options);
    const { keys, records } = this._myIndex;
    const results = [];
    records.forEach(({ $: item2, i: idx }) => {
      if (!isDefined(item2)) {
        return;
      }
      let matches = [];
      keys.forEach((key, keyIndex) => {
        matches.push(
          ...this._findMatches({
            key,
            value: item2[keyIndex],
            searcher
          })
        );
      });
      if (matches.length) {
        results.push({
          idx,
          item: item2,
          matches
        });
      }
    });
    return results;
  }
  _findMatches({ key, value, searcher }) {
    if (!isDefined(value)) {
      return [];
    }
    let matches = [];
    if (isArray(value)) {
      value.forEach(({ v: text3, i: idx, n: norm2 }) => {
        if (!isDefined(text3)) {
          return;
        }
        const { isMatch, score, indices } = searcher.searchIn(text3);
        if (isMatch) {
          matches.push({
            score,
            key,
            value: text3,
            idx,
            norm: norm2,
            indices
          });
        }
      });
    } else {
      const { v: text3, n: norm2 } = value;
      const { isMatch, score, indices } = searcher.searchIn(text3);
      if (isMatch) {
        matches.push({ score, key, value: text3, norm: norm2, indices });
      }
    }
    return matches;
  }
};
Fuse.version = "6.6.2";
Fuse.createIndex = createIndex;
Fuse.parseIndex = parseIndex;
Fuse.config = Config;
{
  Fuse.parseQuery = parse3;
}
{
  register(ExtendedSearch);
}

// src/suggesters/suggestFile.ts
var FileSuggest = class extends import_obsidian4.AbstractInputSuggest {
  constructor(app2, inputEl, strategy, folder) {
    super(app2, inputEl);
    this.app = app2;
    this.inputEl = inputEl;
    this.strategy = strategy;
    this.folder = folder;
  }
  getSuggestions(input_str) {
    const all_files = pipe2(
      get_tfiles_from_folder(this.folder, this.app),
      E.map(Array_exports.map((file) => enrich_tfile(file, this.app)))
    );
    if (E.isLeft(all_files)) {
      return [];
    }
    const lower_input_str = input_str.toLowerCase();
    if (input_str === "")
      return all_files.right;
    const fuse = new Fuse(all_files.right, {
      includeMatches: false,
      includeScore: true,
      shouldSort: true,
      keys: [
        { name: "name", weight: 3 },
        { name: "frontmatter.aliases", weight: 2 },
        { name: "path", weight: 1 },
        { name: "tags", weight: 1 }
      ]
    });
    return fuse.search(lower_input_str).map((result2) => {
      return result2.item;
    });
  }
  /* This is an example structure of how a obsidian suggestion looks like in the dom
          <div class="suggestion">
              <div class="suggestion-item mod-complex is-selected">
                  <div class="suggestion-content">
                      <div class="suggestion-title">
                          <span class="suggestion-highlight">Fátima</span>
                      </div>
                      <div class="suggestion-note">Fátima</div>
                  </div>
                  <div class="suggestion-aux">
                      <span class="suggestion-flair" aria-label="Alias">
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-forward">
                              <polyline points="15 17 20 12 15 7"></polyline>
                              <path d="M4 18v-2a4 4 0 0 1 4-4h12"></path>
                          </svg>
                      </span>
                  </div>
              </div>
          </div>
  In the renderSuggestion the `el` is the suggestion-item div
  */
  renderSuggestion(file, el) {
    var _a;
    const text3 = this.strategy.renderSuggestion(file);
    el.addClasses(["mod-complex"]);
    const title = el.createDiv({ cls: "suggestion-title", text: text3 });
    const subtitle = el.createDiv({
      cls: "suggestion-note modal-form-suggestion",
      text: (_a = file.parent) == null ? void 0 : _a.path
    });
    const icon = el.createSpan({ cls: "suggestion-icon" });
    (0, import_obsidian4.setIcon)(icon, "folder");
    subtitle.prepend(icon);
    const body = el.createDiv({ cls: "suggestion-content" });
    body.appendChild(title);
    body.appendChild(subtitle);
    el.appendChild(body);
  }
  selectSuggestion(file) {
    this.inputEl.value = this.strategy.selectSuggestion(file);
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/suggesters/suggestFolder.ts
var import_obsidian5 = require("obsidian");
var FolderSuggest = class extends import_obsidian5.AbstractInputSuggest {
  constructor(inputEl, app2) {
    super(app2, inputEl);
    this.inputEl = inputEl;
    this.app = app2;
  }
  getSuggestions(inputStr) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const lowerCaseInputStr = inputStr.toLowerCase();
    const folders = abstractFiles.reduce((acc, folder) => {
      if (folder instanceof import_obsidian5.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        acc.push(folder);
      }
      return acc;
    }, []);
    return folders;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/suggesters/suggestFromDataview.ts
var import_obsidian6 = require("obsidian");

// src/suggesters/SafeDataviewQuery.ts
function sandboxedDvQuery(query) {
  if (!query.startsWith("return")) {
    query = "return " + query;
  }
  const parsed = parseFunctionBody(query, "dv", "pages");
  return (dv, pages) => pipe2(
    parsed,
    fromEither3,
    mapLeft2(
      (err) => new ModalFormError("Error evaluating the dataview query", err.message)
    ),
    flatMap6((fn) => fn(dv, pages)),
    flatMap6((result2) => {
      if (!Array.isArray(result2)) {
        return left5(
          new ModalFormError("The dataview query did not return an array")
        );
      }
      return right5(result2);
    })
  );
}
function executeSandboxedDvQuery(query, app2, logger = log_error) {
  var _a;
  const dv = (_a = app2.plugins.plugins.dataview) == null ? void 0 : _a.api;
  if (!dv) {
    logger(new ModalFormError("Dataview plugin is not enabled"));
    return of5([]);
  }
  const pages = dv.pages;
  return pipe2(
    query(dv, pages),
    getOrElse4((e) => {
      logger(e);
      return of5([]);
    })
  );
}

// src/suggesters/createRegexFromInput.ts
var splitString = flow2(trim, split(" "));
function createRegexFromInput(input) {
  return pipe2(
    fromNullable2(input),
    map4(splitString),
    map4((parts) => parts.join(".*")),
    map4((s) => new RegExp(s, "i")),
    getOrElse2(() => new RegExp(".*"))
  );
}

// src/suggesters/suggestFromDataview.ts
var DataviewSuggest = class extends import_obsidian6.AbstractInputSuggest {
  constructor(inputEl, dvQuery, app2) {
    super(app2, inputEl);
    this.inputEl = inputEl;
    this.app = app2;
    this.sandboxedQuery = sandboxedDvQuery(dvQuery);
  }
  getSuggestions(inputStr) {
    const result2 = executeSandboxedDvQuery(this.sandboxedQuery, this.app);
    if (!inputStr) {
      return result2();
    }
    const regex = createRegexFromInput(inputStr);
    return result2().then((res) => res.filter((r) => regex.test(r)));
  }
  renderSuggestion(option, el) {
    el.setText(option);
  }
  selectSuggestion(option) {
    this.inputEl.value = option;
    this.inputEl.trigger("input");
    this.close();
  }
};

// node_modules/svelte/src/runtime/internal/disclose-version/index.js
if (typeof window !== "undefined")
  (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);

// src/views/components/MultiSelect.svelte
function add_css(target) {
  append_styles(target, "svelte-168eg05", ".multi-select-root.svelte-168eg05.svelte-168eg05{display:flex;flex-direction:column;gap:0.5rem;flex:1;--button-size:1.5rem}.badge.svelte-168eg05.svelte-168eg05{--icon-size:var(--icon-xs);--icon-stroke:var(--icon-xs-stroke-width);display:flex;align-items:center;background-color:var(--pill-background);border:var(--pill-border-width) solid var(--pill-border-color);border-radius:var(--pill-radius);color:var(--pill-color);cursor:var(--cursor);font-weight:var(--pill-weight);padding-top:var(--pill-padding-y);padding-bottom:var(--pill-padding-y);padding-left:var(--pill-padding-x);padding-right:var(--pill-padding-x);line-height:1;max-width:100%;gap:var(--size-4-2);justify-content:center;align-items:center}.hidden.svelte-168eg05.svelte-168eg05{visibility:hidden}.hidden.svelte-168eg05 span.svelte-168eg05{height:var(--button-size)}.badge.svelte-168eg05 span.svelte-168eg05{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:1rem}.badges.svelte-168eg05.svelte-168eg05{display:flex;flex-wrap:wrap;gap:8px;min-height:2rem;padding:0.5rem 0 0 0}button.svelte-168eg05.svelte-168eg05{background:none;border:none;color:inherit;font:inherit;line-height:inherit;padding:0;-webkit-appearance:none;-moz-appearance:none;-o-appearance:none;appearance:none;box-shadow:none;border:none;cursor:pointer;height:var(--button-size);width:var(--button-size)}");
}
function get_then_context(ctx) {
  const constants_0 = (
    /*model*/
    ctx[2]
  );
  ctx[7] = constants_0.createInput;
  ctx[8] = constants_0.removeValue;
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[12] = list[i];
  return child_ctx;
}
function create_catch_block(ctx) {
  let t0;
  let span;
  let t1_value = (
    /*error*/
    ctx[12].message + ""
  );
  let t1;
  return {
    c() {
      t0 = text("Failure obtaining the options to display\n        ");
      span = element("span");
      t1 = text(t1_value);
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, span, anchor);
      append5(span, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*model*/
      4 && t1_value !== (t1_value = /*error*/
      ctx2[12].message + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(span);
      }
    }
  };
}
function create_then_block(ctx) {
  get_then_context(ctx);
  let input;
  let createInput_action;
  let t0;
  let t1;
  let div;
  let mounted;
  let dispose;
  let each_value_1 = ensure_array_like(
    /*$errors*/
    ctx[3]
  );
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  let each_value = ensure_array_like(
    /*$values*/
    ctx[4]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  let each1_else = null;
  if (!each_value.length) {
    each1_else = create_else_block(ctx);
  }
  return {
    c() {
      input = element("input");
      t0 = space();
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t1 = space();
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      if (each1_else) {
        each1_else.c();
      }
      attr(input, "type", "text");
      attr(input, "class", "form-control");
      attr(input, "placeholder", "Select");
      toggle_class(
        input,
        "invalid",
        /*$errors*/
        ctx[3].length > 0
      );
      attr(div, "class", "badges svelte-168eg05");
    },
    m(target, anchor) {
      insert(target, input, anchor);
      insert(target, t0, anchor);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        if (each_blocks_1[i]) {
          each_blocks_1[i].m(target, anchor);
        }
      }
      insert(target, t1, anchor);
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      if (each1_else) {
        each1_else.m(div, null);
      }
      if (!mounted) {
        dispose = action_destroyer(createInput_action = /*createInput*/
        ctx[7].call(null, input));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      get_then_context(ctx2);
      if (dirty & /*$errors*/
      8) {
        toggle_class(
          input,
          "invalid",
          /*$errors*/
          ctx2[3].length > 0
        );
      }
      if (dirty & /*$errors*/
      8) {
        each_value_1 = ensure_array_like(
          /*$errors*/
          ctx2[3]
        );
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
          } else {
            each_blocks_1[i] = create_each_block_1(child_ctx);
            each_blocks_1[i].c();
            each_blocks_1[i].m(t1.parentNode, t1);
          }
        }
        for (; i < each_blocks_1.length; i += 1) {
          each_blocks_1[i].d(1);
        }
        each_blocks_1.length = each_value_1.length;
      }
      if (dirty & /*model, $values*/
      20) {
        each_value = ensure_array_like(
          /*$values*/
          ctx2[4]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
        if (!each_value.length && each1_else) {
          each1_else.p(ctx2, dirty);
        } else if (!each_value.length) {
          each1_else = create_else_block(ctx2);
          each1_else.c();
          each1_else.m(div, null);
        } else if (each1_else) {
          each1_else.d(1);
          each1_else = null;
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
        detach(t0);
        detach(t1);
        detach(div);
      }
      destroy_each(each_blocks_1, detaching);
      destroy_each(each_blocks, detaching);
      if (each1_else)
        each1_else.d();
      mounted = false;
      dispose();
    }
  };
}
function create_each_block_1(ctx) {
  let span;
  let t_value = (
    /*error*/
    ctx[12] + ""
  );
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
      attr(span, "class", "invalid");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append5(span, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*$errors*/
      8 && t_value !== (t_value = /*error*/
      ctx2[12] + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_else_block(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<span class="svelte-168eg05">Nothing selected</span> `;
      attr(div, "class", "badge hidden svelte-168eg05");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_each_block(ctx) {
  let div;
  let span;
  let t0_value = (
    /*value*/
    ctx[9] + ""
  );
  let t0;
  let t1;
  let button;
  let t2;
  let mounted;
  let dispose;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[6](
        /*removeValue*/
        ctx[8],
        /*value*/
        ctx[9]
      )
    );
  }
  return {
    c() {
      div = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      button = element("button");
      button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-x"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>`;
      t2 = space();
      attr(span, "class", "svelte-168eg05");
      attr(button, "class", "svelte-168eg05");
      attr(div, "class", "badge svelte-168eg05");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, span);
      append5(span, t0);
      append5(div, t1);
      append5(div, button);
      append5(div, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$values*/
      16 && t0_value !== (t0_value = /*value*/
      ctx[9] + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_pending_block(ctx) {
  return { c: noop, m: noop, p: noop, d: noop };
}
function create_fragment(ctx) {
  let div;
  let promise;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: true,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 2,
    error: 12
  };
  handle_promise(promise = /*model*/
  ctx[2], info);
  return {
    c() {
      div = element("div");
      info.block.c();
      attr(div, "class", "multi-select-root svelte-168eg05");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      info.block.m(div, info.anchor = null);
      info.mount = () => div;
      info.anchor = null;
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      info.ctx = ctx;
      if (dirty & /*model*/
      4 && promise !== (promise = /*model*/
      ctx[2]) && handle_promise(promise, info)) {
      } else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      info.block.d();
      info.token = null;
      info = null;
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let $errors, $$unsubscribe_errors = noop, $$subscribe_errors = () => ($$unsubscribe_errors(), $$unsubscribe_errors = subscribe(errors, ($$value) => $$invalidate(3, $errors = $$value)), errors);
  let $values, $$unsubscribe_values = noop, $$subscribe_values = () => ($$unsubscribe_values(), $$unsubscribe_values = subscribe(values, ($$value) => $$invalidate(4, $values = $$value)), values);
  $$self.$$.on_destroy.push(() => $$unsubscribe_errors());
  $$self.$$.on_destroy.push(() => $$unsubscribe_values());
  let { model } = $$props;
  let { errors } = $$props;
  $$subscribe_errors();
  let { values } = $$props;
  $$subscribe_values();
  let { setting } = $$props;
  setting.settingEl.setCssStyles({ alignItems: "baseline" });
  const click_handler = (removeValue, value) => removeValue(value);
  $$self.$$set = ($$props2) => {
    if ("model" in $$props2)
      $$invalidate(2, model = $$props2.model);
    if ("errors" in $$props2)
      $$subscribe_errors($$invalidate(0, errors = $$props2.errors));
    if ("values" in $$props2)
      $$subscribe_values($$invalidate(1, values = $$props2.values));
    if ("setting" in $$props2)
      $$invalidate(5, setting = $$props2.setting);
  };
  return [errors, values, model, $errors, $values, setting, click_handler];
}
var MultiSelect = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        model: 2,
        errors: 0,
        values: 1,
        setting: 5
      },
      add_css
    );
  }
};
var MultiSelect_default = MultiSelect;

// src/suggesters/StringSuggest.ts
var import_obsidian7 = require("obsidian");
var StringSuggest = class extends import_obsidian7.AbstractInputSuggest {
  constructor(inputEl, content, onSelectCb, app2, allowUnknownValues = false) {
    super(app2, inputEl);
    this.inputEl = inputEl;
    this.onSelectCb = onSelectCb;
    this.allowUnknownValues = allowUnknownValues;
    this.content = content;
  }
  getSuggestions(inputStr) {
    const lowerCaseInputStr = inputStr.toLocaleLowerCase();
    const candidates = this.allowUnknownValues && inputStr !== "" ? [...this.content, inputStr] : Array.from(this.content);
    return candidates.filter(
      (content) => content.toLocaleLowerCase().contains(lowerCaseInputStr)
    );
  }
  renderSuggestion(content, el) {
    el.setText(content);
  }
  selectSuggestion(content, evt) {
    this.onSelectCb(content);
    this.inputEl.value = "";
    this.close();
    this.inputEl.focus();
  }
};

// src/views/components/MultiSelectModel.ts
async function MultiSelectModel(fieldInput, app2, values) {
  const source = fieldInput.source;
  const removeValue = (value) => values.update(
    (xs) => pipe2(
      xs,
      Array_exports.filter((x) => x !== value)
    )
  );
  switch (source) {
    case "dataview":
    case "fixed": {
      const remainingOptions = new Set(
        source === "fixed" ? fieldInput.multi_select_options : await executeSandboxedDvQuery(sandboxedDvQuery(fieldInput.query), app2)()
      );
      return {
        createInput(element2) {
          new StringSuggest(
            element2,
            remainingOptions,
            (selected) => {
              remainingOptions.delete(selected);
              values.update((x) => [...x, selected]);
            },
            app2,
            fieldInput.allowUnknownValues
          );
        },
        removeValue(value) {
          remainingOptions.add(value);
          removeValue(value);
        }
      };
    }
    case "notes": {
      return {
        createInput(element2) {
          new FileSuggest(
            app2,
            element2,
            {
              renderSuggestion(file) {
                return file.basename;
              },
              selectSuggestion(file) {
                values.update((x) => [...x, file.basename]);
                return "";
              }
            },
            fieldInput.folder
          );
        },
        removeValue
      };
    }
    default:
      return absurd(source);
  }
}
function MultiSelectTags(fieldInput, app2, values) {
  const remainingOptions = new Set(
    Object.keys(app2.metadataCache.getTags()).map(
      (tag) => tag.slice(1)
    )
  );
  return {
    createInput(element2) {
      new StringSuggest(
        element2,
        remainingOptions,
        (selected) => {
          remainingOptions.delete(selected);
          values.update((x) => [...x, selected]);
        },
        app2,
        true
      );
    },
    removeValue(value) {
      remainingOptions.add(value);
      values.update(
        (x) => pipe2(
          x,
          Array_exports.filter((x2) => x2 !== value)
        )
      );
    }
  };
}

// src/FormModal.ts
var notify = throttle(
  (msg) => log_notice("\u26A0\uFE0F  The form has errors \u26A0\uFE0F", msg, "notice-warning"),
  2e3
);
var notifyError2 = (title) => throttle((msg) => log_notice(`\u{1F6A8} ${title} \u{1F6A8}`, msg, "notice-error"), 2e3);
var FormModal = class extends import_obsidian8.Modal {
  constructor(app2, modalDefinition, onSubmit, options) {
    var _a;
    super(app2);
    this.modalDefinition = modalDefinition;
    this.onSubmit = onSubmit;
    this.svelteComponents = [];
    this.subscriptions = [];
    this.initialFormValues = formDataFromFormDefaults(
      modalDefinition.fields,
      (_a = options == null ? void 0 : options.values) != null ? _a : {}
    );
    this.formEngine = makeFormEngine({
      onSubmit: (result2) => {
        this.onSubmit(FormResult.make(result2, "ok"));
        this.close();
      },
      onCancel: () => {
        this.onSubmit(FormResult.make({}, "cancelled"));
        this.close();
      },
      defaultValues: this.initialFormValues
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("modal-form");
    if (this.modalDefinition.customClassname)
      contentEl.addClass(this.modalDefinition.customClassname);
    contentEl.createEl("h1", { text: this.modalDefinition.title });
    this.modalDefinition.fields.forEach((definition) => {
      var _a;
      const name = definition.label || definition.name;
      const required = (_a = definition.isRequired) != null ? _a : false;
      const fieldBase = new import_obsidian8.Setting(contentEl).setName(`${name} ${required ? "*" : ""}`.trim()).setDesc(definition.description);
      const fieldInput = definition.input;
      const type = fieldInput.type;
      const initialValue = this.initialFormValues[definition.name];
      const fieldStore = this.formEngine.addField(definition);
      const subToErrors = (input) => {
        this.subscriptions.push(
          fieldStore.errors.subscribe((errs) => {
            errs.length > 0 ? console.log("errors", errs) : void 0;
            errs.forEach(notify);
            input.setCustomValidity(errs.join("\n"));
          })
        );
      };
      switch (type) {
        case "textarea": {
          fieldBase.setClass("modal-form-textarea");
          return fieldBase.addTextArea((textEl) => {
            textEl.onChange(fieldStore.value.set);
            subToErrors(textEl.inputEl);
            if (typeof initialValue === "string") {
              textEl.setValue(initialValue);
            }
            textEl.inputEl.rows = 6;
            if (import_obsidian8.Platform.isIosApp)
              textEl.inputEl.style.width = "100%";
            else if (import_obsidian8.Platform.isDesktopApp) {
              textEl.inputEl.rows = 10;
            }
          });
        }
        case "email":
        case "tel":
        case "date":
        case "time":
        case "text":
          return fieldBase.addText((text3) => {
            text3.inputEl.type = type;
            subToErrors(text3.inputEl);
            text3.onChange(fieldStore.value.set);
            initialValue !== void 0 && text3.setValue(String(initialValue));
          });
        case "number":
          return fieldBase.addText((text3) => {
            text3.inputEl.type = "number";
            text3.inputEl.step = "any";
            subToErrors(text3.inputEl);
            text3.onChange((val) => {
              if (val !== "") {
                fieldStore.value.set(Number(val) + "");
              }
            });
            initialValue !== void 0 && text3.setValue(String(initialValue));
          });
        case "datetime":
          return fieldBase.addText((text3) => {
            text3.inputEl.type = "datetime-local";
            initialValue !== void 0 && text3.setValue(String(initialValue));
            subToErrors(text3.inputEl);
            text3.onChange(fieldStore.value.set);
          });
        case "toggle":
          return fieldBase.addToggle((toggle) => {
            toggle.setValue(!!initialValue);
            return toggle.onChange(fieldStore.value.set);
          });
        case "note":
          return fieldBase.addText((element2) => {
            new FileSuggest(
              this.app,
              element2.inputEl,
              {
                renderSuggestion(file) {
                  return file.basename;
                },
                selectSuggestion(file) {
                  return file.basename;
                }
              },
              fieldInput.folder
            );
            subToErrors(element2.inputEl);
            element2.onChange(fieldStore.value.set);
          });
        case "folder":
          return fieldBase.addText((element2) => {
            new FolderSuggest(element2.inputEl, this.app);
            subToErrors(element2.inputEl);
            element2.onChange(fieldStore.value.set);
          });
        case "slider":
          return fieldBase.addSlider((slider) => {
            slider.setLimits(fieldInput.min, fieldInput.max, 1);
            slider.setDynamicTooltip();
            if (typeof initialValue === "number") {
              slider.setValue(initialValue);
            } else {
              slider.setValue(fieldInput.min);
            }
            slider.onChange(fieldStore.value.set);
          });
        case "multiselect": {
          fieldStore.value.set(initialValue != null ? initialValue : []);
          this.svelteComponents.push(
            new MultiSelect_default({
              target: fieldBase.controlEl,
              props: {
                model: MultiSelectModel(
                  fieldInput,
                  this.app,
                  fieldStore.value
                ),
                values: fieldStore.value,
                errors: fieldStore.errors,
                setting: fieldBase
              }
            })
          );
          return;
        }
        case "tag": {
          fieldStore.value.set(initialValue != null ? initialValue : []);
          this.svelteComponents.push(
            new MultiSelect_default({
              target: fieldBase.controlEl,
              props: {
                values: fieldStore.value,
                setting: fieldBase,
                errors: fieldStore.errors,
                model: Promise.resolve(
                  MultiSelectTags(
                    fieldInput,
                    this.app,
                    fieldStore.value
                  )
                )
              }
            })
          );
          return;
        }
        case "dataview": {
          const query = fieldInput.query;
          return fieldBase.addText((element2) => {
            new DataviewSuggest(element2.inputEl, query, this.app);
            element2.onChange(fieldStore.value.set);
            subToErrors(element2.inputEl);
          });
        }
        case "select": {
          const source = fieldInput.source;
          switch (source) {
            case "fixed":
              return fieldBase.addDropdown((element2) => {
                fieldInput.options.forEach((option) => {
                  element2.addOption(option.value, option.label);
                });
                initialValue !== void 0 && element2.setValue(String(initialValue));
                fieldStore.value.set(element2.getValue());
                element2.onChange(fieldStore.value.set);
              });
            case "notes":
              return fieldBase.addDropdown((element2) => {
                const files = get_tfiles_from_folder(fieldInput.folder, this.app);
                pipe2(
                  files,
                  E.map(
                    (files2) => files2.reduce((acc, option) => {
                      acc[option.basename] = option.basename;
                      return acc;
                    }, {})
                  ),
                  E.mapLeft((err) => {
                    log_error(err);
                    return err;
                  }),
                  E.map((options) => {
                    element2.addOptions(options);
                  })
                );
                fieldStore.value.set(element2.getValue());
                element2.onChange(fieldStore.value.set);
              });
            default:
              absurd2(source);
          }
          break;
        }
        case "document_block": {
          const functionBody = fieldInput.body;
          const functionParsed = parseFunctionBody(
            functionBody,
            "form"
          );
          const domNode = fieldBase.infoEl.createDiv();
          const sub = this.formEngine.subscribe((form) => {
            pipe2(
              functionParsed,
              fromEither3,
              chainW2(
                (fn) => pipe2(
                  form.fields,
                  filterMap3((field) => field.value),
                  fn
                )
              ),
              match6(
                (error2) => {
                  console.error(error2);
                  notifyError2("Error in document block")(String(error2));
                },
                (newText) => domNode.setText((0, import_obsidian8.sanitizeHTMLToDom)(newText))
              )
            )();
          });
          return this.subscriptions.push(sub);
        }
        default:
          return absurd2(type);
      }
    });
    const buttons = new import_obsidian8.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Cancel").onClick(this.formEngine.triggerCancel)
    );
    buttons.addButton(
      (btn) => btn.setButtonText("Submit").setCta().onClick(this.formEngine.triggerSubmit)
    );
    const submitEnterCallback = (evt) => {
      if ((evt.ctrlKey || evt.metaKey) && evt.key === "Enter") {
        evt.preventDefault();
        this.formEngine.triggerSubmit();
      }
    };
    const cancelEscapeCallback = (evt) => {
      if (!(evt.ctrlKey || evt.metaKey) && evt.key === "Escape") {
        evt.preventDefault();
        this.formEngine.triggerCancel();
      }
    };
    contentEl.addEventListener("keydown", submitEnterCallback);
    contentEl.addEventListener("keydown", cancelEscapeCallback);
  }
  onClose() {
    const { contentEl } = this;
    this.svelteComponents.forEach((component) => component.$destroy());
    this.subscriptions.forEach((subscription) => subscription());
    contentEl.empty();
    this.initialFormValues = {};
  }
};

// src/core/InputDefinitionSchema.ts
function nonEmptyString(name) {
  return string(`${name} should be a string`, [
    toTrimmed(),
    minLength(1, `${name} should not be empty`)
  ]);
}
var InputBasicTypeSchema = enumType([
  "text",
  "number",
  "date",
  "time",
  "datetime",
  "textarea",
  "toggle",
  "email",
  "tel"
]);
var SelectFromNotesSchema = object({
  type: literal("select"),
  source: literal("notes"),
  folder: nonEmptyString("folder name")
});
var InputTagSchema = object({
  type: literal("tag"),
  exclude: optional(string())
  // This should be a regex string
});
var InputSliderSchema = object({
  type: literal("slider"),
  min: number(),
  max: number()
});
var InputNoteFromFolderSchema = object({
  type: literal("note"),
  folder: nonEmptyString("folder name")
});
var InputFolderSchema = object({
  type: literal("folder")
  // TODO: allow exclude option
});
var InputDataviewSourceSchema = object({
  type: literal("dataview"),
  query: nonEmptyString("dataview query")
});
var InputBasicSchema = object({ type: InputBasicTypeSchema });
var InputSelectFixedSchema = object({
  type: literal("select"),
  source: literal("fixed"),
  options: array2(
    object({
      value: string([toTrimmed()]),
      label: string()
    })
  )
});
var MultiSelectNotesSchema = object({
  type: literal("multiselect"),
  source: literal("notes"),
  folder: nonEmptyString("multi select source folder")
});
var MultiSelectFixedSchema = object({
  type: literal("multiselect"),
  source: literal("fixed"),
  multi_select_options: array2(string()),
  allowUnknownValues: optional(boolean(), false)
});
var MultiSelectQuerySchema = object({
  type: literal("multiselect"),
  source: literal("dataview"),
  query: nonEmptyString("dataview query"),
  allowUnknownValues: optional(boolean(), false)
});
function canAllowUnknownValues(type, source) {
  return type === "multiselect" && (source === "dataview" || source === "fixed");
}
var MultiselectSchema = union4([
  MultiSelectNotesSchema,
  MultiSelectFixedSchema,
  MultiSelectQuerySchema
]);
var DocumentBlock = object({
  type: literal("document_block"),
  body: string()
});
var InputTypeSchema = union4([
  InputBasicSchema,
  InputNoteFromFolderSchema,
  InputFolderSchema,
  InputSliderSchema,
  InputTagSchema,
  SelectFromNotesSchema,
  InputDataviewSourceSchema,
  InputSelectFixedSchema,
  MultiselectSchema,
  DocumentBlock
]);
var InputTypeToParserMap = {
  number: parseC(InputBasicSchema),
  text: parseC(InputBasicSchema),
  email: parseC(InputBasicSchema),
  tel: parseC(InputBasicSchema),
  date: parseC(InputBasicSchema),
  time: parseC(InputBasicSchema),
  datetime: parseC(InputBasicSchema),
  textarea: parseC(InputBasicSchema),
  toggle: parseC(InputBasicSchema),
  note: parseC(InputNoteFromFolderSchema),
  folder: parseC(InputFolderSchema),
  slider: parseC(InputSliderSchema),
  tag: parseC(InputTagSchema),
  select: trySchemas([SelectFromNotesSchema, InputSelectFixedSchema]),
  dataview: parseC(InputDataviewSourceSchema),
  multiselect: parseC(MultiselectSchema),
  document_block: parseC(DocumentBlock)
};

// src/core/findInputDefinitionSchema.ts
function stringifyIssues(error2) {
  return error2.issues.map(
    (issue) => {
      var _a;
      return `${(_a = issue.path) == null ? void 0 : _a.map((i) => i.key).join(".")}: ${issue.message} got ${issue.input}`;
    }
  );
}
var InvalidInputTypeError = class {
  constructor(field, inputType2) {
    this.field = field;
    this.inputType = inputType2;
    this.path = "input.type";
  }
  toString() {
    return `InvalidInputTypeError: ${this.getFieldErrors()[0]}`;
  }
  getFieldErrors() {
    return [`"input.type" is invalid, got: ${JSON.stringify(this.inputType)}`];
  }
};
InvalidInputTypeError._tag = "InvalidInputTypeError";
var InvalidInputError = class {
  constructor(field, error2) {
    this.field = field;
    this.error = error2;
    var _a, _b;
    this.path = (_b = (_a = error2.issues[0].path) == null ? void 0 : _a.map((i) => i.key).join(".")) != null ? _b : "";
  }
  toString() {
    return `InvalidInputError: ${stringifyIssues(this.error).join(", ")}`;
  }
  getFieldErrors() {
    return stringifyIssues(this.error);
  }
};
InvalidInputError._tag = "InvalidInputError";
var _InvalidFieldError = class {
  constructor(field, error2) {
    this.field = field;
    this.error = error2;
    var _a, _b;
    this.path = (_b = (_a = error2.issues[0].path) == null ? void 0 : _a.map((i) => i.key).join(".")) != null ? _b : "";
  }
  toString() {
    return `InvalidFieldError: ${stringifyIssues(this.error).join(", ")}`;
  }
  toArrayOfStrings() {
    return this.getFieldErrors();
  }
  getFieldErrors() {
    return stringifyIssues(this.error);
  }
  static of(field) {
    return (error2) => new _InvalidFieldError(field, error2);
  }
};
var InvalidFieldError = _InvalidFieldError;
InvalidFieldError._tag = "InvalidFieldError";
function isValidInputType(input) {
  return "string" === typeof input && input in InputTypeToParserMap;
}
function findInputDefinitionSchema(fieldDefinition) {
  return pipe2(
    parse2(FieldMinimalSchema, fieldDefinition),
    mapLeft(InvalidFieldError.of(fieldDefinition)),
    chainW((field) => {
      const type = field.input.type;
      if (isValidInputType(type))
        return right3([field, InputTypeToParserMap[type]]);
      else
        return left3(new InvalidInputTypeError(field, type));
    })
  );
}
function findFieldErrors(fields) {
  return pipe2(
    fields,
    Array_exports.partitionMap((fieldUnparsed) => {
      return pipe2(
        findInputDefinitionSchema(fieldUnparsed),
        chainW(
          ([field, parser]) => pipe2(
            parser(field.input),
            bimap(
              (error2) => new InvalidInputError(field, error2),
              () => field
            )
          )
        )
      );
    })
    // Separated.left,
  );
}

// src/core/template/templateSchema.ts
var TemplateTextSchema = object({
  _tag: literal("text"),
  value: string()
});
var TemplateVariableSchema = object({
  _tag: literal("variable"),
  value: string()
});
var FrontmatterCommandSchema = object({
  _tag: literal("frontmatter-command"),
  pick: array2(string()),
  omit: array2(string())
});
var ParsedTemplateSchema = array2(union4([TemplateTextSchema, TemplateVariableSchema, FrontmatterCommandSchema]));

// src/core/formDefinitionSchema.ts
var FieldDefinitionSchema = object({
  name: nonEmptyString("field name"),
  label: optional(string()),
  description: string(),
  isRequired: optional(boolean()),
  input: InputTypeSchema
});
var FieldMinimalSchema = passthrough(
  merge([FieldDefinitionSchema, object({ input: passthrough(object({ type: string() })) })])
);
var FieldListSchema = array2(FieldDefinitionSchema);
var FormDefinitionBasicSchema = object({
  title: nonEmptyString("form title"),
  name: nonEmptyString("form name"),
  customClassname: optional(string()),
  fields: array2(unknown())
});
var FormDefinitionV1Schema = merge([
  FormDefinitionBasicSchema,
  object({
    version: literal("1"),
    fields: FieldListSchema,
    template: optional(
      object({
        createCommand: boolean(),
        parsedTemplate: ParsedTemplateSchema
      })
    )
  })
]);
var FormDefinitionLatestSchema = FormDefinitionV1Schema;
var MigrationError = class {
  constructor(form, error2) {
    this.form = form;
    this.error = error2;
    this.name = form.name;
  }
  toString() {
    return `MigrationError: 
            ${this.error.message}
            ${this.error.issues.map((issue) => issue.message).join(", ")}`;
  }
  toArrayOfStrings() {
    return stringifyIssues(this.error);
  }
  // This allows to store the error in the settings, along with the rest of the forms and
  // have save all the data in one go transparently.
  // This is required so we don't lose the form, even if it is invalid
  toJSON() {
    return this.form;
  }
  get fieldErrors() {
    return findFieldErrors(this.form.fields);
  }
};
MigrationError._tag = "MigrationError";
var InvalidData = class {
  constructor(data, error2) {
    this.data = data;
    this.error = error2;
  }
  toString() {
    return `InvalidData: ${stringifyIssues(this.error).join(", ")}`;
  }
  toArrayOfStrings() {
    return stringifyIssues(this.error);
  }
};
InvalidData._tag = "InvalidData";
function fromV0toV1(data) {
  return pipe2(
    parse2(FormDefinitionV1Schema, { ...data, version: "1" }),
    getOrElseW((error2) => new MigrationError(data, error2))
  );
}
function migrateToLatest(data) {
  return pipe2(
    // first try a quick one with the latest schema
    parse2(FormDefinitionLatestSchema, data, { abortEarly: true }),
    orElse(
      () => pipe2(
        parse2(FormDefinitionBasicSchema, data, { abortEarly: false }),
        mapLeft((error2) => new InvalidData(data, error2)),
        map3(fromV0toV1)
      )
    )
  );
}
function formNeedsMigration(data) {
  return !is(FormDefinitionLatestSchema, data);
}

// src/exampleModalDefinition.ts
var exampleModalDefinition = {
  title: "Example form",
  name: "example-form",
  version: "1",
  fields: [
    {
      name: "name",
      label: "Name",
      description: "It is named how?",
      isRequired: true,
      input: { type: "text" }
    },
    {
      name: "age",
      label: "Age",
      description: "How old",
      isRequired: true,
      input: { type: "number" }
    },
    {
      name: "dateOfBirth",
      label: "Date of Birth",
      description: "When were you born?",
      input: { type: "date" }
    },
    {
      name: "timeOfDay",
      label: "Time of day",
      description: "The time you can do this",
      input: { type: "time" }
    },
    {
      name: "is_family",
      label: "Is family",
      description: "If it is part of the family",
      input: { type: "toggle" }
    },
    {
      name: "favorite_book",
      label: "Favorite book",
      description: "Pick one",
      input: { type: "note", folder: "Books" }
    },
    {
      name: "folder",
      label: "The destination folder",
      description: "It offers auto-completion to existing folders",
      input: { type: "folder" }
    },
    {
      name: "multi_example",
      label: "Multi select folder",
      description: "Allows to pick many notes from a folder",
      input: { type: "multiselect", source: "notes", folder: "Books" }
    },
    {
      name: "multi_example_2",
      label: "Multi select fixed",
      description: "Allows to pick many notes from a fixed list",
      input: {
        type: "multiselect",
        source: "fixed",
        allowUnknownValues: false,
        multi_select_options: [
          "Android",
          "iOS",
          "Windows",
          "MacOS",
          "Linux",
          "Solaris",
          "MS2"
        ]
      }
    },
    {
      name: "multi_select_dataview",
      label: "Multi select dataview",
      description: "Allows to pick several values from a dv query",
      input: {
        type: "multiselect",
        source: "dataview",
        query: 'dv.pages("#person").map(p => p.file.name)',
        allowUnknownValues: true
      }
    },
    {
      name: "best_fried",
      label: "Best friend",
      description: "Select of type note from a folder",
      input: {
        type: "select",
        source: "notes",
        folder: "People"
      }
    },
    {
      name: "dataview_example",
      label: "Dataview example",
      description: "Only people matching the dataview query will be shown",
      input: {
        type: "dataview",
        query: 'dv.pages("#person").filter(p => p.age < 30).map(p => p.file.name)'
      }
    },
    {
      name: "friendship_level",
      label: "Friendship level",
      description: "How good friends are you?",
      input: {
        type: "slider",
        min: 0,
        max: 10
      }
    },
    {
      name: "favorite_meal",
      label: "Favorite meal",
      description: "Pick one option",
      input: {
        type: "select",
        source: "fixed",
        options: [
          { value: "pizza", label: "\u{1F355} Pizza" },
          { value: "pasta", label: "\u{1F35D} Pasta" },
          { value: "burger", label: "\u{1F354} Burger" },
          { value: "salad", label: "\u{1F957} Salad" },
          { value: "steak", label: "\u{1F969} Steak" },
          { value: "sushi", label: "\u{1F363} Sushi" },
          { value: "ramen", label: "\u{1F35C} Ramen" },
          { value: "tacos", label: "\u{1F32E} Tacos" },
          { value: "fish", label: "\u{1F41F} Fish" },
          { value: "chicken", label: "\u{1F357} Chicken" }
        ]
      }
    },
    {
      name: "some notes",
      label: "Multi line notes",
      description: "Put your thouhts here",
      input: {
        type: "textarea"
      }
    },
    {
      name: "Tags",
      description: "Tags input example",
      input: { type: "tag" }
    },
    {
      name: "document",
      description: "Document block example",
      input: {
        type: "document_block",
        body: "return `Hello ${form.name}!<br> Your best friend is <b>${form.best_fried}</b>`"
      }
    }
  ]
};

// src/API.ts
function isPickOption(opts) {
  return "pick" in opts && Array.isArray(opts.pick);
}
function isOmitOption(opts) {
  return "omit" in opts && Array.isArray(opts.omit);
}
var API = class {
  /**
   * Constructor for the API class
   * @param {App} app - The application instance
   * @param {typeof ModalFormPlugin} plugin - The plugin instance
   */
  constructor(app2, plugin) {
    this.app = app2;
    this.plugin = plugin;
    /**
     * What this plugin considers its standard library
     * Because it is bundled with the plugin anyway, I think
     * it makes sense to expose it to the user
     */
    this.std = std_exports;
    this.util = {
      getAliases: flow2(
        (name) => resolve_tfile(name, this.app),
        E.map((f) => this.app.metadataCache.getCache(f.path)),
        E.chainW(E.fromNullable(new Error("No cache found"))),
        E.map((tf) => (0, import_obsidian9.parseFrontMatterAliases)(tf.frontmatter)),
        E.match(
          () => [],
          (aliases) => aliases
        )
      ),
      getFile: flow2(
        resolve_tfile,
        E.map((f) => enrich_tfile(f, this.app))
      )
    };
  }
  /**
   * Opens a modal form with the provided form definition
   * @param {FormDefinition} formDefinition - The form definition to use
   * @returns {Promise<FormResult>} - A promise that resolves with the form result
   */
  openModalForm(formDefinition, options) {
    return new Promise((resolve) => {
      new FormModal(this.app, formDefinition, resolve, options).open();
    });
  }
  exampleForm(options) {
    return this.openModalForm(exampleModalDefinition, options);
  }
  getFormByName(name) {
    var _a;
    const form = (_a = this.plugin.settings) == null ? void 0 : _a.formDefinitions.find((form2) => form2.name === name);
    if (form instanceof MigrationError) {
      log_notice(
        "\u{1F6AB} The form you tried to load has an invalid format",
        `The form "${name}" has an invalid format.We tried to automatically convert it but it failed, please fix it manually in the forms manager.
            `
      );
      return void 0;
    } else {
      return form;
    }
  }
  /**
   * Opens a named form
   * @param {string} name - The name of the form to open
   * @returns {Promise<FormResult>} - A promise that resolves with the form result
   * @throws {ModalFormError} - Throws an error if the form definition is not found
   */
  namedForm(name, options) {
    const formDefinition = this.getFormByName(name);
    if (formDefinition) {
      return this.openModalForm(formDefinition, options);
    } else {
      const error2 = new ModalFormError(`Form definition ${name} not found`);
      log_error(error2);
      return Promise.reject(error2);
    }
  }
  /**
   * Opens a named form, limiting/filtering the fields included
   * @param {string} name - The name of the form to open
   * @param {limitOptions} limitOpts - The options to apply when filtering fields
   * @param {FormOptions} formOpts - Form options to use when opening the form once filtered
   * @returns {Promise<FormResult>} - A promise that resolves with the form result
   * @throws {ModalFormError} - Throws an error if the form definition is not found
   */
  limitedForm(name, limitOpts, formOpts) {
    const formDefinition = this.getFormByName(name);
    let newFormDefinition;
    if (formDefinition) {
      if (isOmitOption(limitOpts)) {
        const omit = limitOpts.omit;
        newFormDefinition = {
          ...formDefinition,
          fields: formDefinition.fields.filter((field) => !omit.includes(field.name))
        };
      } else if (isPickOption(limitOpts)) {
        newFormDefinition = {
          ...formDefinition,
          fields: formDefinition.fields.filter(
            (field) => limitOpts.pick.includes(field.name)
          )
        };
      } else {
        throw new ModalFormError(
          "Invalid limit options provided to limitedForm",
          `GOT: ${JSON.stringify(limitOpts)}`
        );
      }
      return this.openModalForm(newFormDefinition, formOpts);
    } else {
      const error2 = new ModalFormError(`Form definition ${name} not found`);
      log_error(error2);
      return Promise.reject(error2);
    }
  }
  /**
   * Opens a form with the provided form reference
   * @param {string | FormDefinition} formReference - The form reference, either a form name of an existing form or an inline form definition
   * @returns {Promise<FormResult>} - A promise that resolves with the form result
   * @throws {ModalFormError} - Throws an error if the form reference is not found
   */
  openForm(formReference, options) {
    if (typeof formReference === "string") {
      return this.namedForm(formReference, options);
    } else {
      return this.openModalForm(formReference, options);
    }
  }
  openInTemplateBuilder(name) {
    const form = this.getFormByName(name);
    if (form) {
      this.plugin.openTemplateBuilder({ formDefinition: form });
    }
  }
};

// src/ModalFormSettingTab.ts
var import_obsidian10 = require("obsidian");

// src/core/settings.ts
var OpenPositionSchema = enumType(["left", "right", "mainView"]);
function isValidOpenPosition(position) {
  return is(OpenPositionSchema, position);
}
var ModalFormSettingsSchema = object({
  editorPosition: optional(OpenPositionSchema, "right"),
  attachShortcutToGlobalWindow: optional(boolean(), false),
  globalNamespace: optional(enumType(["MF", "ModalForm"]), "MF"),
  formDefinitions: array2(unknown())
});
function getDefaultSettings() {
  return {
    editorPosition: "right",
    attachShortcutToGlobalWindow: false,
    globalNamespace: "MF",
    formDefinitions: []
  };
}
var NullSettingsError = class {
  constructor() {
    this._tag = "NullSettingsError";
  }
};
function parseSettings(maybeSettings) {
  return pipe2(
    maybeSettings,
    fromNullable(new NullSettingsError()),
    chainW((s) => parse2(ModalFormSettingsSchema, { ...getDefaultSettings(), ...s }))
  );
}

// src/ModalFormSettingTab.ts
var ModalFormSettingTab = class extends import_obsidian10.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  async display() {
    const { containerEl, plugin } = this;
    containerEl.empty();
    containerEl.createEl("a", { text: "Modal Form documentation", cls: "nav-link", href: "https://github.com/danielo515/obsidian-modal-form" });
    const settings2 = await plugin.getSettings();
    new import_obsidian10.Setting(containerEl).setName("Editor position").setDesc("Where the form editor will be opened. In mobile it will always be main view.").addDropdown((component) => {
      component.addOptions({
        left: "Left",
        right: "Right",
        mainView: "Main View"
      }).setValue(settings2.editorPosition).onChange(async (value) => {
        if (isValidOpenPosition(value)) {
          await this.plugin.setEditorPosition(value);
        }
      });
    });
    new import_obsidian10.Setting(containerEl).setName("Attach Modal-Form Shortcut to Global Window").setDesc("Enable or disable attaching a modal-form shortcut to the global window. If you enable this you will be able to access the API using the global variable `MF`. Enabling is immediate, disabling requires a restart.").addToggle((component) => {
      component.setValue(settings2.attachShortcutToGlobalWindow).onChange(async (value) => {
        await this.plugin.setAttachShortcutToGlobalWindow(value);
      });
    });
  }
};

// src/views/EditFormView.ts
var import_obsidian15 = require("obsidian");

// src/core/formDefinition.ts
var InputTypeReadable = {
  text: "Text",
  number: "Number",
  tag: "Tags",
  email: "Email",
  tel: "Phone",
  date: "Date",
  time: "Time",
  datetime: "DateTime",
  textarea: "Text area",
  toggle: "Toggle",
  note: "Note",
  folder: "Folder",
  slider: "Slider",
  select: "Select",
  dataview: "Dataview",
  multiselect: "Multiselect",
  document_block: "Document block"
};
function validateFields(fields) {
  const result2 = safeParse(FieldListSchema, fields);
  if (result2.success) {
    return [];
  }
  console.error("Fields issues", result2.issues);
  return result2.issues.map((issue) => {
    var _a, _b, _c, _d;
    return {
      message: issue.message,
      path: (_a = issue.path) == null ? void 0 : _a.map((item2) => item2.key).join("."),
      index: (_d = (_c = (_b = issue.path) == null ? void 0 : _b[0]) == null ? void 0 : _c.key) != null ? _d : 0
    };
  });
}
function isValidFormDefinition(input) {
  if (!is(FormDefinitionBasicSchema, input)) {
    return false;
  }
  const fieldsAreValid = is(FieldListSchema, input.fields);
  if (!fieldsAreValid) {
    return false;
  }
  return true;
}
function duplicateForm(formName, forms) {
  return pipe2(
    forms,
    Array_exports.findFirstMap((f) => {
      if (f instanceof MigrationError) {
        return O.none;
      }
      if (f.name === formName) {
        return O.some(f);
      }
      return O.none;
    }),
    O.map((f) => {
      let newName = f.name + "-copy";
      let i = 1;
      while (forms.some((f2) => f2.name === newName)) {
        newName = f.name + "-copy-" + i;
        i++;
      }
      return { ...f, name: newName };
    }),
    O.map((f) => {
      return [...forms, f];
    }),
    O.getOrElse(() => forms)
  );
}

// src/views/FormBuilder.svelte
var import_obsidian14 = require("obsidian");

// src/views/components/Code.svelte
function add_css2(target) {
  append_styles(target, "svelte-1ovxcwm", "pre.svelte-1ovxcwm{background-color:var(--background-secondary);border-radius:var(--border-radius);padding:0.5rem}code.svelte-1ovxcwm{font-family:var(--font-family-monospace)}code.allowWrap.svelte-1ovxcwm{white-space:pre-wrap}div.svelte-1ovxcwm{display:flex}");
}
function create_fragment2(ctx) {
  let div;
  let pre;
  let code;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[2].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[1],
    null
  );
  return {
    c() {
      div = element("div");
      pre = element("pre");
      code = element("code");
      if (default_slot)
        default_slot.c();
      attr(code, "class", "svelte-1ovxcwm");
      toggle_class(
        code,
        "allowWrap",
        /*allowWrap*/
        ctx[0]
      );
      attr(pre, "class", "svelte-1ovxcwm");
      attr(div, "class", "svelte-1ovxcwm");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, pre);
      append5(pre, code);
      if (default_slot) {
        default_slot.m(code, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[1],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[1]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[1],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*allowWrap*/
      1) {
        toggle_class(
          code,
          "allowWrap",
          /*allowWrap*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { allowWrap = false } = $$props;
  $$self.$$set = ($$props2) => {
    if ("allowWrap" in $$props2)
      $$invalidate(0, allowWrap = $$props2.allowWrap);
    if ("$$scope" in $$props2)
      $$invalidate(1, $$scope = $$props2.$$scope);
  };
  return [allowWrap, $$scope, slots];
}
var Code = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance2, create_fragment2, safe_not_equal, { allowWrap: 0 }, add_css2);
  }
};
var Code_default = Code;

// src/views/components/FormRow.svelte
function add_css3(target) {
  append_styles(target, "svelte-1whkjqf", ".field-group.svelte-1whkjqf{display:flex;flex-direction:column;gap:0.5rem}.inline.svelte-1whkjqf{flex-direction:row;align-items:center;gap:1rem}.hidden-label.svelte-1whkjqf{white-space:nowrap;overflow:hidden;visibility:hidden}");
}
function create_fragment3(ctx) {
  let div;
  let label_1;
  let t0;
  let t1;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      label_1 = element("label");
      t0 = text(
        /*label*/
        ctx[0]
      );
      t1 = space();
      if (default_slot)
        default_slot.c();
      attr(
        label_1,
        "for",
        /*id*/
        ctx[1]
      );
      attr(label_1, "class", "svelte-1whkjqf");
      toggle_class(
        label_1,
        "hidden-label",
        /*hideLabel*/
        ctx[2]
      );
      attr(div, "class", "field-group svelte-1whkjqf");
      toggle_class(
        div,
        "inline",
        /*inline*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, label_1);
      append5(label_1, t0);
      append5(div, t1);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*label*/
      1)
        set_data(
          t0,
          /*label*/
          ctx2[0]
        );
      if (!current || dirty & /*id*/
      2) {
        attr(
          label_1,
          "for",
          /*id*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*hideLabel*/
      4) {
        toggle_class(
          label_1,
          "hidden-label",
          /*hideLabel*/
          ctx2[2]
        );
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*inline*/
      8) {
        toggle_class(
          div,
          "inline",
          /*inline*/
          ctx2[3]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { label } = $$props;
  let { id } = $$props;
  let { hideLabel = false } = $$props;
  let { inline = false } = $$props;
  $$self.$$set = ($$props2) => {
    if ("label" in $$props2)
      $$invalidate(0, label = $$props2.label);
    if ("id" in $$props2)
      $$invalidate(1, id = $$props2.id);
    if ("hideLabel" in $$props2)
      $$invalidate(2, hideLabel = $$props2.hideLabel);
    if ("inline" in $$props2)
      $$invalidate(3, inline = $$props2.inline);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  return [label, id, hideLabel, inline, $$scope, slots];
}
var FormRow = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance3, create_fragment3, safe_not_equal, { label: 0, id: 1, hideLabel: 2, inline: 3 }, add_css3);
  }
};
var FormRow_default = FormRow;

// src/views/components/inputBuilderDataview.svelte
function add_css4(target) {
  append_styles(target, "svelte-ddsol2", "h6.svelte-ddsol2{margin-bottom:0}");
}
function create_if_block(ctx) {
  let div;
  let t;
  return {
    c() {
      div = element("div");
      t = text(
        /*error*/
        ctx[3]
      );
      attr(div, "class", "modal-form-error-message");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*error*/
      8)
        set_data(
          t,
          /*error*/
          ctx2[3]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_catch_block2(ctx) {
  let div;
  let t_value = (
    /*error*/
    ctx[3] + ""
  );
  let t;
  return {
    c() {
      div = element("div");
      t = text(t_value);
      attr(div, "class", "modal-form-error-message");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*preview*/
      2 && t_value !== (t_value = /*error*/
      ctx2[3] + ""))
        set_data(t, t_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_then_block2(ctx) {
  let code;
  let current;
  code = new Code_default({
    props: {
      allowWrap: true,
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(code.$$.fragment);
    },
    m(target, anchor) {
      mount_component(code, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const code_changes = {};
      if (dirty & /*$$scope, preview*/
      1026) {
        code_changes.$$scope = { dirty, ctx: ctx2 };
      }
      code.$set(code_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(code.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(code.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(code, detaching);
    }
  };
}
function create_default_slot_1(ctx) {
  let t_value = (
    /*previewResult*/
    ctx[9] + ""
  );
  let t;
  return {
    c() {
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*preview*/
      2 && t_value !== (t_value = /*previewResult*/
      ctx2[9] + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
    }
  };
}
function create_pending_block2(ctx) {
  let t;
  return {
    c() {
      t = text("--");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(t);
      }
    }
  };
}
function create_default_slot(ctx) {
  let span;
  let t8;
  let textarea;
  let t9;
  let h6;
  let t11;
  let t12;
  let await_block_anchor;
  let promise;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*error*/
    ctx[3] && create_if_block(ctx)
  );
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: true,
    pending: create_pending_block2,
    then: create_then_block2,
    catch: create_catch_block2,
    value: 9,
    error: 3,
    blocks: [, , ,]
  };
  handle_promise(promise = /*preview*/
  ctx[1](), info);
  return {
    c() {
      span = element("span");
      span.innerHTML = `This is a <a href="https://blacksmithgu.github.io/obsidian-dataview/api/intro/">Dataview</a>
        query that will be used to populate the input suggestions. You should provide a query that returns
        a list of strings, for example:
        <pre class="language-js"><code>dv.pages(&#39;#tag&#39;).map(p =&gt; p.file.name)</code></pre>
        It is recommended to take advantage of<a href="https://blacksmithgu.github.io/obsidian-dataview/api/data-array">Swizzling</a>
        to write shorter queries:
        <pre class="language-js"><code>dv.pages(&#39;#tag&#39;).file.name</code></pre>`;
      t8 = space();
      textarea = element("textarea");
      t9 = space();
      h6 = element("h6");
      h6.textContent = "Results preview";
      t11 = space();
      if (if_block)
        if_block.c();
      t12 = space();
      await_block_anchor = empty4();
      info.block.c();
      attr(span, "class", "modal-form-hint");
      attr(
        textarea,
        "id",
        /*id*/
        ctx[2]
      );
      attr(textarea, "name", "dataview_query");
      attr(textarea, "class", "form-control");
      attr(textarea, "rows", "3");
      attr(textarea, "placeholder", "dv.pages('#tag').map(p => p.file.name)");
      attr(h6, "class", "svelte-ddsol2");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      insert(target, t8, anchor);
      insert(target, textarea, anchor);
      set_input_value(
        textarea,
        /*value*/
        ctx[0]
      );
      insert(target, t9, anchor);
      insert(target, h6, anchor);
      insert(target, t11, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t12, anchor);
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
      current = true;
      if (!mounted) {
        dispose = listen(
          textarea,
          "input",
          /*textarea_input_handler*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty & /*id*/
      4) {
        attr(
          textarea,
          "id",
          /*id*/
          ctx[2]
        );
      }
      if (dirty & /*value*/
      1) {
        set_input_value(
          textarea,
          /*value*/
          ctx[0]
        );
      }
      if (
        /*error*/
        ctx[3]
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          if_block.m(t12.parentNode, t12);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      info.ctx = ctx;
      if (dirty & /*preview*/
      2 && promise !== (promise = /*preview*/
      ctx[1]()) && handle_promise(promise, info)) {
      } else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(info.block);
      current = true;
    },
    o(local) {
      for (let i = 0; i < 3; i += 1) {
        const block = info.blocks[i];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(span);
        detach(t8);
        detach(textarea);
        detach(t9);
        detach(h6);
        detach(t11);
        detach(t12);
        detach(await_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
      info.block.d(detaching);
      info.token = null;
      info = null;
      mounted = false;
      dispose();
    }
  };
}
function create_fragment4(ctx) {
  let formrow;
  let current;
  formrow = new FormRow_default({
    props: {
      label: "Dataview Query",
      id: (
        /*id*/
        ctx[2]
      ),
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(formrow.$$.fragment);
    },
    m(target, anchor) {
      mount_component(formrow, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const formrow_changes = {};
      if (dirty & /*id*/
      4)
        formrow_changes.id = /*id*/
        ctx2[2];
      if (dirty & /*$$scope, preview, error, id, value*/
      1039) {
        formrow_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow.$set(formrow_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(formrow.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(formrow.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(formrow, detaching);
    }
  };
}
function instance4($$self, $$props, $$invalidate) {
  let id;
  let preview;
  let { index } = $$props;
  let { value = "" } = $$props;
  let { app: app2 } = $$props;
  let error2 = "";
  const logger = (err) => $$invalidate(3, error2 = err.message);
  const makePreview = function(query) {
    $$invalidate(3, error2 = "");
    return pipe2(query, sandboxedDvQuery, (query2) => executeSandboxedDvQuery(query2, app2, logger));
  };
  function textarea_input_handler() {
    value = this.value;
    $$invalidate(0, value);
  }
  $$self.$$set = ($$props2) => {
    if ("index" in $$props2)
      $$invalidate(4, index = $$props2.index);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("app" in $$props2)
      $$invalidate(5, app2 = $$props2.app);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*index*/
    16) {
      $:
        $$invalidate(2, id = `dataview_${index}`);
    }
    if ($$self.$$.dirty & /*value*/
    1) {
      $:
        $$invalidate(1, preview = makePreview(value));
    }
  };
  return [value, preview, id, error2, index, app2, textarea_input_handler];
}
var InputBuilderDataview = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance4, create_fragment4, safe_not_equal, { index: 4, value: 0, app: 5 }, add_css4);
  }
};
var inputBuilderDataview_default = InputBuilderDataview;

// src/views/components/InputBuilderSelect.svelte
var import_obsidian12 = require("obsidian");

// src/views/components/InputFolder.svelte
var import_obsidian11 = require("obsidian");
function create_fragment5(ctx) {
  let div;
  let label;
  let t;
  let searchFolder_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      label = element("label");
      t = text("Source Folder");
      attr(
        label,
        "for",
        /*id*/
        ctx[0]
      );
      attr(div, "class", "modal-form flex column gap1 remove-padding remove-border fix-suggest");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, label);
      append5(label, t);
      if (!mounted) {
        dispose = action_destroyer(searchFolder_action = /*searchFolder*/
        ctx[1].call(null, div));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*id*/
      1) {
        attr(
          label,
          "for",
          /*id*/
          ctx2[0]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance5($$self, $$props, $$invalidate) {
  let id;
  let { index } = $$props;
  let { folder = "" } = $$props;
  let { notifyChange } = $$props;
  function searchFolder(element2) {
    new import_obsidian11.Setting(element2).addSearch((search2) => {
      search2.setPlaceholder("Select a folder");
      search2.setValue(folder);
      new FolderSuggest(search2.inputEl, app);
      search2.onChange((value) => {
        $$invalidate(2, folder = value);
        notifyChange();
      });
    });
  }
  $$self.$$set = ($$props2) => {
    if ("index" in $$props2)
      $$invalidate(3, index = $$props2.index);
    if ("folder" in $$props2)
      $$invalidate(2, folder = $$props2.folder);
    if ("notifyChange" in $$props2)
      $$invalidate(4, notifyChange = $$props2.notifyChange);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*index*/
    8) {
      $:
        $$invalidate(0, id = `input_folder_${index}`);
    }
  };
  return [id, searchFolder, folder, index, notifyChange];
}
var InputFolder = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance5, create_fragment5, safe_not_equal, { index: 3, folder: 2, notifyChange: 4 });
  }
};
var InputFolder_default = InputFolder;

// src/views/components/InputBuilderSelect.svelte
function add_css5(target) {
  append_styles(target, "svelte-15a6dqv", "button.svelte-15a6dqv:disabled{opacity:0.5;cursor:forbidden}.unknown-checkbox.svelte-15a6dqv{display:flex;flex-direction:column;align-items:flex-start}");
}
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i];
  child_ctx[26] = list;
  child_ctx[27] = i;
  const constants_0 = `${/*options_id*/
  child_ctx[10]}_option_${/*idx*/
  child_ctx[27]}`;
  child_ctx[25] = constants_0;
  return child_ctx;
}
function get_else_ctx(ctx) {
  const child_ctx = ctx.slice();
  const constants_0 = `${/*options_id*/
  child_ctx[10]}_option_label_${/*idx*/
  child_ctx[27]}`;
  child_ctx[28] = constants_0;
  return child_ctx;
}
function create_if_block_5(ctx) {
  let option_1;
  return {
    c() {
      option_1 = element("option");
      option_1.textContent = "Dataview";
      option_1.__value = "dataview";
      set_input_value(option_1, option_1.__value);
    },
    m(target, anchor) {
      insert(target, option_1, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(option_1);
      }
    }
  };
}
function create_if_block_4(ctx) {
  let label;
  let span0;
  let input;
  let t0;
  let t1;
  let span1;
  let mounted;
  let dispose;
  return {
    c() {
      label = element("label");
      span0 = element("span");
      input = element("input");
      t0 = text("\n                Allow unknown values.");
      t1 = space();
      span1 = element("span");
      span1.textContent = "If checked, the user will be able to type any value in the input even if it is not\n                in the list of options.";
      attr(input, "type", "checkbox");
      attr(span1, "class", "modal-form-hint");
      attr(label, "class", "unknown-checkbox svelte-15a6dqv");
    },
    m(target, anchor) {
      insert(target, label, anchor);
      append5(label, span0);
      append5(span0, input);
      input.checked = /*allowUnknownValues*/
      ctx[3];
      append5(span0, t0);
      append5(label, t1);
      append5(label, span1);
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*input_change_handler*/
          ctx[14]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*allowUnknownValues*/
      8) {
        input.checked = /*allowUnknownValues*/
        ctx2[3];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(label);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot_7(ctx) {
  let select;
  let option0;
  let option1;
  let t2;
  let if_block1_anchor;
  let mounted;
  let dispose;
  let if_block0 = (
    /*is_multi*/
    ctx[8] && create_if_block_5(ctx)
  );
  let if_block1 = (
    /*showAllowUnknownValuesOption*/
    ctx[9] && create_if_block_4(ctx)
  );
  return {
    c() {
      select = element("select");
      option0 = element("option");
      option0.textContent = "Static";
      option1 = element("option");
      option1.textContent = "Notes";
      if (if_block0)
        if_block0.c();
      t2 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty4();
      option0.__value = "fixed";
      set_input_value(option0, option0.__value);
      option1.__value = "notes";
      set_input_value(option1, option1.__value);
      attr(
        select,
        "id",
        /*id*/
        ctx[11]
      );
      if (
        /*source*/
        ctx[0] === void 0
      )
        add_render_callback(() => (
          /*select_change_handler*/
          ctx[13].call(select)
        ));
    },
    m(target, anchor) {
      insert(target, select, anchor);
      append5(select, option0);
      append5(select, option1);
      if (if_block0)
        if_block0.m(select, null);
      select_option(
        select,
        /*source*/
        ctx[0],
        true
      );
      insert(target, t2, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*select_change_handler*/
          ctx[13]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*is_multi*/
        ctx2[8]
      ) {
        if (if_block0) {
        } else {
          if_block0 = create_if_block_5(ctx2);
          if_block0.c();
          if_block0.m(select, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & /*id*/
      2048) {
        attr(
          select,
          "id",
          /*id*/
          ctx2[11]
        );
      }
      if (dirty & /*source*/
      1) {
        select_option(
          select,
          /*source*/
          ctx2[0]
        );
      }
      if (
        /*showAllowUnknownValuesOption*/
        ctx2[9]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_4(ctx2);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(select);
        detach(t2);
        detach(if_block1_anchor);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_3(ctx) {
  let inputbuilderdataview;
  let updating_value;
  let current;
  function inputbuilderdataview_value_binding(value) {
    ctx[23](value);
  }
  let inputbuilderdataview_props = {
    index: (
      /*index*/
      ctx[5]
    ),
    app: (
      /*app*/
      ctx[6]
    )
  };
  if (
    /*query*/
    ctx[1] !== void 0
  ) {
    inputbuilderdataview_props.value = /*query*/
    ctx[1];
  }
  inputbuilderdataview = new inputBuilderDataview_default({ props: inputbuilderdataview_props });
  binding_callbacks.push(() => bind3(inputbuilderdataview, "value", inputbuilderdataview_value_binding));
  return {
    c() {
      create_component(inputbuilderdataview.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputbuilderdataview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const inputbuilderdataview_changes = {};
      if (dirty & /*index*/
      32)
        inputbuilderdataview_changes.index = /*index*/
        ctx2[5];
      if (dirty & /*app*/
      64)
        inputbuilderdataview_changes.app = /*app*/
        ctx2[6];
      if (!updating_value && dirty & /*query*/
      2) {
        updating_value = true;
        inputbuilderdataview_changes.value = /*query*/
        ctx2[1];
        add_flush_callback(() => updating_value = false);
      }
      inputbuilderdataview.$set(inputbuilderdataview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputbuilderdataview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputbuilderdataview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inputbuilderdataview, detaching);
    }
  };
}
function create_if_block_2(ctx) {
  let inputfolder;
  let updating_folder;
  let current;
  function inputfolder_folder_binding(value) {
    ctx[22](value);
  }
  let inputfolder_props = {
    index: (
      /*index*/
      ctx[5]
    ),
    notifyChange: (
      /*notifyChange*/
      ctx[7]
    )
  };
  if (
    /*folder*/
    ctx[2] !== void 0
  ) {
    inputfolder_props.folder = /*folder*/
    ctx[2];
  }
  inputfolder = new InputFolder_default({ props: inputfolder_props });
  binding_callbacks.push(() => bind3(inputfolder, "folder", inputfolder_folder_binding));
  return {
    c() {
      create_component(inputfolder.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputfolder, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const inputfolder_changes = {};
      if (dirty & /*index*/
      32)
        inputfolder_changes.index = /*index*/
        ctx2[5];
      if (dirty & /*notifyChange*/
      128)
        inputfolder_changes.notifyChange = /*notifyChange*/
        ctx2[7];
      if (!updating_folder && dirty & /*folder*/
      4) {
        updating_folder = true;
        inputfolder_changes.folder = /*folder*/
        ctx2[2];
        add_flush_callback(() => updating_folder = false);
      }
      inputfolder.$set(inputfolder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputfolder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputfolder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inputfolder, detaching);
    }
  };
}
function create_if_block2(ctx) {
  let formrow;
  let current;
  formrow = new FormRow_default({
    props: {
      label: "Options",
      id: (
        /*options_id*/
        ctx[10]
      ),
      $$slots: { default: [create_default_slot2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(formrow.$$.fragment);
    },
    m(target, anchor) {
      mount_component(formrow, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const formrow_changes = {};
      if (dirty & /*options_id*/
      1024)
        formrow_changes.id = /*options_id*/
        ctx2[10];
      if (dirty & /*$$scope, options, options_id, notifyChange, is_multi*/
      536872336) {
        formrow_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow.$set(formrow_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(formrow.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(formrow.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(formrow, detaching);
    }
  };
}
function create_default_slot_6(ctx) {
  let button;
  let button_disabled_value;
  let setIcon_action;
  let mounted;
  let dispose;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[16](
        /*idx*/
        ctx[27]
      )
    );
  }
  return {
    c() {
      button = element("button");
      attr(button, "type", "button");
      button.disabled = button_disabled_value = /*idx*/
      ctx[27] === 0;
      attr(button, "class", "svelte-15a6dqv");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(setIcon_action = import_obsidian12.setIcon.call(null, button, "arrow-up")),
          listen(button, "click", click_handler_1)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_default_slot_5(ctx) {
  let button;
  let button_disabled_value;
  let setIcon_action;
  let mounted;
  let dispose;
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[17](
        /*idx*/
        ctx[27]
      )
    );
  }
  return {
    c() {
      var _a;
      button = element("button");
      attr(button, "type", "button");
      button.disabled = button_disabled_value = /*idx*/
      ctx[27] === /*options*/
      ((_a = ctx[4]) == null ? void 0 : _a.length) - 1;
      attr(button, "class", "svelte-15a6dqv");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(setIcon_action = import_obsidian12.setIcon.call(null, button, "arrow-down")),
          listen(button, "click", click_handler_2)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      var _a;
      ctx = new_ctx;
      if (dirty & /*options*/
      16 && button_disabled_value !== (button_disabled_value = /*idx*/
      ctx[27] === /*options*/
      ((_a = ctx[4]) == null ? void 0 : _a.length) - 1)) {
        button.disabled = button_disabled_value;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_else_block2(ctx) {
  let formrow0;
  let formrow1;
  let current;
  formrow0 = new FormRow_default({
    props: {
      label: "Label",
      id: (
        /*label_id*/
        ctx[28]
      ),
      $$slots: { default: [create_default_slot_4] },
      $$scope: { ctx }
    }
  });
  formrow1 = new FormRow_default({
    props: {
      label: "Value",
      id: (
        /*value_id*/
        ctx[25]
      ),
      $$slots: { default: [create_default_slot_3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(formrow0.$$.fragment);
      create_component(formrow1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(formrow0, target, anchor);
      mount_component(formrow1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const formrow0_changes = {};
      if (dirty & /*options_id*/
      1024)
        formrow0_changes.id = /*label_id*/
        ctx2[28];
      if (dirty & /*$$scope, options_id, options*/
      536871952) {
        formrow0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow0.$set(formrow0_changes);
      const formrow1_changes = {};
      if (dirty & /*options_id*/
      1024)
        formrow1_changes.id = /*value_id*/
        ctx2[25];
      if (dirty & /*$$scope, options_id, options*/
      536871952) {
        formrow1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow1.$set(formrow1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(formrow0.$$.fragment, local);
      transition_in(formrow1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(formrow0.$$.fragment, local);
      transition_out(formrow1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(formrow0, detaching);
      destroy_component(formrow1, detaching);
    }
  };
}
function create_if_block_1(ctx) {
  let formrow;
  let current;
  formrow = new FormRow_default({
    props: {
      label: "Value",
      id: (
        /*value_id*/
        ctx[25]
      ),
      $$slots: { default: [create_default_slot_2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(formrow.$$.fragment);
    },
    m(target, anchor) {
      mount_component(formrow, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const formrow_changes = {};
      if (dirty & /*options_id*/
      1024)
        formrow_changes.id = /*value_id*/
        ctx2[25];
      if (dirty & /*$$scope, options_id, options*/
      536871952) {
        formrow_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow.$set(formrow_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(formrow.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(formrow.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(formrow, detaching);
    }
  };
}
function create_default_slot_4(ctx) {
  let input;
  let input_id_value;
  let mounted;
  let dispose;
  function input_input_handler_1() {
    ctx[19].call(
      input,
      /*each_value*/
      ctx[26],
      /*idx*/
      ctx[27]
    );
  }
  return {
    c() {
      input = element("input");
      attr(input, "type", "text");
      attr(input, "placeholder", "Label");
      attr(input, "id", input_id_value = /*label_id*/
      ctx[28]);
    },
    m(target, anchor) {
      insert(target, input, anchor);
      set_input_value(
        input,
        /*option*/
        ctx[24].label
      );
      if (!mounted) {
        dispose = listen(input, "input", input_input_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*options_id*/
      1024 && input_id_value !== (input_id_value = /*label_id*/
      ctx[28])) {
        attr(input, "id", input_id_value);
      }
      if (dirty & /*options*/
      16 && input.value !== /*option*/
      ctx[24].label) {
        set_input_value(
          input,
          /*option*/
          ctx[24].label
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot_3(ctx) {
  let input;
  let input_id_value;
  let mounted;
  let dispose;
  function input_input_handler_2() {
    ctx[20].call(
      input,
      /*each_value*/
      ctx[26],
      /*idx*/
      ctx[27]
    );
  }
  return {
    c() {
      input = element("input");
      attr(input, "type", "text");
      attr(input, "placeholder", "Value");
      attr(input, "id", input_id_value = /*value_id*/
      ctx[25]);
    },
    m(target, anchor) {
      insert(target, input, anchor);
      set_input_value(
        input,
        /*option*/
        ctx[24].value
      );
      if (!mounted) {
        dispose = listen(input, "input", input_input_handler_2);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*options_id*/
      1024 && input_id_value !== (input_id_value = /*value_id*/
      ctx[25])) {
        attr(input, "id", input_id_value);
      }
      if (dirty & /*options*/
      16 && input.value !== /*option*/
      ctx[24].value) {
        set_input_value(
          input,
          /*option*/
          ctx[24].value
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot_2(ctx) {
  let input;
  let input_id_value;
  let mounted;
  let dispose;
  function input_input_handler() {
    ctx[18].call(
      input,
      /*each_value*/
      ctx[26],
      /*idx*/
      ctx[27]
    );
  }
  return {
    c() {
      input = element("input");
      attr(input, "type", "text");
      attr(input, "placeholder", "Value");
      attr(input, "id", input_id_value = /*value_id*/
      ctx[25]);
    },
    m(target, anchor) {
      insert(target, input, anchor);
      set_input_value(
        input,
        /*option*/
        ctx[24]
      );
      if (!mounted) {
        dispose = listen(input, "input", input_input_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*options_id*/
      1024 && input_id_value !== (input_id_value = /*value_id*/
      ctx[25])) {
        attr(input, "id", input_id_value);
      }
      if (dirty & /*options*/
      16 && input.value !== /*option*/
      ctx[24]) {
        set_input_value(
          input,
          /*option*/
          ctx[24]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot_12(ctx) {
  let button;
  let button_id_value;
  let setIcon_action;
  let mounted;
  let dispose;
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[21](
        /*idx*/
        ctx[27]
      )
    );
  }
  return {
    c() {
      button = element("button");
      attr(button, "id", button_id_value = "button" + /*value_id*/
      ctx[25]);
      attr(button, "type", "button");
      attr(button, "class", "svelte-15a6dqv");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(setIcon_action = import_obsidian12.setIcon.call(null, button, "trash")),
          listen(button, "click", click_handler_3)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*options_id*/
      1024 && button_id_value !== (button_id_value = "button" + /*value_id*/
      ctx[25])) {
        attr(button, "id", button_id_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block2(ctx) {
  let div;
  let formrow0;
  let t0;
  let formrow1;
  let t1;
  let current_block_type_index;
  let if_block;
  let t2;
  let formrow2;
  let t3;
  let current;
  formrow0 = new FormRow_default({
    props: {
      label: "Button",
      id: "button-up" + /*value_id*/
      ctx[25],
      hideLabel: true,
      $$slots: { default: [create_default_slot_6] },
      $$scope: { ctx }
    }
  });
  formrow1 = new FormRow_default({
    props: {
      label: "Button",
      id: "button-down" + /*value_id*/
      ctx[25],
      hideLabel: true,
      $$slots: { default: [create_default_slot_5] },
      $$scope: { ctx }
    }
  });
  const if_block_creators = [create_if_block_1, create_else_block2];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if ("string" == typeof /*option*/
    ctx2[24])
      return 0;
    return 1;
  }
  function select_block_ctx(ctx2, index) {
    if (index === 1)
      return get_else_ctx(ctx2);
    return ctx2;
  }
  current_block_type_index = select_block_type_1(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](select_block_ctx(ctx, current_block_type_index));
  formrow2 = new FormRow_default({
    props: {
      label: "Delete",
      id: "button" + /*value_id*/
      ctx[25],
      hideLabel: true,
      $$slots: { default: [create_default_slot_12] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(formrow0.$$.fragment);
      t0 = space();
      create_component(formrow1.$$.fragment);
      t1 = space();
      if_block.c();
      t2 = space();
      create_component(formrow2.$$.fragment);
      t3 = space();
      attr(div, "class", "modal-form flex row gap1");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(formrow0, div, null);
      append5(div, t0);
      mount_component(formrow1, div, null);
      append5(div, t1);
      if_blocks[current_block_type_index].m(div, null);
      append5(div, t2);
      mount_component(formrow2, div, null);
      append5(div, t3);
      current = true;
    },
    p(ctx2, dirty) {
      const formrow0_changes = {};
      if (dirty & /*options_id*/
      1024)
        formrow0_changes.id = "button-up" + /*value_id*/
        ctx2[25];
      if (dirty & /*$$scope*/
      536870912) {
        formrow0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow0.$set(formrow0_changes);
      const formrow1_changes = {};
      if (dirty & /*options_id*/
      1024)
        formrow1_changes.id = "button-down" + /*value_id*/
        ctx2[25];
      if (dirty & /*$$scope, options*/
      536870928) {
        formrow1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow1.$set(formrow1_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(select_block_ctx(ctx2, current_block_type_index), dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](select_block_ctx(ctx2, current_block_type_index));
          if_block.c();
        } else {
          if_block.p(select_block_ctx(ctx2, current_block_type_index), dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, t2);
      }
      const formrow2_changes = {};
      if (dirty & /*options_id*/
      1024)
        formrow2_changes.id = "button" + /*value_id*/
        ctx2[25];
      if (dirty & /*$$scope, options_id, options, notifyChange*/
      536872080) {
        formrow2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow2.$set(formrow2_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(formrow0.$$.fragment, local);
      transition_in(formrow1.$$.fragment, local);
      transition_in(if_block);
      transition_in(formrow2.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(formrow0.$$.fragment, local);
      transition_out(formrow1.$$.fragment, local);
      transition_out(if_block);
      transition_out(formrow2.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(formrow0);
      destroy_component(formrow1);
      if_blocks[current_block_type_index].d();
      destroy_component(formrow2);
    }
  };
}
function create_default_slot2(ctx) {
  let button;
  let t1;
  let each_1_anchor;
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*options*/
    ctx[4] || []
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      button = element("button");
      button.textContent = "Add more options";
      t1 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty4();
      attr(button, "type", "button");
      attr(button, "class", "svelte-15a6dqv");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      insert(target, t1, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[15]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*options_id, options, notifyChange, moveOption*/
      5264) {
        each_value = ensure_array_like(
          /*options*/
          ctx2[4] || []
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block2(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(button);
        detach(t1);
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment6(ctx) {
  let formrow;
  let t;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  formrow = new FormRow_default({
    props: {
      label: "Source",
      id: (
        /*id*/
        ctx[11]
      ),
      $$slots: { default: [create_default_slot_7] },
      $$scope: { ctx }
    }
  });
  const if_block_creators = [create_if_block2, create_if_block_2, create_if_block_3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*source*/
      ctx2[0] === "fixed"
    )
      return 0;
    if (
      /*source*/
      ctx2[0] === "notes"
    )
      return 1;
    if (
      /*source*/
      ctx2[0] === "dataview"
    )
      return 2;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx, -1))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      create_component(formrow.$$.fragment);
      t = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty4();
    },
    m(target, anchor) {
      mount_component(formrow, target, anchor);
      insert(target, t, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const formrow_changes = {};
      if (dirty & /*id*/
      2048)
        formrow_changes.id = /*id*/
        ctx2[11];
      if (dirty & /*$$scope, allowUnknownValues, showAllowUnknownValuesOption, id, source, is_multi*/
      536873737) {
        formrow_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow.$set(formrow_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(formrow.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(formrow.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(if_block_anchor);
      }
      destroy_component(formrow, detaching);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
    }
  };
}
function instance6($$self, $$props, $$invalidate) {
  let id;
  let options_id;
  let showAllowUnknownValuesOption;
  let { index } = $$props;
  let { source = "fixed" } = $$props;
  let { query = "" } = $$props;
  let { folder } = $$props;
  let { allowUnknownValues = false } = $$props;
  let { options = [] } = $$props;
  let { app: app2 } = $$props;
  let { notifyChange } = $$props;
  let { is_multi } = $$props;
  function moveOption(from, direction) {
    const to = direction === "up" ? from - 1 : from + 1;
    if (to < 0 || to >= options.length)
      return;
    const tmp = options[from];
    const target = options[to];
    if (!target || !tmp)
      return;
    $$invalidate(4, options[from] = target, options);
    $$invalidate(4, options[to] = tmp, options);
    $$invalidate(4, options);
    notifyChange();
  }
  function select_change_handler() {
    source = select_value(this);
    $$invalidate(0, source);
  }
  function input_change_handler() {
    allowUnknownValues = this.checked;
    $$invalidate(3, allowUnknownValues);
  }
  const click_handler = () => {
    if (is_multi) {
      options == null ? void 0 : options.push("");
    } else {
      options == null ? void 0 : options.push({ value: "", label: "" });
    }
    $$invalidate(4, options);
    notifyChange();
  };
  const click_handler_1 = (idx) => moveOption(idx, "up");
  const click_handler_2 = (idx) => moveOption(idx, "down");
  function input_input_handler(each_value, idx) {
    each_value[idx] = this.value;
    $$invalidate(4, options);
  }
  function input_input_handler_1(each_value, idx) {
    each_value[idx].label = this.value;
    $$invalidate(4, options);
  }
  function input_input_handler_2(each_value, idx) {
    each_value[idx].value = this.value;
    $$invalidate(4, options);
  }
  const click_handler_3 = (idx) => {
    $$invalidate(4, options = options == null ? void 0 : options.filter((_, i) => i !== idx));
    notifyChange();
  };
  function inputfolder_folder_binding(value) {
    folder = value;
    $$invalidate(2, folder);
  }
  function inputbuilderdataview_value_binding(value) {
    query = value;
    $$invalidate(1, query);
  }
  $$self.$$set = ($$props2) => {
    if ("index" in $$props2)
      $$invalidate(5, index = $$props2.index);
    if ("source" in $$props2)
      $$invalidate(0, source = $$props2.source);
    if ("query" in $$props2)
      $$invalidate(1, query = $$props2.query);
    if ("folder" in $$props2)
      $$invalidate(2, folder = $$props2.folder);
    if ("allowUnknownValues" in $$props2)
      $$invalidate(3, allowUnknownValues = $$props2.allowUnknownValues);
    if ("options" in $$props2)
      $$invalidate(4, options = $$props2.options);
    if ("app" in $$props2)
      $$invalidate(6, app2 = $$props2.app);
    if ("notifyChange" in $$props2)
      $$invalidate(7, notifyChange = $$props2.notifyChange);
    if ("is_multi" in $$props2)
      $$invalidate(8, is_multi = $$props2.is_multi);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*index*/
    32) {
      $:
        $$invalidate(11, id = `builder_select_${index}`);
    }
    if ($$self.$$.dirty & /*index*/
    32) {
      $:
        $$invalidate(10, options_id = `builder_select_options_btn_${index}`);
    }
    if ($$self.$$.dirty & /*is_multi, source*/
    257) {
      $:
        $$invalidate(9, showAllowUnknownValuesOption = is_multi && canAllowUnknownValues("multiselect", source));
    }
  };
  return [
    source,
    query,
    folder,
    allowUnknownValues,
    options,
    index,
    app2,
    notifyChange,
    is_multi,
    showAllowUnknownValuesOption,
    options_id,
    id,
    moveOption,
    select_change_handler,
    input_change_handler,
    click_handler,
    click_handler_1,
    click_handler_2,
    input_input_handler,
    input_input_handler_1,
    input_input_handler_2,
    click_handler_3,
    inputfolder_folder_binding,
    inputbuilderdataview_value_binding
  ];
}
var InputBuilderSelect = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(
      this,
      options,
      instance6,
      create_fragment6,
      safe_not_equal,
      {
        index: 5,
        source: 0,
        query: 1,
        folder: 2,
        allowUnknownValues: 3,
        options: 4,
        app: 6,
        notifyChange: 7,
        is_multi: 8
      },
      add_css5
    );
  }
};
var InputBuilderSelect_default = InputBuilderSelect;

// src/views/components/Toggle.svelte
function create_fragment7(ctx) {
  let div;
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      input = element("input");
      attr(input, "type", "checkbox");
      attr(
        input,
        "tabindex",
        /*tabindex*/
        ctx[1]
      );
      attr(div, "class", "checkbox-container");
      attr(div, "role", "checkbox");
      toggle_class(
        div,
        "is-enabled",
        /*checked*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, input);
      input.checked = /*checked*/
      ctx[0];
      if (!mounted) {
        dispose = [
          listen(
            input,
            "change",
            /*input_change_handler*/
            ctx[3]
          ),
          listen(
            div,
            "click",
            /*handleChange*/
            ctx[2]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*tabindex*/
      2) {
        attr(
          input,
          "tabindex",
          /*tabindex*/
          ctx2[1]
        );
      }
      if (dirty & /*checked*/
      1) {
        input.checked = /*checked*/
        ctx2[0];
      }
      if (dirty & /*checked*/
      1) {
        toggle_class(
          div,
          "is-enabled",
          /*checked*/
          ctx2[0]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance7($$self, $$props, $$invalidate) {
  let { checked = false } = $$props;
  let { tabindex = 0 } = $$props;
  function handleChange() {
    $$invalidate(0, checked = !checked);
  }
  function input_change_handler() {
    checked = this.checked;
    $$invalidate(0, checked);
  }
  $$self.$$set = ($$props2) => {
    if ("checked" in $$props2)
      $$invalidate(0, checked = $$props2.checked);
    if ("tabindex" in $$props2)
      $$invalidate(1, tabindex = $$props2.tabindex);
  };
  return [checked, tabindex, handleChange, input_change_handler];
}
var Toggle = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance7, create_fragment7, safe_not_equal, { checked: 0, tabindex: 1 });
  }
};
var Toggle_default = Toggle;

// node_modules/parser-ts/es6/ParseResult.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var success = function(value, next, start) {
  return right3({
    value,
    next,
    start
  });
};
var error = function(input, expected2, fatal) {
  if (expected2 === void 0) {
    expected2 = [];
  }
  if (fatal === void 0) {
    fatal = false;
  }
  return left3({
    input,
    expected: expected2,
    fatal
  });
};
var withExpected = function(err, expected2) {
  return __assign(__assign({}, err), { expected: expected2 });
};
var extend2 = function(err1, err2) {
  return getSemigroup4().concat(err1, err2);
};
var getSemigroup4 = function() {
  return {
    concat: function(x, y) {
      if (x.input.cursor < y.input.cursor)
        return last().concat(x, y);
      if (x.input.cursor > y.input.cursor)
        return first().concat(x, y);
      return struct({
        input: first(),
        fatal: first(),
        expected: getMonoid2()
      }).concat(x, y);
    }
  };
};

// node_modules/parser-ts/es6/Stream.js
var stream = function(buffer, cursor) {
  if (cursor === void 0) {
    cursor = 0;
  }
  return {
    buffer,
    cursor
  };
};
var get2 = function(s) {
  return lookup2(s.cursor, s.buffer);
};
var atEnd = function(s) {
  return s.cursor >= s.buffer.length;
};
var getAndNext = function(s) {
  return pipe(get2(s), map4(function(a) {
    return { value: a, next: { buffer: s.buffer, cursor: s.cursor + 1 } };
  }));
};

// node_modules/parser-ts/es6/Parser.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var succeed = function(a) {
  return function(i) {
    return success(a, i, i);
  };
};
var fail = function() {
  return function(i) {
    return error(i);
  };
};
var failAt = function(i) {
  return function() {
    return error(i);
  };
};
var sat = function(predicate) {
  return pipe(withStart(item()), chain4(function(_a) {
    var a = _a[0], start = _a[1];
    return predicate(a) ? of6(a) : failAt(start);
  }));
};
var expected = function(p, message) {
  return function(i) {
    return pipe(p(i), mapLeft(function(err) {
      return withExpected(err, [message]);
    }));
  };
};
var item = function() {
  return function(i) {
    return pipe(getAndNext(i), fold2(function() {
      return error(i);
    }, function(_a) {
      var value = _a.value, next = _a.next;
      return success(value, next, i);
    }));
  };
};
var seq = function(fa, f) {
  return function(i) {
    return pipe(fa(i), chain2(function(s) {
      return pipe(f(s.value)(s.next), chain2(function(next) {
        return success(next.value, next.next, i);
      }));
    }));
  };
};
var either = function(p, f) {
  return function(i) {
    var e = p(i);
    if (isRight2(e)) {
      return e;
    }
    if (e.left.fatal) {
      return e;
    }
    return pipe(f()(i), mapLeft(function(err) {
      return extend2(e.left, err);
    }));
  };
};
var withStart = function(p) {
  return function(i) {
    return pipe(p(i), map3(function(s) {
      return __assign2(__assign2({}, s), { value: [s.value, i] });
    }));
  };
};
var maybe = function(M) {
  return alt4(function() {
    return of6(M.empty);
  });
};
var eof = function() {
  return expected(function(i) {
    return atEnd(i) ? success(void 0, i, i) : error(i);
  }, "end of file");
};
var many = function(p) {
  return pipe(many1(p), alt4(function() {
    return of6([]);
  }));
};
var many1 = function(parser) {
  return pipe(parser, chain4(function(head6) {
    return chainRec_(of2(head6), function(acc) {
      return pipe(parser, map9(function(a) {
        return left3(append4(a)(acc));
      }), alt4(function() {
        return of6(right3(acc));
      }));
    });
  }));
};
var sepBy = function(sep, p) {
  var nil = of6([]);
  return pipe(sepBy1(sep, p), alt4(function() {
    return nil;
  }));
};
var sepBy1 = function(sep, p) {
  return pipe(p, chain4(function(head6) {
    return pipe(many(pipe(sep, apSecond3(p))), map9(function(tail5) {
      return prepend3(head6)(tail5);
    }));
  }));
};
var between = function(left6, right6) {
  return function(p) {
    return pipe(left6, chain4(function() {
      return p;
    }), chainFirst3(function() {
      return right6;
    }));
  };
};
var surroundedBy = function(bound) {
  return between(bound, bound);
};
var lookAhead = function(p) {
  return function(i) {
    return pipe(p(i), chain2(function(next) {
      return success(next.value, i, i);
    }));
  };
};
var optional2 = function(parser) {
  return pipe(parser, map9(some3), alt4(function() {
    return succeed(none2);
  }));
};
var many1Till = function(parser, terminator) {
  return pipe(parser, chain4(function(x) {
    return chainRec_(of(x), function(acc) {
      return pipe(terminator, map9(function() {
        return right3(acc);
      }), alt4(function() {
        return pipe(parser, map9(function(a) {
          return left3(append3(a)(acc));
        }));
      }));
    });
  }));
};
var map_ = function(ma, f) {
  return function(i) {
    return pipe(ma(i), map3(function(s) {
      return __assign2(__assign2({}, s), { value: f(s.value) });
    }));
  };
};
var ap_ = function(mab, ma) {
  return chain_(mab, function(f) {
    return map_(ma, f);
  });
};
var chain_ = function(ma, f) {
  return seq(ma, f);
};
var chainRec_ = function(a, f) {
  var split2 = function(start) {
    return function(result2) {
      return isLeft2(result2.value) ? left3({ value: result2.value.left, stream: result2.next }) : right3(success(result2.value.right, result2.next, start));
    };
  };
  return function(start) {
    return tailRec({ value: a, stream: start }, function(state) {
      var result2 = f(state.value)(state.stream);
      if (isLeft2(result2)) {
        return right3(error(state.stream, result2.left.expected, result2.left.fatal));
      }
      return split2(start)(result2.right);
    });
  };
};
var alt_ = function(fa, that) {
  return either(fa, that);
};
var map9 = function(f) {
  return function(fa) {
    return map_(fa, f);
  };
};
var apFirst3 = function(fb) {
  return function(fa) {
    return ap_(map_(fa, function(a) {
      return function() {
        return a;
      };
    }), fb);
  };
};
var apSecond3 = function(fb) {
  return function(fa) {
    return ap_(map_(fa, function() {
      return function(b) {
        return b;
      };
    }), fb);
  };
};
var of6 = succeed;
var chain4 = function(f) {
  return function(ma) {
    return chain_(ma, f);
  };
};
var chainFirst3 = function(f) {
  return function(ma) {
    return chain_(ma, function(a) {
      return map_(f(a), function() {
        return a;
      });
    });
  };
};
var alt4 = function(that) {
  return function(fa) {
    return alt_(fa, that);
  };
};
var URI6 = "Parser";
var getSemigroup5 = function(S) {
  return {
    concat: function(x, y) {
      return ap_(map_(x, function(x2) {
        return function(y2) {
          return S.concat(x2, y2);
        };
      }), y);
    }
  };
};
var getMonoid4 = function(M) {
  return __assign2(__assign2({}, getSemigroup5(M)), { empty: succeed(M.empty) });
};
var ChainRec = {
  URI: URI6,
  map: map_,
  ap: ap_,
  chain: chain_,
  chainRec: chainRec_
};

// node_modules/parser-ts/es6/char.js
var maybe2 = maybe(Monoid);
var char = function(c) {
  return expected(sat(function(s) {
    return s === c;
  }), '"'.concat(c, '"'));
};
var notChar = function(c) {
  return expected(sat(function(c1) {
    return c1 !== c;
  }), 'anything but "'.concat(c, '"'));
};
var many2 = function(parser) {
  return maybe2(many12(parser));
};
var many12 = function(parser) {
  return pipe(many1(parser), map9(function(nea) {
    return nea.join("");
  }));
};
var isDigit = function(c) {
  return "0123456789".indexOf(c) !== -1;
};
var digit = expected(sat(isDigit), "a digit");
var spaceRe = /^\s$/;
var isSpace = function(c) {
  return spaceRe.test(c);
};
var space2 = expected(sat(isSpace), "a whitespace");
var isUnderscore = function(c) {
  return c === "_";
};
var isLetter = function(c) {
  return /[a-z]/.test(c.toLowerCase());
};
var isAlphanum = function(c) {
  return isLetter(c) || isDigit(c) || isUnderscore(c);
};
var alphanum = expected(sat(isAlphanum), "a word character");
var letter = expected(sat(isLetter), "a letter");
var isUnicodeLetter = function(c) {
  return c.toLowerCase() !== c.toUpperCase();
};
var unicodeLetter = expected(sat(isUnicodeLetter), "an unicode letter");
var isUpper = function(c) {
  return isLetter(c) && c === c.toUpperCase();
};
var upper = expected(sat(isUpper), "an upper case letter");
var isLower = function(c) {
  return isLetter(c) && c === c.toLowerCase();
};
var lower = expected(sat(isLower), "a lower case letter");
var notDigit = expected(sat(not(isDigit)), "a non-digit");
var notSpace = expected(sat(not(isSpace)), "a non-whitespace character");
var notAlphanum = expected(sat(not(isAlphanum)), "a non-word character");
var notLetter = expected(sat(not(isLetter)), "a non-letter character");
var notUpper = expected(sat(not(isUpper)), "anything but an upper case letter");
var notLower = expected(sat(not(isLower)), "anything but a lower case letter");

// node_modules/fp-ts/es6/Monoid.js
var concatAll5 = function(M) {
  return concatAll2(M)(M.empty);
};
var monoidVoid = {
  concat: semigroupVoid.concat,
  empty: void 0
};
var monoidAll = {
  concat: semigroupAll.concat,
  empty: true
};
var monoidAny = {
  concat: semigroupAny.concat,
  empty: false
};
var monoidString = {
  concat: semigroupString.concat,
  empty: ""
};
var monoidSum = {
  concat: semigroupSum.concat,
  empty: 0
};
var monoidProduct = {
  concat: semigroupProduct.concat,
  empty: 1
};

// node_modules/parser-ts/es6/string.js
var string2 = function(s) {
  return expected(ChainRec.chainRec(s, function(acc) {
    return pipe(charAt(0, acc), fold2(function() {
      return of6(right3(s));
    }, function(c) {
      return pipe(char(c), chain4(function() {
        return of6(left3(acc.slice(1)));
      }));
    }));
  }), JSON.stringify(s));
};
var fold3 = concatAll5(getMonoid4(Monoid));
var maybe3 = maybe(Monoid);
var many3 = function(parser) {
  return maybe3(many13(parser));
};
var many13 = function(parser) {
  return pipe(many1(parser), map9(function(nea) {
    return nea.join("");
  }));
};
var charAt = function(index, s) {
  return index >= 0 && index < s.length ? some3(s.charAt(index)) : none2;
};
var spaces = many2(space2);
var spaces1 = many12(space2);
var notSpaces = many2(notSpace);
var notSpaces1 = many12(notSpace);
var fromString = function(s) {
  var n = +s;
  return isNaN(n) || s === "" ? none2 : some3(n);
};
var int = expected(pipe(fold3([maybe3(char("-")), many12(digit)]), map9(function(s) {
  return +s;
})), "an integer");
var float = expected(pipe(fold3([maybe3(char("-")), many2(digit), maybe3(fold3([char("."), many12(digit)]))]), chain4(function(s) {
  return pipe(fromString(s), fold2(function() {
    return fail();
  }, succeed));
})), "a float");
var doubleQuotedString = surroundedBy(char('"'))(many3(either(string2('\\"'), function() {
  return notChar('"');
})));
function run2(string3) {
  return function(p) {
    return p(stream(string3.split("")));
  };
}

// src/core/template/templateParser.ts
var import_obsidian13 = require("obsidian");
function TemplateText(value) {
  return { _tag: "text", value };
}
function TemplateVariable(value) {
  return { _tag: "variable", value };
}
function FrontmatterCommand(pick = [], omit = []) {
  return { _tag: "frontmatter-command", pick, omit };
}
var EofStr = pipe2(
  eof(),
  map9(() => "")
);
var open = fold3([string2("{{"), spaces]);
var close = expected(fold3([spaces, string2("}}")]), 'closing variable tag: "}}"');
var identifier = many13(alphanum);
var templateIdentifier = pipe2(
  identifier,
  between(open, close),
  map9(TemplateVariable)
);
var commandOpen = fold3([string2("{#"), spaces]);
var commandClose = expected(fold3([spaces, string2("#}")]), 'a closing command tag: "#}"');
var sepByComma = sepBy(fold3([char(","), spaces]), identifier);
var commandOptionParser = (option) => pipe2(
  fold3([string2(option), spaces]),
  // dam prettier
  apSecond3(sepByComma)
);
var frontmatterCommandParser = pipe2(
  fold3([string2("frontmatter"), spaces]),
  apSecond3(optional2(commandOptionParser("pick:")))
  //P.apFirst(S.spaces),
  // P.chain(commandOptionParser("pick:")),
);
var commandParser = pipe2(
  frontmatterCommandParser,
  between(commandOpen, commandClose),
  map9((value) => {
    return pipe2(
      value,
      O.fold(() => [], identity),
      FrontmatterCommand
    );
  })
);
var OpenOrEof = pipe2(
  open,
  alt4(() => commandOpen),
  alt4(() => EofStr)
);
var anythingUntilOpenOrEOF = many1Till(item(), lookAhead(OpenOrEof));
var text2 = pipe2(
  anythingUntilOpenOrEOF,
  map9((value) => TemplateText(value.join("")))
);
var TextOrVariable = pipe2(
  templateIdentifier,
  alt4(() => commandParser),
  alt4(() => text2)
);
var Template = pipe2(
  many(TextOrVariable),
  // dam prettier
  apFirst3(eof())
);
function parseTemplate(template) {
  return pipe2(
    Template,
    run2(template),
    fold(
      ({ expected: expected2 }) => left3(`Expected ${expected2.join(" or ")}`),
      (result2) => right3(result2.value)
    )
  );
}
function templateVariables(parsedTemplate) {
  return pipe2(
    parsedTemplate,
    fold(
      () => [],
      filterMap((token) => {
        if (token._tag === "variable") {
          return O.some(token.value);
        }
        return O.none;
      })
    )
  );
}
function templateError(parsedTemplate) {
  return pipe2(
    parsedTemplate,
    fold(
      (error2) => error2,
      () => void 0
    )
  );
}
function tokenToString(token) {
  const tag = token._tag;
  switch (tag) {
    case "text":
      return token.value;
    case "variable":
      return `{{${token.value}}}`;
    case "frontmatter-command":
      return `{{# frontmatter pick: ${token.pick.join(", ")}, omit: ${token.omit.join(
        ", "
      )} #}}`;
    default:
      return absurd(tag);
  }
}
function matchToken(onText, onVariable, onCommand) {
  return (token) => {
    switch (token._tag) {
      case "text":
        return onText(token.value);
      case "variable":
        return onVariable(token.value);
      case "frontmatter-command":
        return onCommand(token);
      default:
        return absurd(token);
    }
  };
}
function parsedTemplateToString(parsedTemplate) {
  return pipe2(
    // prettier shut up
    parsedTemplate,
    foldMap3(Monoid)(tokenToString)
  );
}
function asFrontmatterString(data) {
  return ({ pick, omit }) => pipe2(
    data,
    filterMapWithIndex3((key, value) => {
      if (pick.length === 0)
        return O.some(value);
      return pick.includes(key) ? O.some(value) : O.none;
    }),
    filterMapWithIndex3((key, value) => !omit.includes(key) ? O.some(value) : O.none),
    import_obsidian13.stringifyYaml
  );
}
function executeTemplate(parsedTemplate, formData) {
  const toFrontmatter = asFrontmatterString(formData);
  return pipe2(
    parsedTemplate,
    filterMap(
      matchToken(
        O.some,
        (key) => O.fromNullable(formData[key]),
        (command) => pipe2(
          //prettier
          command,
          toFrontmatter,
          O.some
        )
      )
    ),
    foldMap3(Monoid)(String)
  );
}

// src/views/components/TemplateEditor.svelte
function add_css6(target) {
  append_styles(target, "svelte-1daddci", ".fields-list.svelte-1daddci{padding-top:1rem}textarea.svelte-1daddci{font-family:var(--font-family-monospace);width:100%}");
}
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i];
  return child_ctx;
}
function create_default_slot_13(ctx) {
  let t;
  return {
    c() {
      t = text(
        /*exampleText*/
        ctx[5]
      );
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(t);
      }
    }
  };
}
function create_each_block3(ctx) {
  let li;
  let code;
  let t0_value = (
    /*field*/
    ctx[11] + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*usedVariables*/
    ctx[4].includes(
      /*field*/
      ctx[11]
    ) ? "\u2705" : ""
  );
  let t2;
  let t3;
  return {
    c() {
      li = element("li");
      code = element("code");
      t0 = text(t0_value);
      t1 = space();
      t2 = text(t2_value);
      t3 = space();
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append5(li, code);
      append5(code, t0);
      append5(li, t1);
      append5(li, t2);
      append5(li, t3);
    },
    p(ctx2, dirty) {
      if (dirty & /*fieldNames*/
      4 && t0_value !== (t0_value = /*field*/
      ctx2[11] + ""))
        set_data(t0, t0_value);
      if (dirty & /*usedVariables, fieldNames*/
      20 && t2_value !== (t2_value = /*usedVariables*/
      ctx2[4].includes(
        /*field*/
        ctx2[11]
      ) ? "\u2705" : ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching) {
        detach(li);
      }
    }
  };
}
function create_if_block3(ctx) {
  let div1;
  let div0;
  let t1;
  let code;
  let current;
  code = new Code_default({
    props: {
      $$slots: { default: [create_default_slot3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      div0.textContent = "The template is invalid:";
      t1 = space();
      create_component(code.$$.fragment);
      attr(div0, "class", "invalid");
      attr(div1, "class", "error-wrapper");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append5(div1, div0);
      append5(div1, t1);
      mount_component(code, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      const code_changes = {};
      if (dirty & /*$$scope, templateErrorMessage*/
      16392) {
        code_changes.$$scope = { dirty, ctx: ctx2 };
      }
      code.$set(code_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(code.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(code.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(code);
    }
  };
}
function create_default_slot3(ctx) {
  let t;
  return {
    c() {
      t = text(
        /*templateErrorMessage*/
        ctx[3]
      );
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*templateErrorMessage*/
      8)
        set_data(
          t,
          /*templateErrorMessage*/
          ctx2[3]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
    }
  };
}
function create_fragment8(ctx) {
  let h6;
  let t0;
  let t1;
  let t2;
  let p;
  let t3;
  let code0;
  let t5;
  let t6;
  let div1;
  let div0;
  let t8;
  let code1;
  let t9;
  let button;
  let t10;
  let button_disabled_value;
  let t11;
  let div2;
  let t12;
  let ul;
  let t13;
  let textarea;
  let textarea_rows_value;
  let t14;
  let if_block_anchor;
  let current;
  let mounted;
  let dispose;
  code1 = new Code_default({
    props: {
      $$slots: { default: [create_default_slot_13] },
      $$scope: { ctx }
    }
  });
  let each_value = ensure_array_like(
    /*fieldNames*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block3(get_each_context3(ctx, each_value, i));
  }
  let if_block = (
    /*templateErrorMessage*/
    ctx[3] && create_if_block3(ctx)
  );
  return {
    c() {
      h6 = element("h6");
      t0 = text("Template for ");
      t1 = text(
        /*formName*/
        ctx[1]
      );
      t2 = space();
      p = element("p");
      t3 = text("Templates are used when you create a note directly from a form. You can put\n    any text you want and reference the form fields using the ");
      code0 = element("code");
      code0.textContent = `${`{{name}}`}`;
      t5 = text("\n    syntax.");
      t6 = space();
      div1 = element("div");
      div0 = element("div");
      div0.textContent = "For example:";
      t8 = space();
      create_component(code1.$$.fragment);
      t9 = space();
      button = element("button");
      t10 = text("Save template");
      t11 = space();
      div2 = element("div");
      t12 = text("Available fields:\n    ");
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t13 = space();
      textarea = element("textarea");
      t14 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty4();
      attr(button, "class", "btn btn-primary");
      button.disabled = button_disabled_value = !!/*templateErrorMessage*/
      ctx[3];
      attr(div2, "class", "fields-list svelte-1daddci");
      attr(textarea, "rows", textarea_rows_value = 10);
      attr(textarea, "class", "form-control svelte-1daddci");
      attr(textarea, "placeholder", "Enter template here");
    },
    m(target, anchor) {
      insert(target, h6, anchor);
      append5(h6, t0);
      append5(h6, t1);
      insert(target, t2, anchor);
      insert(target, p, anchor);
      append5(p, t3);
      append5(p, code0);
      append5(p, t5);
      insert(target, t6, anchor);
      insert(target, div1, anchor);
      append5(div1, div0);
      append5(div1, t8);
      mount_component(code1, div1, null);
      insert(target, t9, anchor);
      insert(target, button, anchor);
      append5(button, t10);
      insert(target, t11, anchor);
      insert(target, div2, anchor);
      append5(div2, t12);
      append5(div2, ul);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul, null);
        }
      }
      insert(target, t13, anchor);
      insert(target, textarea, anchor);
      set_input_value(
        textarea,
        /*templateString*/
        ctx[0]
      );
      insert(target, t14, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button,
            "click",
            /*handleSave*/
            ctx[6]
          ),
          listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[9]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*formName*/
      2)
        set_data(
          t1,
          /*formName*/
          ctx2[1]
        );
      const code1_changes = {};
      if (dirty & /*$$scope*/
      16384) {
        code1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      code1.$set(code1_changes);
      if (!current || dirty & /*templateErrorMessage*/
      8 && button_disabled_value !== (button_disabled_value = !!/*templateErrorMessage*/
      ctx2[3])) {
        button.disabled = button_disabled_value;
      }
      if (dirty & /*usedVariables, fieldNames*/
      20) {
        each_value = ensure_array_like(
          /*fieldNames*/
          ctx2[2]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context3(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block3(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*templateString*/
      1) {
        set_input_value(
          textarea,
          /*templateString*/
          ctx2[0]
        );
      }
      if (
        /*templateErrorMessage*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*templateErrorMessage*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block3(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(code1.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(code1.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(h6);
        detach(t2);
        detach(p);
        detach(t6);
        detach(div1);
        detach(t9);
        detach(button);
        detach(t11);
        detach(div2);
        detach(t13);
        detach(textarea);
        detach(t14);
        detach(if_block_anchor);
      }
      destroy_component(code1);
      destroy_each(each_blocks, detaching);
      if (if_block)
        if_block.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance8($$self, $$props, $$invalidate) {
  let parsedTemplate;
  let usedVariables;
  let templateErrorMessage;
  let { templateString } = $$props;
  let { formName } = $$props;
  let { fieldNames } = $$props;
  let { saveTemplate } = $$props;
  const firstField = fieldNames[0];
  const exampleText = `Example text {{${firstField}}}`;
  const handleSave = () => {
    pipe2(parsedTemplate, E.map(saveTemplate));
  };
  function textarea_input_handler() {
    templateString = this.value;
    $$invalidate(0, templateString);
  }
  $$self.$$set = ($$props2) => {
    if ("templateString" in $$props2)
      $$invalidate(0, templateString = $$props2.templateString);
    if ("formName" in $$props2)
      $$invalidate(1, formName = $$props2.formName);
    if ("fieldNames" in $$props2)
      $$invalidate(2, fieldNames = $$props2.fieldNames);
    if ("saveTemplate" in $$props2)
      $$invalidate(7, saveTemplate = $$props2.saveTemplate);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*templateString*/
    1) {
      $:
        $$invalidate(8, parsedTemplate = parseTemplate(templateString));
    }
    if ($$self.$$.dirty & /*parsedTemplate*/
    256) {
      $:
        $$invalidate(4, usedVariables = templateVariables(parsedTemplate));
    }
    if ($$self.$$.dirty & /*parsedTemplate*/
    256) {
      $:
        $$invalidate(3, templateErrorMessage = templateError(parsedTemplate));
    }
  };
  return [
    templateString,
    formName,
    fieldNames,
    templateErrorMessage,
    usedVariables,
    exampleText,
    handleSave,
    saveTemplate,
    parsedTemplate,
    textarea_input_handler
  ];
}
var TemplateEditor = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(
      this,
      options,
      instance8,
      create_fragment8,
      safe_not_equal,
      {
        templateString: 0,
        formName: 1,
        fieldNames: 2,
        saveTemplate: 7
      },
      add_css6
    );
  }
};
var TemplateEditor_default = TemplateEditor;

// src/views/components/Tabs.svelte
function add_css7(target) {
  append_styles(target, "svelte-1uurynp", '.tabs.svelte-1uurynp{display:flex;flex-direction:row;justify-content:flex-start;padding-top:0.15rem}.tab.svelte-1uurynp{background:none;cursor:pointer;font-size:1rem;color:var(--gray-700);border:none;outline:none;cursor:pointer;padding:1rem;border-radius:10px 10px 0 0;box-shadow:none;text-transform:capitalize;position:relative}.tab.svelte-1uurynp::after{position:absolute;right:-0.5px;width:1px;background-color:var(--tab-divider-color);content:" ";height:20px}button.svelte-1uurynp{appearance:none;border:none}.tab-outer.svelte-1uurynp{padding:1px 0px 3.5px;border-radius:var(--tab-radius-active)}.tab-outer.active.svelte-1uurynp{color:var(--tab-text-color-focused-active);background-color:var(--tab-background-active)}.tabs.svelte-1uurynp{background-color:var(--background-secondary)}.tab-outer.svelte-1uurynp:hover{background-color:var(--background-modifier-border) !important}');
}
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[3] = list[i];
  return child_ctx;
}
function create_each_block4(ctx) {
  let div;
  let button;
  let t0_value = (
    /*tab*/
    ctx[3] + ""
  );
  let t0;
  let t1;
  let mounted;
  let dispose;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[2](
        /*tab*/
        ctx[3]
      )
    );
  }
  return {
    c() {
      div = element("div");
      button = element("button");
      t0 = text(t0_value);
      t1 = space();
      attr(button, "class", "tab svelte-1uurynp");
      attr(div, "class", "tab-outer svelte-1uurynp");
      toggle_class(
        div,
        "active",
        /*tab*/
        ctx[3] === /*activeTab*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, button);
      append5(button, t0);
      append5(div, t1);
      if (!mounted) {
        dispose = listen(button, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*tabs*/
      2 && t0_value !== (t0_value = /*tab*/
      ctx[3] + ""))
        set_data(t0, t0_value);
      if (dirty & /*tabs, activeTab*/
      3) {
        toggle_class(
          div,
          "active",
          /*tab*/
          ctx[3] === /*activeTab*/
          ctx[0]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment9(ctx) {
  let div;
  let each_value = ensure_array_like(
    /*tabs*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "tabs svelte-1uurynp");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*tabs, activeTab*/
      3) {
        each_value = ensure_array_like(
          /*tabs*/
          ctx2[1]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block4(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance9($$self, $$props, $$invalidate) {
  let { activeTab } = $$props;
  let { tabs } = $$props;
  const click_handler = (tab) => {
    $$invalidate(0, activeTab = tab);
  };
  $$self.$$set = ($$props2) => {
    if ("activeTab" in $$props2)
      $$invalidate(0, activeTab = $$props2.activeTab);
    if ("tabs" in $$props2)
      $$invalidate(1, tabs = $$props2.tabs);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*activeTab*/
    1) {
      $:
        console.log(activeTab);
    }
  };
  return [activeTab, tabs, click_handler];
}
var Tabs = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance9, create_fragment9, safe_not_equal, { activeTab: 0, tabs: 1 }, add_css7);
  }
};
var Tabs_default = Tabs;

// src/views/components/InputBuilderDocumentBlock.svelte
function create_if_block4(ctx) {
  let t0;
  let div;
  let t1;
  return {
    c() {
      t0 = text("Your function body has errors:\n            ");
      div = element("div");
      t1 = text(
        /*errors*/
        ctx[1]
      );
      attr(div, "class", "modal-form-error-message");
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, div, anchor);
      append5(div, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*errors*/
      2)
        set_data(
          t1,
          /*errors*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
    }
  };
}
function create_default_slot4(ctx) {
  let span;
  let t0;
  let code;
  let t2;
  let pre;
  let t4;
  let textarea;
  let t5;
  let mounted;
  let dispose;
  let if_block = (
    /*errors*/
    ctx[1] && create_if_block4(ctx)
  );
  return {
    c() {
      span = element("span");
      t0 = text("This is a document block input. It is not meant to be used as a normal\n        input, instead it is to render some instructions to the user. It is\n        expected to be a function body that returns a string. Within the\n        function body, you can access the form data using the ");
      code = element("code");
      code.textContent = "form";
      t2 = text("\n        variable. For example:\n        ");
      pre = element("pre");
      pre.textContent = `${placeholder}`;
      t4 = space();
      textarea = element("textarea");
      t5 = space();
      if (if_block)
        if_block.c();
      attr(pre, "class", "language-js");
      attr(textarea, "name", "document_block");
      attr(textarea, "class", "form-control");
      attr(textarea, "rows", "3");
      attr(textarea, "placeholder", placeholder);
      attr(span, "class", "modal-form-hint");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append5(span, t0);
      append5(span, code);
      append5(span, t2);
      append5(span, pre);
      append5(span, t4);
      append5(span, textarea);
      set_input_value(
        textarea,
        /*body*/
        ctx[0]
      );
      append5(span, t5);
      if (if_block)
        if_block.m(span, null);
      if (!mounted) {
        dispose = listen(
          textarea,
          "input",
          /*textarea_input_handler*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*body*/
      1) {
        set_input_value(
          textarea,
          /*body*/
          ctx2[0]
        );
      }
      if (
        /*errors*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block4(ctx2);
          if_block.c();
          if_block.m(span, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_fragment10(ctx) {
  let formrow;
  let current;
  formrow = new FormRow_default({
    props: {
      label: "Document block",
      id: (
        /*id*/
        ctx[2]
      ),
      $$slots: { default: [create_default_slot4] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(formrow.$$.fragment);
    },
    m(target, anchor) {
      mount_component(formrow, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const formrow_changes = {};
      if (dirty & /*id*/
      4)
        formrow_changes.id = /*id*/
        ctx2[2];
      if (dirty & /*$$scope, errors, body*/
      35) {
        formrow_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow.$set(formrow_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(formrow.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(formrow.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(formrow, detaching);
    }
  };
}
var placeholder = "return `Hello ${form.name}!`";
function instance10($$self, $$props, $$invalidate) {
  let id;
  let errors;
  let { body = "" } = $$props;
  let { index } = $$props;
  function textarea_input_handler() {
    body = this.value;
    $$invalidate(0, body);
  }
  $$self.$$set = ($$props2) => {
    if ("body" in $$props2)
      $$invalidate(0, body = $$props2.body);
    if ("index" in $$props2)
      $$invalidate(3, index = $$props2.index);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*index*/
    8) {
      $:
        $$invalidate(2, id = "document_block_" + index);
    }
    if ($$self.$$.dirty & /*body*/
    1) {
      $:
        $$invalidate(1, errors = pipe2(parseFunctionBody(body), E.fold((e) => e.message, () => "")));
    }
    if ($$self.$$.dirty & /*errors*/
    2) {
      $:
        console.log(errors);
    }
  };
  return [body, errors, id, index, textarea_input_handler];
}
var InputBuilderDocumentBlock = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance10, create_fragment10, safe_not_equal, { body: 0, index: 3 });
  }
};
var InputBuilderDocumentBlock_default = InputBuilderDocumentBlock;

// src/views/FormBuilder.svelte
function add_css8(target) {
  append_styles(target, "svelte-8lqyxl", ".wrapper.svelte-8lqyxl,.body.svelte-8lqyxl{flex:1;display:flex;flex-direction:column}.wrapper.svelte-8lqyxl{max-height:100%;min-height:100%;height:100%;overflow:hidden}.body.svelte-8lqyxl{padding-top:0.5rem;overflow-y:scroll}.header.svelte-8lqyxl{box-shadow:var(--shadow-bottom) var(--divider-color);padding:1rem}@media(min-width: 100rem){.body.svelte-8lqyxl{overflow-y:hidden}.fields.svelte-8lqyxl{flex:1;height:100%}form.svelte-8lqyxl{display:flex;flex-direction:column;height:100%;overflow:hidden}}.template.svelte-8lqyxl{padding:1rem}.fields.svelte-8lqyxl{overflow-y:auto;padding:1rem}.flex.svelte-8lqyxl{display:flex}.column.svelte-8lqyxl{flex-direction:column}.gap1.svelte-8lqyxl{gap:0.5rem}.gap2.svelte-8lqyxl{gap:1rem}fieldset.svelte-8lqyxl{border:none;padding:0}.hint.svelte-8lqyxl{color:var(--color-base-70)}.error.svelte-8lqyxl{color:var(--text-error);font-weight:bold}button.svelte-8lqyxl:disabled{opacity:0.5;cursor:forbidden}@media(min-width: 58rem){.md-row.svelte-8lqyxl{flex-direction:row}}");
}
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[45] = list[i];
  child_ctx[48] = list;
  child_ctx[49] = i;
  const constants_0 = `desc_${/*index*/
  child_ctx[49]}`;
  child_ctx[46] = constants_0;
  const constants_1 = `delete_${/*index*/
  child_ctx[49]}`;
  child_ctx[47] = constants_1;
  return child_ctx;
}
function get_if_ctx(ctx) {
  const child_ctx = ctx.slice();
  const constants_0 = `min_${/*index*/
  child_ctx[49]}`;
  child_ctx[50] = constants_0;
  const constants_1 = `max_${/*index*/
  child_ctx[49]}`;
  child_ctx[51] = constants_1;
  return child_ctx;
}
function get_each_context_12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[52] = list[i];
  return child_ctx;
}
function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[55] = list[i];
  return child_ctx;
}
function create_else_block3(ctx) {
  let form;
  let fieldset0;
  let label0;
  let t1;
  let span0;
  let t3;
  let input0;
  let t4;
  let label1;
  let t6;
  let span1;
  let t8;
  let input1;
  let t9;
  let label2;
  let span2;
  let input2;
  let t12;
  let div;
  let button0;
  let t14;
  let button1;
  let t15;
  let button1_disabled_value;
  let t16;
  let button2;
  let t17;
  let button2_disabled_value;
  let t18;
  let button3;
  let t20;
  let t21;
  let fieldset1;
  let h3;
  let t23;
  let current_block_type_index;
  let if_block1;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*errors*/
    ctx[7].length > 0 && create_if_block_9(ctx)
  );
  const if_block_creators = [create_if_block_12, create_else_block_1];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*definition*/
      ctx2[0].fields.length > 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx, [-1, -1]);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      form = element("form");
      fieldset0 = element("fieldset");
      label0 = element("label");
      label0.textContent = "Form unique name";
      t1 = space();
      span0 = element("span");
      span0.textContent = "This name will identify this form uniquely, and will be the value you need\n                        to provide when calling the method openForm";
      t3 = space();
      input0 = element("input");
      t4 = space();
      label1 = element("label");
      label1.textContent = "Form title";
      t6 = space();
      span1 = element("span");
      span1.textContent = "This is the title that will be shown in the modal when the form is visible";
      t8 = space();
      input1 = element("input");
      t9 = space();
      label2 = element("label");
      label2.textContent = "Custom class Name";
      span2 = element("span");
      span2.textContent = "In case you want to add a class name to the modal form to customize it";
      input2 = element("input");
      t12 = space();
      div = element("div");
      button0 = element("button");
      button0.textContent = "Add more fields";
      t14 = space();
      button1 = element("button");
      t15 = text("Preview");
      t16 = space();
      button2 = element("button");
      t17 = text("Save and close");
      t18 = space();
      button3 = element("button");
      button3.textContent = "Cancel";
      t20 = space();
      if (if_block0)
        if_block0.c();
      t21 = space();
      fieldset1 = element("fieldset");
      h3 = element("h3");
      h3.textContent = "Fields";
      t23 = space();
      if_block1.c();
      attr(label0, "for", "name");
      attr(span0, "class", "hint svelte-8lqyxl");
      attr(input0, "type", "text");
      attr(input0, "placeholder", "Name");
      attr(input0, "id", "name");
      attr(label1, "for", "title");
      attr(span1, "class", "hint svelte-8lqyxl");
      attr(input1, "type", "text");
      attr(input1, "placeholder", "Title");
      attr(input1, "id", "title");
      attr(label2, "for", "customClassname");
      attr(span2, "class", "hint svelte-8lqyxl");
      attr(input2, "type", "text");
      attr(input2, "id", "customClassname");
      attr(button0, "type", "button");
      attr(button0, "class", "svelte-8lqyxl");
      attr(button1, "type", "button");
      button1.disabled = button1_disabled_value = !/*isValid*/
      ctx[8];
      attr(button1, "class", "svelte-8lqyxl");
      attr(button2, "class", "mod-cta svelte-8lqyxl");
      attr(button2, "type", "submit");
      button2.disabled = button2_disabled_value = !/*isValid*/
      ctx[8];
      attr(button3, "type", "button");
      attr(button3, "class", "mod-warning svelte-8lqyxl");
      attr(div, "class", "flex row gap2 svelte-8lqyxl");
      attr(fieldset0, "class", "flex column gap2 header svelte-8lqyxl");
      attr(fieldset1, "class", "flex column gap2 fields svelte-8lqyxl");
      attr(form, "class", "svelte-8lqyxl");
    },
    m(target, anchor) {
      insert(target, form, anchor);
      append5(form, fieldset0);
      append5(fieldset0, label0);
      append5(fieldset0, t1);
      append5(fieldset0, span0);
      append5(fieldset0, t3);
      append5(fieldset0, input0);
      set_input_value(
        input0,
        /*definition*/
        ctx[0].name
      );
      append5(fieldset0, t4);
      append5(fieldset0, label1);
      append5(fieldset0, t6);
      append5(fieldset0, span1);
      append5(fieldset0, t8);
      append5(fieldset0, input1);
      set_input_value(
        input1,
        /*definition*/
        ctx[0].title
      );
      append5(fieldset0, t9);
      append5(fieldset0, label2);
      append5(fieldset0, span2);
      append5(fieldset0, input2);
      set_input_value(
        input2,
        /*definition*/
        ctx[0].customClassname
      );
      append5(fieldset0, t12);
      append5(fieldset0, div);
      append5(div, button0);
      append5(div, t14);
      append5(div, button1);
      append5(button1, t15);
      append5(div, t16);
      append5(div, button2);
      append5(button2, t17);
      append5(div, t18);
      append5(div, button3);
      append5(fieldset0, t20);
      if (if_block0)
        if_block0.m(fieldset0, null);
      append5(form, t21);
      append5(form, fieldset1);
      append5(fieldset1, h3);
      append5(fieldset1, t23);
      if_blocks[current_block_type_index].m(fieldset1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input0,
            "input",
            /*input0_input_handler*/
            ctx[17]
          ),
          listen(
            input1,
            "input",
            /*input1_input_handler*/
            ctx[18]
          ),
          listen(
            input2,
            "input",
            /*input2_input_handler*/
            ctx[19]
          ),
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[20]
          ),
          listen(
            button1,
            "click",
            /*handlePreview*/
            ctx[13]
          ),
          listen(button3, "click", function() {
            if (is_function(
              /*onCancel*/
              ctx[2]
            ))
              ctx[2].apply(this, arguments);
          }),
          listen(form, "submit", prevent_default(
            /*handleSubmit*/
            ctx[11]
          ))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*definition*/
      1 && input0.value !== /*definition*/
      ctx[0].name) {
        set_input_value(
          input0,
          /*definition*/
          ctx[0].name
        );
      }
      if (dirty[0] & /*definition*/
      1 && input1.value !== /*definition*/
      ctx[0].title) {
        set_input_value(
          input1,
          /*definition*/
          ctx[0].title
        );
      }
      if (dirty[0] & /*definition*/
      1 && input2.value !== /*definition*/
      ctx[0].customClassname) {
        set_input_value(
          input2,
          /*definition*/
          ctx[0].customClassname
        );
      }
      if (!current || dirty[0] & /*isValid*/
      256 && button1_disabled_value !== (button1_disabled_value = !/*isValid*/
      ctx[8])) {
        button1.disabled = button1_disabled_value;
      }
      if (!current || dirty[0] & /*isValid*/
      256 && button2_disabled_value !== (button2_disabled_value = !/*isValid*/
      ctx[8])) {
        button2.disabled = button2_disabled_value;
      }
      if (
        /*errors*/
        ctx[7].length > 0
      ) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0 = create_if_block_9(ctx);
          if_block0.c();
          if_block0.m(fieldset0, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block1.c();
        } else {
          if_block1.p(ctx, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(fieldset1, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(form);
      }
      if (if_block0)
        if_block0.d();
      if_blocks[current_block_type_index].d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block5(ctx) {
  let div;
  let templateeditor;
  let current;
  templateeditor = new TemplateEditor_default({
    props: {
      formName: (
        /*definition*/
        ctx[0].name
      ),
      fieldNames: (
        /*fieldNames*/
        ctx[6]
      ),
      saveTemplate: (
        /*saveTemplate*/
        ctx[12]
      ),
      templateString: (
        /*definition*/
        ctx[0].template ? parsedTemplateToString(
          /*definition*/
          ctx[0].template.parsedTemplate
        ) : ""
      )
    }
  });
  return {
    c() {
      div = element("div");
      create_component(templateeditor.$$.fragment);
      attr(div, "class", "template svelte-8lqyxl");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(templateeditor, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const templateeditor_changes = {};
      if (dirty[0] & /*definition*/
      1)
        templateeditor_changes.formName = /*definition*/
        ctx2[0].name;
      if (dirty[0] & /*fieldNames*/
      64)
        templateeditor_changes.fieldNames = /*fieldNames*/
        ctx2[6];
      if (dirty[0] & /*definition*/
      1)
        templateeditor_changes.templateString = /*definition*/
        ctx2[0].template ? parsedTemplateToString(
          /*definition*/
          ctx2[0].template.parsedTemplate
        ) : "";
      templateeditor.$set(templateeditor_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(templateeditor.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(templateeditor.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(templateeditor);
    }
  };
}
function create_if_block_9(ctx) {
  let h3;
  let t2;
  let ul;
  let each_value_2 = ensure_array_like(
    /*errors*/
    ctx[7]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }
  return {
    c() {
      h3 = element("h3");
      h3.innerHTML = `<span class="error svelte-8lqyxl">Form is invalid</span>, check the following:`;
      t2 = space();
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      set_style(h3, "margin", "0");
      set_style(ul, "margin", "0");
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      insert(target, t2, anchor);
      insert(target, ul, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*activeFieldIndex, errors*/
      160) {
        each_value_2 = ensure_array_like(
          /*errors*/
          ctx2[7]
        );
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_2(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_2.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(h3);
        detach(t2);
        detach(ul);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_10(ctx) {
  let t0;
  let t1_value = (
    /*error*/
    ctx[55].path + ""
  );
  let t1;
  return {
    c() {
      t0 = text("at ");
      t1 = text(t1_value);
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, t1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*errors*/
      128 && t1_value !== (t1_value = /*error*/
      ctx2[55].path + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
    }
  };
}
function create_each_block_2(ctx) {
  let li;
  let t0_value = (
    /*error*/
    ctx[55].message + ""
  );
  let t0;
  let t1;
  let t2;
  let button;
  let t4;
  let mounted;
  let dispose;
  let if_block = (
    /*error*/
    ctx[55].path && create_if_block_10(ctx)
  );
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[21](
        /*error*/
        ctx[55]
      )
    );
  }
  return {
    c() {
      li = element("li");
      t0 = text(t0_value);
      t1 = space();
      if (if_block)
        if_block.c();
      t2 = space();
      button = element("button");
      button.textContent = "Go to problem";
      t4 = space();
      attr(button, "type", "button");
      attr(button, "class", "svelte-8lqyxl");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append5(li, t0);
      append5(li, t1);
      if (if_block)
        if_block.m(li, null);
      append5(li, t2);
      append5(li, button);
      append5(li, t4);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*errors*/
      128 && t0_value !== (t0_value = /*error*/
      ctx[55].message + ""))
        set_data(t0, t0_value);
      if (
        /*error*/
        ctx[55].path
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block_10(ctx);
          if_block.c();
          if_block.m(li, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(li);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_else_block_1(ctx) {
  let t;
  return {
    c() {
      t = text("No fields yet");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(t);
      }
    }
  };
}
function create_if_block_12(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*definition*/
    ctx[0].fields
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty4();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*definition, duplicateField, moveField, onChange, app, activeFieldIndex*/
      1579) {
        each_value = ensure_array_like(
          /*definition*/
          ctx2[0].fields
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_8(ctx) {
  let formrow;
  let current;
  formrow = new FormRow_default({
    props: {
      label: "Make required",
      id: `required_${/*index*/
      ctx[49]}`,
      $$slots: { default: [create_default_slot5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(formrow.$$.fragment);
    },
    m(target, anchor) {
      mount_component(formrow, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const formrow_changes = {};
      if (dirty[0] & /*definition*/
      1 | dirty[1] & /*$$scope*/
      134217728) {
        formrow_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow.$set(formrow_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(formrow.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(formrow.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(formrow, detaching);
    }
  };
}
function create_default_slot5(ctx) {
  let toggle;
  let updating_checked;
  let current;
  function toggle_checked_binding(value) {
    ctx[24](
      value,
      /*field*/
      ctx[45]
    );
  }
  let toggle_props = { tabindex: (
    /*index*/
    ctx[49]
  ) };
  if (
    /*field*/
    ctx[45].isRequired !== void 0
  ) {
    toggle_props.checked = /*field*/
    ctx[45].isRequired;
  }
  toggle = new Toggle_default({ props: toggle_props });
  binding_callbacks.push(() => bind3(toggle, "checked", toggle_checked_binding));
  return {
    c() {
      create_component(toggle.$$.fragment);
    },
    m(target, anchor) {
      mount_component(toggle, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const toggle_changes = {};
      if (!updating_checked && dirty[0] & /*definition*/
      1) {
        updating_checked = true;
        toggle_changes.checked = /*field*/
        ctx[45].isRequired;
        add_flush_callback(() => updating_checked = false);
      }
      toggle.$set(toggle_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(toggle.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(toggle.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(toggle, detaching);
    }
  };
}
function create_each_block_12(ctx) {
  let option;
  let t_value = (
    /*type*/
    ctx[52][1] + ""
  );
  let t;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t = text(t_value);
      option.__value = option_value_value = /*type*/
      ctx[52][0];
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append5(option, t);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_7(ctx) {
  let inputbuilderdocumentblock;
  let updating_body;
  let current;
  function inputbuilderdocumentblock_body_binding(value) {
    ctx[39](
      value,
      /*field*/
      ctx[45]
    );
  }
  let inputbuilderdocumentblock_props = { index: (
    /*index*/
    ctx[49]
  ) };
  if (
    /*field*/
    ctx[45].input.body !== void 0
  ) {
    inputbuilderdocumentblock_props.body = /*field*/
    ctx[45].input.body;
  }
  inputbuilderdocumentblock = new InputBuilderDocumentBlock_default({ props: inputbuilderdocumentblock_props });
  binding_callbacks.push(() => bind3(inputbuilderdocumentblock, "body", inputbuilderdocumentblock_body_binding));
  return {
    c() {
      create_component(inputbuilderdocumentblock.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputbuilderdocumentblock, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const inputbuilderdocumentblock_changes = {};
      if (!updating_body && dirty[0] & /*definition*/
      1) {
        updating_body = true;
        inputbuilderdocumentblock_changes.body = /*field*/
        ctx[45].input.body;
        add_flush_callback(() => updating_body = false);
      }
      inputbuilderdocumentblock.$set(inputbuilderdocumentblock_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputbuilderdocumentblock.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputbuilderdocumentblock.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inputbuilderdocumentblock, detaching);
    }
  };
}
function create_if_block_6(ctx) {
  let inputbuilderdataview;
  let updating_value;
  let current;
  function inputbuilderdataview_value_binding(value) {
    ctx[38](
      value,
      /*field*/
      ctx[45]
    );
  }
  let inputbuilderdataview_props = {
    index: (
      /*index*/
      ctx[49]
    ),
    app: (
      /*app*/
      ctx[3]
    )
  };
  if (
    /*field*/
    ctx[45].input.query !== void 0
  ) {
    inputbuilderdataview_props.value = /*field*/
    ctx[45].input.query;
  }
  inputbuilderdataview = new inputBuilderDataview_default({ props: inputbuilderdataview_props });
  binding_callbacks.push(() => bind3(inputbuilderdataview, "value", inputbuilderdataview_value_binding));
  return {
    c() {
      create_component(inputbuilderdataview.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputbuilderdataview, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const inputbuilderdataview_changes = {};
      if (dirty[0] & /*app*/
      8)
        inputbuilderdataview_changes.app = /*app*/
        ctx[3];
      if (!updating_value && dirty[0] & /*definition*/
      1) {
        updating_value = true;
        inputbuilderdataview_changes.value = /*field*/
        ctx[45].input.query;
        add_flush_callback(() => updating_value = false);
      }
      inputbuilderdataview.$set(inputbuilderdataview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputbuilderdataview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputbuilderdataview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inputbuilderdataview, detaching);
    }
  };
}
function create_if_block_52(ctx) {
  let inputfolder;
  let updating_folder;
  let current;
  function inputfolder_folder_binding(value) {
    ctx[37](
      value,
      /*field*/
      ctx[45]
    );
  }
  let inputfolder_props = {
    index: (
      /*index*/
      ctx[49]
    ),
    notifyChange: (
      /*onChange*/
      ctx[1]
    )
  };
  if (
    /*field*/
    ctx[45].input.folder !== void 0
  ) {
    inputfolder_props.folder = /*field*/
    ctx[45].input.folder;
  }
  inputfolder = new InputFolder_default({ props: inputfolder_props });
  binding_callbacks.push(() => bind3(inputfolder, "folder", inputfolder_folder_binding));
  return {
    c() {
      create_component(inputfolder.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputfolder, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const inputfolder_changes = {};
      if (dirty[0] & /*onChange*/
      2)
        inputfolder_changes.notifyChange = /*onChange*/
        ctx[1];
      if (!updating_folder && dirty[0] & /*definition*/
      1) {
        updating_folder = true;
        inputfolder_changes.folder = /*field*/
        ctx[45].input.folder;
        add_flush_callback(() => updating_folder = false);
      }
      inputfolder.$set(inputfolder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputfolder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputfolder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inputfolder, detaching);
    }
  };
}
function create_if_block_42(ctx) {
  let div0;
  let label0;
  let label0_for_value;
  let t1;
  let input0;
  let input0_id_value;
  let t2;
  let div1;
  let label1;
  let label1_for_value;
  let t4;
  let input1;
  let input1_id_value;
  let mounted;
  let dispose;
  function input0_input_handler_2() {
    ctx[35].call(
      input0,
      /*each_value*/
      ctx[48],
      /*index*/
      ctx[49]
    );
  }
  function input1_input_handler_2() {
    ctx[36].call(
      input1,
      /*each_value*/
      ctx[48],
      /*index*/
      ctx[49]
    );
  }
  return {
    c() {
      div0 = element("div");
      label0 = element("label");
      label0.textContent = "Min";
      t1 = space();
      input0 = element("input");
      t2 = space();
      div1 = element("div");
      label1 = element("label");
      label1.textContent = "Max";
      t4 = space();
      input1 = element("input");
      attr(label0, "for", label0_for_value = /*min_id*/
      ctx[50]);
      attr(input0, "type", "number");
      attr(input0, "placeholder", "0");
      attr(input0, "id", input0_id_value = /*min_id*/
      ctx[50]);
      attr(div0, "class", "flex column gap1 svelte-8lqyxl");
      attr(label1, "for", label1_for_value = /*max_id*/
      ctx[51]);
      attr(input1, "type", "number");
      attr(input1, "placeholder", "10");
      attr(input1, "id", input1_id_value = /*max_id*/
      ctx[51]);
      attr(div1, "class", "flex column gap1 svelte-8lqyxl");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      append5(div0, label0);
      append5(div0, t1);
      append5(div0, input0);
      set_input_value(
        input0,
        /*field*/
        ctx[45].input.min
      );
      insert(target, t2, anchor);
      insert(target, div1, anchor);
      append5(div1, label1);
      append5(div1, t4);
      append5(div1, input1);
      set_input_value(
        input1,
        /*field*/
        ctx[45].input.max
      );
      if (!mounted) {
        dispose = [
          listen(input0, "input", input0_input_handler_2),
          listen(input1, "input", input1_input_handler_2)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*definition*/
      1 && to_number(input0.value) !== /*field*/
      ctx[45].input.min) {
        set_input_value(
          input0,
          /*field*/
          ctx[45].input.min
        );
      }
      if (dirty[0] & /*definition*/
      1 && to_number(input1.value) !== /*field*/
      ctx[45].input.max) {
        set_input_value(
          input1,
          /*field*/
          ctx[45].input.max
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t2);
        detach(div1);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_32(ctx) {
  let inputbuilderselect;
  let updating_source;
  let updating_options;
  let updating_folder;
  let updating_query;
  let updating_allowUnknownValues;
  let current;
  function inputbuilderselect_source_binding_1(value) {
    ctx[30](
      value,
      /*field*/
      ctx[45]
    );
  }
  function inputbuilderselect_options_binding_1(value) {
    ctx[31](
      value,
      /*field*/
      ctx[45]
    );
  }
  function inputbuilderselect_folder_binding_1(value) {
    ctx[32](
      value,
      /*field*/
      ctx[45]
    );
  }
  function inputbuilderselect_query_binding(value) {
    ctx[33](
      value,
      /*field*/
      ctx[45]
    );
  }
  function inputbuilderselect_allowUnknownValues_binding(value) {
    ctx[34](
      value,
      /*field*/
      ctx[45]
    );
  }
  let inputbuilderselect_props = {
    index: (
      /*index*/
      ctx[49]
    ),
    notifyChange: (
      /*onChange*/
      ctx[1]
    ),
    is_multi: true,
    app: (
      /*app*/
      ctx[3]
    )
  };
  if (
    /*field*/
    ctx[45].input.source !== void 0
  ) {
    inputbuilderselect_props.source = /*field*/
    ctx[45].input.source;
  }
  if (
    /*field*/
    ctx[45].input.multi_select_options !== void 0
  ) {
    inputbuilderselect_props.options = /*field*/
    ctx[45].input.multi_select_options;
  }
  if (
    /*field*/
    ctx[45].input.folder !== void 0
  ) {
    inputbuilderselect_props.folder = /*field*/
    ctx[45].input.folder;
  }
  if (
    /*field*/
    ctx[45].input.query !== void 0
  ) {
    inputbuilderselect_props.query = /*field*/
    ctx[45].input.query;
  }
  if (
    /*field*/
    ctx[45].input.allowUnknownValues !== void 0
  ) {
    inputbuilderselect_props.allowUnknownValues = /*field*/
    ctx[45].input.allowUnknownValues;
  }
  inputbuilderselect = new InputBuilderSelect_default({ props: inputbuilderselect_props });
  binding_callbacks.push(() => bind3(inputbuilderselect, "source", inputbuilderselect_source_binding_1));
  binding_callbacks.push(() => bind3(inputbuilderselect, "options", inputbuilderselect_options_binding_1));
  binding_callbacks.push(() => bind3(inputbuilderselect, "folder", inputbuilderselect_folder_binding_1));
  binding_callbacks.push(() => bind3(inputbuilderselect, "query", inputbuilderselect_query_binding));
  binding_callbacks.push(() => bind3(inputbuilderselect, "allowUnknownValues", inputbuilderselect_allowUnknownValues_binding));
  return {
    c() {
      create_component(inputbuilderselect.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputbuilderselect, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const inputbuilderselect_changes = {};
      if (dirty[0] & /*onChange*/
      2)
        inputbuilderselect_changes.notifyChange = /*onChange*/
        ctx[1];
      if (dirty[0] & /*app*/
      8)
        inputbuilderselect_changes.app = /*app*/
        ctx[3];
      if (!updating_source && dirty[0] & /*definition*/
      1) {
        updating_source = true;
        inputbuilderselect_changes.source = /*field*/
        ctx[45].input.source;
        add_flush_callback(() => updating_source = false);
      }
      if (!updating_options && dirty[0] & /*definition*/
      1) {
        updating_options = true;
        inputbuilderselect_changes.options = /*field*/
        ctx[45].input.multi_select_options;
        add_flush_callback(() => updating_options = false);
      }
      if (!updating_folder && dirty[0] & /*definition*/
      1) {
        updating_folder = true;
        inputbuilderselect_changes.folder = /*field*/
        ctx[45].input.folder;
        add_flush_callback(() => updating_folder = false);
      }
      if (!updating_query && dirty[0] & /*definition*/
      1) {
        updating_query = true;
        inputbuilderselect_changes.query = /*field*/
        ctx[45].input.query;
        add_flush_callback(() => updating_query = false);
      }
      if (!updating_allowUnknownValues && dirty[0] & /*definition*/
      1) {
        updating_allowUnknownValues = true;
        inputbuilderselect_changes.allowUnknownValues = /*field*/
        ctx[45].input.allowUnknownValues;
        add_flush_callback(() => updating_allowUnknownValues = false);
      }
      inputbuilderselect.$set(inputbuilderselect_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputbuilderselect.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputbuilderselect.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inputbuilderselect, detaching);
    }
  };
}
function create_if_block_22(ctx) {
  let inputbuilderselect;
  let updating_source;
  let updating_options;
  let updating_folder;
  let current;
  function inputbuilderselect_source_binding(value) {
    ctx[27](
      value,
      /*field*/
      ctx[45]
    );
  }
  function inputbuilderselect_options_binding(value) {
    ctx[28](
      value,
      /*field*/
      ctx[45]
    );
  }
  function inputbuilderselect_folder_binding(value) {
    ctx[29](
      value,
      /*field*/
      ctx[45]
    );
  }
  let inputbuilderselect_props = {
    index: (
      /*index*/
      ctx[49]
    ),
    notifyChange: (
      /*onChange*/
      ctx[1]
    ),
    is_multi: false,
    allowUnknownValues: false,
    app: (
      /*app*/
      ctx[3]
    )
  };
  if (
    /*field*/
    ctx[45].input.source !== void 0
  ) {
    inputbuilderselect_props.source = /*field*/
    ctx[45].input.source;
  }
  if (
    /*field*/
    ctx[45].input.options !== void 0
  ) {
    inputbuilderselect_props.options = /*field*/
    ctx[45].input.options;
  }
  if (
    /*field*/
    ctx[45].input.folder !== void 0
  ) {
    inputbuilderselect_props.folder = /*field*/
    ctx[45].input.folder;
  }
  inputbuilderselect = new InputBuilderSelect_default({ props: inputbuilderselect_props });
  binding_callbacks.push(() => bind3(inputbuilderselect, "source", inputbuilderselect_source_binding));
  binding_callbacks.push(() => bind3(inputbuilderselect, "options", inputbuilderselect_options_binding));
  binding_callbacks.push(() => bind3(inputbuilderselect, "folder", inputbuilderselect_folder_binding));
  return {
    c() {
      create_component(inputbuilderselect.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inputbuilderselect, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const inputbuilderselect_changes = {};
      if (dirty[0] & /*onChange*/
      2)
        inputbuilderselect_changes.notifyChange = /*onChange*/
        ctx[1];
      if (dirty[0] & /*app*/
      8)
        inputbuilderselect_changes.app = /*app*/
        ctx[3];
      if (!updating_source && dirty[0] & /*definition*/
      1) {
        updating_source = true;
        inputbuilderselect_changes.source = /*field*/
        ctx[45].input.source;
        add_flush_callback(() => updating_source = false);
      }
      if (!updating_options && dirty[0] & /*definition*/
      1) {
        updating_options = true;
        inputbuilderselect_changes.options = /*field*/
        ctx[45].input.options;
        add_flush_callback(() => updating_options = false);
      }
      if (!updating_folder && dirty[0] & /*definition*/
      1) {
        updating_folder = true;
        inputbuilderselect_changes.folder = /*field*/
        ctx[45].input.folder;
        add_flush_callback(() => updating_folder = false);
      }
      inputbuilderselect.$set(inputbuilderselect_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inputbuilderselect.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inputbuilderselect.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inputbuilderselect, detaching);
    }
  };
}
function create_each_block5(ctx) {
  let div3;
  let div0;
  let label0;
  let label0_for_value;
  let t1;
  let input0;
  let input0_id_value;
  let t2;
  let div1;
  let label1;
  let label1_for_value;
  let t4;
  let input1;
  let input1_id_value;
  let t5;
  let show_if = ["text", "email", "tel", "number", "note", "tag", "dataview", "multiselect"].includes(
    /*field*/
    ctx[45].input.type
  );
  let t6;
  let div2;
  let label2;
  let label2_for_value;
  let scrollWhenActive_action;
  let t9;
  let div6;
  let div4;
  let label3;
  let label3_for_value;
  let t11;
  let input2;
  let input2_id_value;
  let t12;
  let div5;
  let label4;
  let label4_for_value;
  let t14;
  let select;
  let select_id_value;
  let t15;
  let div7;
  let current_block_type_index;
  let if_block1;
  let t16;
  let div8;
  let button0;
  let button0_disabled_value;
  let setIcon_action;
  let t17;
  let button1;
  let button1_disabled_value;
  let setIcon_action_1;
  let t18;
  let button2;
  let t20;
  let button3;
  let button3_id_value;
  let setIcon_action_2;
  let t21;
  let hr;
  let current;
  let mounted;
  let dispose;
  function input0_input_handler_1() {
    ctx[22].call(
      input0,
      /*each_value*/
      ctx[48],
      /*index*/
      ctx[49]
    );
  }
  function input1_input_handler_1() {
    ctx[23].call(
      input1,
      /*each_value*/
      ctx[48],
      /*index*/
      ctx[49]
    );
  }
  let if_block0 = show_if && create_if_block_8(ctx);
  function input2_input_handler_1() {
    ctx[25].call(
      input2,
      /*each_value*/
      ctx[48],
      /*index*/
      ctx[49]
    );
  }
  let each_value_1 = ensure_array_like(Object.entries(InputTypeReadable));
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_12(get_each_context_12(ctx, each_value_1, i));
  }
  function select_change_handler() {
    ctx[26].call(
      select,
      /*each_value*/
      ctx[48],
      /*index*/
      ctx[49]
    );
  }
  const if_block_creators = [
    create_if_block_22,
    create_if_block_32,
    create_if_block_42,
    create_if_block_52,
    create_if_block_6,
    create_if_block_7
  ];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*field*/
      ctx2[45].input.type === "select"
    )
      return 0;
    if (
      /*field*/
      ctx2[45].input.type === "multiselect"
    )
      return 1;
    if (
      /*field*/
      ctx2[45].input.type === "slider"
    )
      return 2;
    if (
      /*field*/
      ctx2[45].input.type === "note"
    )
      return 3;
    if (
      /*field*/
      ctx2[45].input.type === "dataview"
    )
      return 4;
    if (
      /*field*/
      ctx2[45].input.type === "document_block"
    )
      return 5;
    return -1;
  }
  function select_block_ctx(ctx2, index) {
    if (index === 2)
      return get_if_ctx(ctx2);
    return ctx2;
  }
  if (~(current_block_type_index = select_block_type_2(ctx, [-1, -1]))) {
    if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](select_block_ctx(ctx, current_block_type_index));
  }
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[40](
        /*index*/
        ctx[49]
      )
    );
  }
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[41](
        /*index*/
        ctx[49]
      )
    );
  }
  function click_handler_4() {
    return (
      /*click_handler_4*/
      ctx[42](
        /*index*/
        ctx[49]
      )
    );
  }
  function click_handler_5() {
    return (
      /*click_handler_5*/
      ctx[43](
        /*index*/
        ctx[49]
      )
    );
  }
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      label0 = element("label");
      label0.textContent = "Name";
      t1 = space();
      input0 = element("input");
      t2 = space();
      div1 = element("div");
      label1 = element("label");
      label1.textContent = "Label";
      t4 = space();
      input1 = element("input");
      t5 = space();
      if (if_block0)
        if_block0.c();
      t6 = space();
      div2 = element("div");
      label2 = element("label");
      label2.textContent = `delete ${/*index*/
      ctx[49]}`;
      t9 = space();
      div6 = element("div");
      div4 = element("div");
      label3 = element("label");
      label3.textContent = "Description";
      t11 = space();
      input2 = element("input");
      t12 = space();
      div5 = element("div");
      label4 = element("label");
      label4.textContent = "Type";
      t14 = space();
      select = element("select");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t15 = space();
      div7 = element("div");
      if (if_block1)
        if_block1.c();
      t16 = space();
      div8 = element("div");
      button0 = element("button");
      t17 = space();
      button1 = element("button");
      t18 = space();
      button2 = element("button");
      button2.textContent = "Duplicate";
      t20 = space();
      button3 = element("button");
      t21 = space();
      hr = element("hr");
      attr(label0, "for", label0_for_value = `name_${/*index*/
      ctx[49]}`);
      attr(input0, "type", "text");
      attr(input0, "placeholder", "Name");
      attr(input0, "id", input0_id_value = `name_${/*index*/
      ctx[49]}`);
      attr(div0, "class", "flex column gap1 svelte-8lqyxl");
      attr(label1, "for", label1_for_value = `label_${/*index*/
      ctx[49]}`);
      attr(input1, "type", "text");
      attr(input1, "placeholder", "Label");
      attr(input1, "id", input1_id_value = `label_${/*index*/
      ctx[49]}`);
      attr(div1, "class", "flex column gap1 svelte-8lqyxl");
      attr(label2, "for", label2_for_value = /*delete_id*/
      ctx[47]);
      set_style(label2, "visibility", "hidden");
      set_style(label2, "overflow", "hidden");
      set_style(label2, "white-space", "nowrap");
      attr(div2, "class", "flex column gap1 svelte-8lqyxl");
      attr(div3, "class", "flex column md-row gap2 svelte-8lqyxl");
      attr(label3, "for", label3_for_value = /*desc_id*/
      ctx[46]);
      attr(input2, "type", "text");
      attr(input2, "placeholder", "Description");
      attr(input2, "id", input2_id_value = /*desc_id*/
      ctx[46]);
      attr(div4, "class", "flex column gap1 svelte-8lqyxl");
      attr(label4, "for", label4_for_value = `type_${/*index*/
      ctx[49]}`);
      attr(select, "id", select_id_value = `type_${/*index*/
      ctx[49]}`);
      if (
        /*field*/
        ctx[45].input.type === void 0
      )
        add_render_callback(select_change_handler);
      attr(div5, "class", "flex column gap1 svelte-8lqyxl");
      attr(div6, "class", "flex column md-row gap2 svelte-8lqyxl");
      attr(div7, "class", "flex gap1 svelte-8lqyxl");
      attr(button0, "type", "button");
      button0.disabled = button0_disabled_value = /*index*/
      ctx[49] === 0;
      attr(button0, "class", "svelte-8lqyxl");
      attr(button1, "type", "button");
      button1.disabled = button1_disabled_value = /*index*/
      ctx[49] === /*definition*/
      ctx[0].fields.length - 1;
      attr(button1, "class", "svelte-8lqyxl");
      attr(button2, "type", "button");
      attr(button2, "class", "svelte-8lqyxl");
      attr(button3, "type", "button");
      attr(button3, "id", button3_id_value = /*delete_id*/
      ctx[47]);
      attr(button3, "class", "svelte-8lqyxl");
      attr(div8, "class", "flex gap1 svelte-8lqyxl");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append5(div3, div0);
      append5(div0, label0);
      append5(div0, t1);
      append5(div0, input0);
      set_input_value(
        input0,
        /*field*/
        ctx[45].name
      );
      append5(div3, t2);
      append5(div3, div1);
      append5(div1, label1);
      append5(div1, t4);
      append5(div1, input1);
      set_input_value(
        input1,
        /*field*/
        ctx[45].label
      );
      append5(div3, t5);
      if (if_block0)
        if_block0.m(div3, null);
      append5(div3, t6);
      append5(div3, div2);
      append5(div2, label2);
      insert(target, t9, anchor);
      insert(target, div6, anchor);
      append5(div6, div4);
      append5(div4, label3);
      append5(div4, t11);
      append5(div4, input2);
      set_input_value(
        input2,
        /*field*/
        ctx[45].description
      );
      append5(div6, t12);
      append5(div6, div5);
      append5(div5, label4);
      append5(div5, t14);
      append5(div5, select);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(select, null);
        }
      }
      select_option(
        select,
        /*field*/
        ctx[45].input.type,
        true
      );
      insert(target, t15, anchor);
      insert(target, div7, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div7, null);
      }
      insert(target, t16, anchor);
      insert(target, div8, anchor);
      append5(div8, button0);
      append5(div8, t17);
      append5(div8, button1);
      append5(div8, t18);
      append5(div8, button2);
      append5(div8, t20);
      append5(div8, button3);
      insert(target, t21, anchor);
      insert(target, hr, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen(input0, "input", input0_input_handler_1),
          listen(input1, "input", input1_input_handler_1),
          action_destroyer(scrollWhenActive_action = scrollWhenActive.call(
            null,
            div3,
            /*index*/
            ctx[49] === /*activeFieldIndex*/
            ctx[5]
          )),
          listen(input2, "input", input2_input_handler_1),
          listen(select, "change", select_change_handler),
          action_destroyer(setIcon_action = import_obsidian14.setIcon.call(null, button0, "arrow-up")),
          listen(button0, "click", click_handler_2),
          action_destroyer(setIcon_action_1 = import_obsidian14.setIcon.call(null, button1, "arrow-down")),
          listen(button1, "click", click_handler_3),
          listen(button2, "click", click_handler_4),
          action_destroyer(setIcon_action_2 = import_obsidian14.setIcon.call(null, button3, "trash")),
          listen(button3, "click", click_handler_5)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*definition*/
      1 && input0.value !== /*field*/
      ctx[45].name) {
        set_input_value(
          input0,
          /*field*/
          ctx[45].name
        );
      }
      if (dirty[0] & /*definition*/
      1 && input1.value !== /*field*/
      ctx[45].label) {
        set_input_value(
          input1,
          /*field*/
          ctx[45].label
        );
      }
      if (dirty[0] & /*definition*/
      1)
        show_if = ["text", "email", "tel", "number", "note", "tag", "dataview", "multiselect"].includes(
          /*field*/
          ctx[45].input.type
        );
      if (show_if) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
          if (dirty[0] & /*definition*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_8(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div3, t6);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (scrollWhenActive_action && is_function(scrollWhenActive_action.update) && dirty[0] & /*activeFieldIndex*/
      32)
        scrollWhenActive_action.update.call(
          null,
          /*index*/
          ctx[49] === /*activeFieldIndex*/
          ctx[5]
        );
      if (dirty[0] & /*definition*/
      1 && input2.value !== /*field*/
      ctx[45].description) {
        set_input_value(
          input2,
          /*field*/
          ctx[45].description
        );
      }
      if (dirty & /*Object*/
      0) {
        each_value_1 = ensure_array_like(Object.entries(InputTypeReadable));
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_12(ctx, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_12(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
      if (dirty[0] & /*definition*/
      1) {
        select_option(
          select,
          /*field*/
          ctx[45].input.type
        );
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx, dirty);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(select_block_ctx(ctx, current_block_type_index), dirty);
        }
      } else {
        if (if_block1) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block1 = if_blocks[current_block_type_index];
          if (!if_block1) {
            if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](select_block_ctx(ctx, current_block_type_index));
            if_block1.c();
          } else {
            if_block1.p(select_block_ctx(ctx, current_block_type_index), dirty);
          }
          transition_in(if_block1, 1);
          if_block1.m(div7, null);
        } else {
          if_block1 = null;
        }
      }
      if (!current || dirty[0] & /*definition*/
      1 && button1_disabled_value !== (button1_disabled_value = /*index*/
      ctx[49] === /*definition*/
      ctx[0].fields.length - 1)) {
        button1.disabled = button1_disabled_value;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div3);
        detach(t9);
        detach(div6);
        detach(t15);
        detach(div7);
        detach(t16);
        detach(div8);
        detach(t21);
        detach(hr);
      }
      if (if_block0)
        if_block0.d();
      destroy_each(each_blocks, detaching);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment11(ctx) {
  let div1;
  let tabs;
  let updating_activeTab;
  let t;
  let div0;
  let current_block_type_index;
  let if_block;
  let current;
  function tabs_activeTab_binding(value) {
    ctx[16](value);
  }
  let tabs_props = { tabs: ["form", "template"] };
  if (
    /*currentTab*/
    ctx[4] !== void 0
  ) {
    tabs_props.activeTab = /*currentTab*/
    ctx[4];
  }
  tabs = new Tabs_default({ props: tabs_props });
  binding_callbacks.push(() => bind3(tabs, "activeTab", tabs_activeTab_binding));
  const if_block_creators = [create_if_block5, create_else_block3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*currentTab*/
      ctx2[4] === "template"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, [-1, -1]);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div1 = element("div");
      create_component(tabs.$$.fragment);
      t = space();
      div0 = element("div");
      if_block.c();
      attr(div0, "class", "body svelte-8lqyxl");
      attr(div1, "class", "wrapper modal-form svelte-8lqyxl");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      mount_component(tabs, div1, null);
      append5(div1, t);
      append5(div1, div0);
      if_blocks[current_block_type_index].m(div0, null);
      current = true;
    },
    p(ctx2, dirty) {
      const tabs_changes = {};
      if (!updating_activeTab && dirty[0] & /*currentTab*/
      16) {
        updating_activeTab = true;
        tabs_changes.activeTab = /*currentTab*/
        ctx2[4];
        add_flush_callback(() => updating_activeTab = false);
      }
      tabs.$set(tabs_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div0, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(tabs.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(tabs.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_component(tabs);
      if_blocks[current_block_type_index].d();
    }
  };
}
function scrollWhenActive(element2, isActive) {
  function update3(isActive2) {
    if (isActive2) {
      setTimeout(
        () => {
          element2.scrollIntoView({ behavior: "smooth", block: "center" });
        },
        100
      );
    }
  }
  update3(isActive);
  return { update: update3 };
}
function instance11($$self, $$props, $$invalidate) {
  let isValid;
  let errors;
  let activeFieldIndex;
  let fieldNames;
  let { definition = {
    title: "",
    name: "",
    version: "1",
    fields: []
  } } = $$props;
  let { onChange } = $$props;
  let { onSubmit } = $$props;
  let { onCancel } = $$props;
  let { onPreview } = $$props;
  let { app: app2 } = $$props;
  let currentTab = "form";
  function findFreeName(fieldIndex) {
    const field = definition.fields[fieldIndex];
    if (!field) {
      log_error(new ModalFormError("Unexpected error, no field at that index", fieldIndex + " leads to undefined"));
      return Date.now() + "";
    }
    let name = field.name;
    const allNames = definition.fields.map((f) => f.name);
    let i = 1;
    while (allNames.includes(name)) {
      name = `${field.name}_${i}`;
      i++;
    }
    return name;
  }
  function duplicateField(fieldIndex) {
    const field = definition.fields[fieldIndex];
    if (!field) {
      log_error(new ModalFormError("Unexpected error, no field at that index", fieldIndex + " leads to undefined"));
      return;
    }
    const newField = Object.assign(Object.assign({}, field), {
      input: structuredClone(field.input),
      name: findFreeName(fieldIndex)
    });
    definition.fields.splice(fieldIndex + 1, 0, newField);
    $$invalidate(0, definition);
    onChange();
    $$invalidate(5, activeFieldIndex = fieldIndex + 1);
  }
  function moveField(from, direction) {
    const to = direction === "up" ? from - 1 : from + 1;
    if (to < 0 || to >= definition.fields.length)
      return;
    const tmp = definition.fields[from];
    const target = definition.fields[to];
    if (!target || !tmp)
      return;
    $$invalidate(0, definition.fields[from] = target, definition);
    $$invalidate(0, definition.fields[to] = tmp, definition);
    $$invalidate(0, definition);
    onChange();
    $$invalidate(5, activeFieldIndex = to);
  }
  const handleSubmit = () => {
    if (!isValidFormDefinition(definition))
      return;
    onSubmit(definition);
  };
  function saveTemplate(parsedTemplate) {
    onSubmit(Object.assign(Object.assign({}, definition), {
      template: { parsedTemplate, createCommand: true }
    }));
  }
  const handlePreview = () => {
    if (!isValidFormDefinition(definition))
      return;
    console.log("preview of", definition);
    onPreview(definition);
  };
  function tabs_activeTab_binding(value) {
    currentTab = value;
    $$invalidate(4, currentTab);
  }
  function input0_input_handler() {
    definition.name = this.value;
    $$invalidate(0, definition);
  }
  function input1_input_handler() {
    definition.title = this.value;
    $$invalidate(0, definition);
  }
  function input2_input_handler() {
    definition.customClassname = this.value;
    $$invalidate(0, definition);
  }
  const click_handler = () => {
    $$invalidate(
      0,
      definition.fields = [
        ...definition.fields,
        {
          name: "",
          label: "",
          description: "",
          input: { type: "text", allowUnknownValues: false }
        }
      ],
      definition
    );
    $$invalidate(5, activeFieldIndex = definition.fields.length - 1);
  };
  const click_handler_1 = (error2) => {
    $$invalidate(5, activeFieldIndex = error2.index);
  };
  function input0_input_handler_1(each_value, index) {
    each_value[index].name = this.value;
    $$invalidate(0, definition);
  }
  function input1_input_handler_1(each_value, index) {
    each_value[index].label = this.value;
    $$invalidate(0, definition);
  }
  function toggle_checked_binding(value, field) {
    if ($$self.$$.not_equal(field.isRequired, value)) {
      field.isRequired = value;
      $$invalidate(0, definition);
    }
  }
  function input2_input_handler_1(each_value, index) {
    each_value[index].description = this.value;
    $$invalidate(0, definition);
  }
  function select_change_handler(each_value, index) {
    each_value[index].input.type = select_value(this);
    $$invalidate(0, definition);
  }
  function inputbuilderselect_source_binding(value, field) {
    if ($$self.$$.not_equal(field.input.source, value)) {
      field.input.source = value;
      $$invalidate(0, definition);
    }
  }
  function inputbuilderselect_options_binding(value, field) {
    if ($$self.$$.not_equal(field.input.options, value)) {
      field.input.options = value;
      $$invalidate(0, definition);
    }
  }
  function inputbuilderselect_folder_binding(value, field) {
    if ($$self.$$.not_equal(field.input.folder, value)) {
      field.input.folder = value;
      $$invalidate(0, definition);
    }
  }
  function inputbuilderselect_source_binding_1(value, field) {
    if ($$self.$$.not_equal(field.input.source, value)) {
      field.input.source = value;
      $$invalidate(0, definition);
    }
  }
  function inputbuilderselect_options_binding_1(value, field) {
    if ($$self.$$.not_equal(field.input.multi_select_options, value)) {
      field.input.multi_select_options = value;
      $$invalidate(0, definition);
    }
  }
  function inputbuilderselect_folder_binding_1(value, field) {
    if ($$self.$$.not_equal(field.input.folder, value)) {
      field.input.folder = value;
      $$invalidate(0, definition);
    }
  }
  function inputbuilderselect_query_binding(value, field) {
    if ($$self.$$.not_equal(field.input.query, value)) {
      field.input.query = value;
      $$invalidate(0, definition);
    }
  }
  function inputbuilderselect_allowUnknownValues_binding(value, field) {
    if ($$self.$$.not_equal(field.input.allowUnknownValues, value)) {
      field.input.allowUnknownValues = value;
      $$invalidate(0, definition);
    }
  }
  function input0_input_handler_2(each_value, index) {
    each_value[index].input.min = to_number(this.value);
    $$invalidate(0, definition);
  }
  function input1_input_handler_2(each_value, index) {
    each_value[index].input.max = to_number(this.value);
    $$invalidate(0, definition);
  }
  function inputfolder_folder_binding(value, field) {
    if ($$self.$$.not_equal(field.input.folder, value)) {
      field.input.folder = value;
      $$invalidate(0, definition);
    }
  }
  function inputbuilderdataview_value_binding(value, field) {
    if ($$self.$$.not_equal(field.input.query, value)) {
      field.input.query = value;
      $$invalidate(0, definition);
    }
  }
  function inputbuilderdocumentblock_body_binding(value, field) {
    if ($$self.$$.not_equal(field.input.body, value)) {
      field.input.body = value;
      $$invalidate(0, definition);
    }
  }
  const click_handler_2 = (index) => moveField(index, "up");
  const click_handler_3 = (index) => moveField(index, "down");
  const click_handler_4 = (index) => duplicateField(index);
  const click_handler_5 = (index) => {
    $$invalidate(0, definition.fields = definition.fields.filter((_, i) => i !== index), definition);
  };
  $$self.$$set = ($$props2) => {
    if ("definition" in $$props2)
      $$invalidate(0, definition = $$props2.definition);
    if ("onChange" in $$props2)
      $$invalidate(1, onChange = $$props2.onChange);
    if ("onSubmit" in $$props2)
      $$invalidate(14, onSubmit = $$props2.onSubmit);
    if ("onCancel" in $$props2)
      $$invalidate(2, onCancel = $$props2.onCancel);
    if ("onPreview" in $$props2)
      $$invalidate(15, onPreview = $$props2.onPreview);
    if ("app" in $$props2)
      $$invalidate(3, app2 = $$props2.app);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*definition*/
    1) {
      $:
        $$invalidate(8, isValid = isValidFormDefinition(definition));
    }
    if ($$self.$$.dirty[0] & /*definition*/
    1) {
      $:
        $$invalidate(7, errors = validateFields(definition.fields));
    }
    if ($$self.$$.dirty[0] & /*definition*/
    1) {
      $:
        $$invalidate(6, fieldNames = pipe2(definition.fields, Array_exports.map((f) => f.name)));
    }
  };
  $:
    $$invalidate(5, activeFieldIndex = 0);
  return [
    definition,
    onChange,
    onCancel,
    app2,
    currentTab,
    activeFieldIndex,
    fieldNames,
    errors,
    isValid,
    duplicateField,
    moveField,
    handleSubmit,
    saveTemplate,
    handlePreview,
    onSubmit,
    onPreview,
    tabs_activeTab_binding,
    input0_input_handler,
    input1_input_handler,
    input2_input_handler,
    click_handler,
    click_handler_1,
    input0_input_handler_1,
    input1_input_handler_1,
    toggle_checked_binding,
    input2_input_handler_1,
    select_change_handler,
    inputbuilderselect_source_binding,
    inputbuilderselect_options_binding,
    inputbuilderselect_folder_binding,
    inputbuilderselect_source_binding_1,
    inputbuilderselect_options_binding_1,
    inputbuilderselect_folder_binding_1,
    inputbuilderselect_query_binding,
    inputbuilderselect_allowUnknownValues_binding,
    input0_input_handler_2,
    input1_input_handler_2,
    inputfolder_folder_binding,
    inputbuilderdataview_value_binding,
    inputbuilderdocumentblock_body_binding,
    click_handler_2,
    click_handler_3,
    click_handler_4,
    click_handler_5
  ];
}
var FormBuilder = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(
      this,
      options,
      instance11,
      create_fragment11,
      safe_not_equal,
      {
        definition: 0,
        onChange: 1,
        onSubmit: 14,
        onCancel: 2,
        onPreview: 15,
        app: 3
      },
      add_css8,
      [-1, -1]
    );
  }
};
var FormBuilder_default = FormBuilder;

// src/store/store.ts
var settings = writable({ ...getDefaultSettings() });
var formsStore = derived(settings, ($settings) => pipe2(
  $settings.formDefinitions,
  Array_exports.filter((form) => !(form instanceof MigrationError))
));
var { subscribe: subscribe2, update: update2, set } = settings;
var invalidFormsStore = derived(settings, ($settings) => {
  return pipe2(
    $settings.formDefinitions,
    Array_exports.filter((form) => form instanceof MigrationError)
  );
});
var settingsStore = {
  subscribe: subscribe2,
  set,
  updateForm(name, form) {
    update2((s) => {
      const forms = s.formDefinitions.map((f) => {
        if (f.name === name)
          return form;
        return f;
      });
      return { ...s, formDefinitions: forms };
    });
  },
  addNewForm(form) {
    update2((s) => {
      const forms = [...s.formDefinitions, form];
      return { ...s, formDefinitions: forms };
    });
  },
  removeForm(name) {
    update2((s) => {
      const forms = s.formDefinitions.filter((f) => f.name !== name);
      return { ...s, formDefinitions: forms };
    });
  },
  duplicateForm(formName) {
    update2((s) => {
      return { ...s, formDefinitions: duplicateForm(formName, s.formDefinitions) };
    });
  }
};

// src/views/EditFormView.ts
var EDIT_FORM_VIEW = "modal-form-edit-form-view";
function parseState(maybeState) {
  if (maybeState === null) {
    return false;
  }
  if (typeof maybeState !== "object") {
    return false;
  }
  if ("title" in maybeState && "name" in maybeState && "fields" in maybeState) {
    return true;
  }
  return false;
}
var EditFormView = class extends import_obsidian15.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.leaf = leaf;
    this.plugin = plugin;
    this.formState = { title: "", name: "", version: "1", fields: [] };
    this.icon = "note-glyph";
  }
  getViewType() {
    return EDIT_FORM_VIEW;
  }
  getDisplayText() {
    return "Edit form";
  }
  async onOpen() {
    this.containerEl.empty();
    this.formEditor = new FormBuilder_default({
      target: this.containerEl,
      props: {
        definition: this.formState,
        app: this.app,
        onChange: () => {
          console.log("Save form state", this.formState);
          this.app.workspace.requestSaveLayout();
        },
        onSubmit: (formDefinition) => {
          console.log("Submitting form", { formDefinition });
          if (this.originalFormName && this.originalFormName !== "") {
            settingsStore.updateForm(this.originalFormName, formDefinition);
          } else {
            settingsStore.addNewForm(formDefinition);
          }
          this.plugin.closeEditForm();
        },
        onCancel: () => {
          this.plugin.closeEditForm();
        },
        onPreview: async (formDefinition) => {
          const result2 = await this.plugin.api.openForm(formDefinition);
          const result_str = JSON.stringify(result2, null, 2);
          log_notice("Form result", result_str);
          console.log(result_str);
        }
      }
    });
  }
  async onClose() {
    console.log("onClose of edit form called");
    this.formEditor.$destroy();
  }
  async setState(state, result2) {
    console.log("setState of edit form called", state);
    if (parseState(state)) {
      this.formState = state;
      this.originalFormName = state.name;
      this.formEditor.$set({ definition: this.formState });
    }
    return super.setState(state, result2);
  }
  getState() {
    return this.formState;
  }
};

// src/views/ManageFormsView.ts
var import_obsidian17 = require("obsidian");

// src/views/components/Button.svelte
var import_obsidian16 = require("obsidian");
function create_fragment12(ctx) {
  let span;
  return {
    c() {
      span = element("span");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      ctx[6](span);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      ctx[6](null);
    }
  };
}
function instance12($$self, $$props, $$invalidate) {
  let { tooltip = void 0 } = $$props;
  let { icon = void 0 } = $$props;
  let { text: text3 = void 0 } = $$props;
  let { variant = "regular" } = $$props;
  let { onClick } = $$props;
  const variants = {
    regular: "modal-form-regular",
    danger: "modal-form-danger",
    primary: "modal-form-primary"
  };
  let root;
  onMount(() => {
    const btn = new import_obsidian16.ButtonComponent(root);
    if (icon)
      btn.setIcon(icon);
    if (tooltip)
      btn.setTooltip(tooltip);
    if (text3)
      btn.setButtonText(text3);
    btn.onClick(onClick);
    btn.setClass(variants[variant]);
  });
  function span_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      root = $$value;
      $$invalidate(0, root);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("tooltip" in $$props2)
      $$invalidate(1, tooltip = $$props2.tooltip);
    if ("icon" in $$props2)
      $$invalidate(2, icon = $$props2.icon);
    if ("text" in $$props2)
      $$invalidate(3, text3 = $$props2.text);
    if ("variant" in $$props2)
      $$invalidate(4, variant = $$props2.variant);
    if ("onClick" in $$props2)
      $$invalidate(5, onClick = $$props2.onClick);
  };
  return [root, tooltip, icon, text3, variant, onClick, span_binding];
}
var Button = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance12, create_fragment12, safe_not_equal, {
      tooltip: 1,
      icon: 2,
      text: 3,
      variant: 4,
      onClick: 5
    });
  }
};
var Button_default = Button;

// src/views/components/KeyValue.svelte
function add_css9(target) {
  append_styles(target, "svelte-1i8bb6o", "div.svelte-1i8bb6o{display:flex;flex-direction:row;align-items:flex-start;gap:var(--mf-spacing)}.key.svelte-1i8bb6o{color:var(--text-faint)}");
}
function create_fragment13(ctx) {
  let div;
  let span;
  let t0;
  let t1;
  let t2;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[2].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[1],
    null
  );
  return {
    c() {
      div = element("div");
      span = element("span");
      t0 = text(
        /*key*/
        ctx[0]
      );
      t1 = text(":");
      t2 = space();
      if (default_slot)
        default_slot.c();
      attr(span, "class", "key svelte-1i8bb6o");
      attr(div, "class", "svelte-1i8bb6o");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, span);
      append5(span, t0);
      append5(span, t1);
      append5(div, t2);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*key*/
      1)
        set_data(
          t0,
          /*key*/
          ctx2[0]
        );
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[1],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[1]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[1],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance13($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { key } = $$props;
  $$self.$$set = ($$props2) => {
    if ("key" in $$props2)
      $$invalidate(0, key = $$props2.key);
    if ("$$scope" in $$props2)
      $$invalidate(1, $$scope = $$props2.$$scope);
  };
  return [key, $$scope, slots];
}
var KeyValue = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance13, create_fragment13, safe_not_equal, { key: 0 }, add_css9);
  }
};
var KeyValue_default = KeyValue;

// src/views/ManageForms.svelte
function add_css10(target) {
  append_styles(target, "svelte-1gkuvrl", ".form-row.svelte-1gkuvrl.svelte-1gkuvrl{display:flex;flex-direction:column;gap:8px}.form-row-buttons.svelte-1gkuvrl.svelte-1gkuvrl{display:flex;gap:8px}.form-name.svelte-1gkuvrl.svelte-1gkuvrl{margin-bottom:0}.header.svelte-1gkuvrl.svelte-1gkuvrl{display:flex;flex-direction:column;justify-content:space-between;align-items:flex-start}h5.svelte-1gkuvrl.svelte-1gkuvrl{margin-bottom:0}.flex-row.svelte-1gkuvrl.svelte-1gkuvrl{display:flex;flex-direction:row;gap:8px}pre.svelte-1gkuvrl.svelte-1gkuvrl{white-space:pre-wrap}.invalid-field-json.svelte-1gkuvrl.svelte-1gkuvrl{background-color:var(--background-secondary);padding:0 8px;margin:0}.invalid-field-json.svelte-1gkuvrl code.svelte-1gkuvrl{display:flex}");
}
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[21] = list[i];
  return child_ctx;
}
function get_each_context_13(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i];
  return child_ctx;
}
function get_each_context_22(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i];
  return child_ctx;
}
function get_each_context_3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[29] = list[i];
  return child_ctx;
}
function get_each_context_4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[21] = list[i];
  return child_ctx;
}
function get_each_context_5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[34] = list[i];
  return child_ctx;
}
function get_each_context_6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[37] = list[i][0];
  child_ctx[38] = list[i][1];
  return child_ctx;
}
function create_if_block_23(ctx) {
  let h5;
  let t0;
  let t1_value = (
    /*$invalidForms*/
    ctx[4].length + ""
  );
  let t1;
  let t2;
  let t3;
  let p;
  return {
    c() {
      h5 = element("h5");
      t0 = text("There are ");
      t1 = text(t1_value);
      t2 = text(" invalid forms.");
      t3 = space();
      p = element("p");
      p.textContent = "Please take a look at the invalid forms section for details and potential fixes.";
      attr(h5, "class", "modal-form-danger svelte-1gkuvrl");
    },
    m(target, anchor) {
      insert(target, h5, anchor);
      append5(h5, t0);
      append5(h5, t1);
      append5(h5, t2);
      insert(target, t3, anchor);
      insert(target, p, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*$invalidForms*/
      16 && t1_value !== (t1_value = /*$invalidForms*/
      ctx2[4].length + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(h5);
        detach(t3);
        detach(p);
      }
    }
  };
}
function create_if_block_13(ctx) {
  let keyvalue;
  let current;
  keyvalue = new KeyValue_default({
    props: {
      key: (
        /*key*/
        ctx[37]
      ),
      $$slots: { default: [create_default_slot_32] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(keyvalue.$$.fragment);
    },
    m(target, anchor) {
      mount_component(keyvalue, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const keyvalue_changes = {};
      if (dirty[0] & /*$forms*/
      32)
        keyvalue_changes.key = /*key*/
        ctx2[37];
      if (dirty[0] & /*$forms*/
      32 | dirty[1] & /*$$scope*/
      1024) {
        keyvalue_changes.$$scope = { dirty, ctx: ctx2 };
      }
      keyvalue.$set(keyvalue_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(keyvalue.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(keyvalue.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(keyvalue, detaching);
    }
  };
}
function create_default_slot_32(ctx) {
  let span;
  let t_value = (Array.isArray(
    /*value*/
    ctx[38]
  ) ? (
    /*value*/
    ctx[38].length
  ) : typeof /*value*/
  ctx[38] === "object" ? !!/*value*/
  ctx[38] : (
    /*value*/
    ctx[38]
  )) + "";
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append5(span, t);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*$forms*/
      32 && t_value !== (t_value = (Array.isArray(
        /*value*/
        ctx2[38]
      ) ? (
        /*value*/
        ctx2[38].length
      ) : typeof /*value*/
      ctx2[38] === "object" ? !!/*value*/
      ctx2[38] : (
        /*value*/
        ctx2[38]
      )) + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_each_block_6(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*key*/
    ctx[37] !== "name" && create_if_block_13(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty4();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*key*/
        ctx2[37] !== "name"
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*$forms*/
          32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_13(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_each_block_5(ctx) {
  let span;
  let t0_value = (
    /*field*/
    ctx[34].name + ""
  );
  let t0;
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append5(span, t0);
      insert(target, t1, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*$forms*/
      32 && t0_value !== (t0_value = /*field*/
      ctx2[34].name + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
        detach(t1);
      }
    }
  };
}
function create_default_slot_22(ctx) {
  let span;
  let each_value_5 = ensure_array_like(
    /*form*/
    ctx[21].fields
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_5.length; i += 1) {
    each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
  }
  return {
    c() {
      span = element("span");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      set_style(span, "display", "flex");
      set_style(span, "flex-direction", "column");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(span, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*$forms*/
      32) {
        each_value_5 = ensure_array_like(
          /*form*/
          ctx2[21].fields
        );
        let i;
        for (i = 0; i < each_value_5.length; i += 1) {
          const child_ctx = get_each_context_5(ctx2, each_value_5, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_5(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(span, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_5.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block_4(ctx) {
  let div2;
  let h4;
  let t0_value = (
    /*form*/
    ctx[21].name + ""
  );
  let t0;
  let t1;
  let div0;
  let t2;
  let keyvalue;
  let t3;
  let div1;
  let button0;
  let t4;
  let button1;
  let t5;
  let button2;
  let t7;
  let button3;
  let t9;
  let button4;
  let current;
  let mounted;
  let dispose;
  let each_value_6 = ensure_array_like(Object.entries(
    /*form*/
    ctx[21]
  ));
  let each_blocks = [];
  for (let i = 0; i < each_value_6.length; i += 1) {
    each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  keyvalue = new KeyValue_default({
    props: {
      key: "Field names",
      $$slots: { default: [create_default_slot_22] },
      $$scope: { ctx }
    }
  });
  function func() {
    return (
      /*func*/
      ctx[16](
        /*form*/
        ctx[21]
      )
    );
  }
  button0 = new Button_default({
    props: {
      onClick: func,
      tooltip: `Delete ${/*form*/
      ctx[21].name}`,
      icon: "trash",
      variant: "danger"
    }
  });
  function func_1() {
    return (
      /*func_1*/
      ctx[17](
        /*form*/
        ctx[21]
      )
    );
  }
  button1 = new Button_default({
    props: {
      onClick: func_1,
      text: "Edit",
      variant: "primary",
      icon: "pencil"
    }
  });
  function click_handler() {
    return (
      /*click_handler*/
      ctx[18](
        /*form*/
        ctx[21]
      )
    );
  }
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[19](
        /*form*/
        ctx[21]
      )
    );
  }
  function func_2() {
    return (
      /*func_2*/
      ctx[20](
        /*form*/
        ctx[21]
      )
    );
  }
  button4 = new Button_default({
    props: {
      tooltip: `Copy ${/*form*/
      ctx[21].name} to clipboard`,
      icon: "clipboard-copy",
      onClick: func_2
    }
  });
  return {
    c() {
      div2 = element("div");
      h4 = element("h4");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = space();
      create_component(keyvalue.$$.fragment);
      t3 = space();
      div1 = element("div");
      create_component(button0.$$.fragment);
      t4 = space();
      create_component(button1.$$.fragment);
      t5 = space();
      button2 = element("button");
      button2.innerHTML = `<span>Duplicate</span>`;
      t7 = space();
      button3 = element("button");
      button3.innerHTML = `<span>Open in template editor</span>`;
      t9 = space();
      create_component(button4.$$.fragment);
      attr(h4, "class", "form-name svelte-1gkuvrl");
      attr(div1, "class", "form-row-buttons svelte-1gkuvrl");
      attr(div2, "class", "form-row svelte-1gkuvrl");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append5(div2, h4);
      append5(h4, t0);
      append5(div2, t1);
      append5(div2, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      append5(div0, t2);
      mount_component(keyvalue, div0, null);
      append5(div2, t3);
      append5(div2, div1);
      mount_component(button0, div1, null);
      append5(div1, t4);
      mount_component(button1, div1, null);
      append5(div1, t5);
      append5(div1, button2);
      append5(div1, t7);
      append5(div1, button3);
      append5(div1, t9);
      mount_component(button4, div1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(button2, "click", click_handler),
          listen(button3, "click", click_handler_1)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty[0] & /*$forms*/
      32) && t0_value !== (t0_value = /*form*/
      ctx[21].name + ""))
        set_data(t0, t0_value);
      if (dirty[0] & /*$forms*/
      32) {
        each_value_6 = ensure_array_like(Object.entries(
          /*form*/
          ctx[21]
        ));
        let i;
        for (i = 0; i < each_value_6.length; i += 1) {
          const child_ctx = get_each_context_6(ctx, each_value_6, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_6(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div0, t2);
          }
        }
        group_outros();
        for (i = each_value_6.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      const keyvalue_changes = {};
      if (dirty[0] & /*$forms*/
      32 | dirty[1] & /*$$scope*/
      1024) {
        keyvalue_changes.$$scope = { dirty, ctx };
      }
      keyvalue.$set(keyvalue_changes);
      const button0_changes = {};
      if (dirty[0] & /*$forms*/
      32)
        button0_changes.onClick = func;
      if (dirty[0] & /*$forms*/
      32)
        button0_changes.tooltip = `Delete ${/*form*/
        ctx[21].name}`;
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty[0] & /*$forms*/
      32)
        button1_changes.onClick = func_1;
      button1.$set(button1_changes);
      const button4_changes = {};
      if (dirty[0] & /*$forms*/
      32)
        button4_changes.tooltip = `Copy ${/*form*/
        ctx[21].name} to clipboard`;
      if (dirty[0] & /*$forms*/
      32)
        button4_changes.onClick = func_2;
      button4.$set(button4_changes);
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_6.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(keyvalue.$$.fragment, local);
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      transition_in(button4.$$.fragment, local);
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(keyvalue.$$.fragment, local);
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      transition_out(button4.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      destroy_each(each_blocks, detaching);
      destroy_component(keyvalue);
      destroy_component(button0);
      destroy_component(button1);
      destroy_component(button4);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block6(ctx) {
  let h3;
  let t1;
  let div;
  let current;
  let each_value = ensure_array_like(
    /*$invalidForms*/
    ctx[4]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block6(get_each_context6(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      h3 = element("h3");
      h3.textContent = "Invalid forms";
      t1 = space();
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(h3, "class", "form-name modal-form-danger svelte-1gkuvrl");
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      insert(target, t1, anchor);
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*$invalidForms*/
      16) {
        each_value = ensure_array_like(
          /*$invalidForms*/
          ctx2[4]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context6(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block6(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(h3);
        detach(t1);
        detach(div);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block_3(ctx) {
  let span;
  let t_value = (
    /*fieldError*/
    ctx[29] + ""
  );
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append5(span, t);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*$invalidForms*/
      16 && t_value !== (t_value = /*fieldError*/
      ctx2[29] + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_default_slot_14(ctx) {
  let each_1_anchor;
  let each_value_3 = ensure_array_like(
    /*error*/
    ctx[24].getFieldErrors()
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_3.length; i += 1) {
    each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty4();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*$invalidForms*/
      16) {
        each_value_3 = ensure_array_like(
          /*error*/
          ctx2[24].getFieldErrors()
        );
        let i;
        for (i = 0; i < each_value_3.length; i += 1) {
          const child_ctx = get_each_context_3(ctx2, each_value_3, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_3(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_3.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block_22(ctx) {
  let div;
  let pre;
  let code;
  let t0;
  let t1_value = "\n" + JSON.stringify(
    /*error*/
    ctx[24].field,
    null,
    1
  );
  let t1;
  let t2;
  let t3;
  let keyvalue;
  let t4;
  let hr;
  let current;
  keyvalue = new KeyValue_default({
    props: {
      key: (
        /*error*/
        ctx[24].path
      ),
      $$slots: { default: [create_default_slot_14] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      pre = element("pre");
      code = element("code");
      t0 = text("\n                                    ");
      t1 = text(t1_value);
      t2 = text("\n                                ");
      t3 = space();
      create_component(keyvalue.$$.fragment);
      t4 = space();
      hr = element("hr");
      attr(code, "class", "svelte-1gkuvrl");
      attr(pre, "class", "invalid-field-json svelte-1gkuvrl");
      attr(div, "class", "flex-row svelte-1gkuvrl");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, pre);
      append5(pre, code);
      append5(code, t0);
      append5(code, t1);
      append5(code, t2);
      append5(div, t3);
      mount_component(keyvalue, div, null);
      append5(div, t4);
      append5(div, hr);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty[0] & /*$invalidForms*/
      16) && t1_value !== (t1_value = "\n" + JSON.stringify(
        /*error*/
        ctx2[24].field,
        null,
        1
      )))
        set_data(t1, t1_value);
      const keyvalue_changes = {};
      if (dirty[0] & /*$invalidForms*/
      16)
        keyvalue_changes.key = /*error*/
        ctx2[24].path;
      if (dirty[0] & /*$invalidForms*/
      16 | dirty[1] & /*$$scope*/
      1024) {
        keyvalue_changes.$$scope = { dirty, ctx: ctx2 };
      }
      keyvalue.$set(keyvalue_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(keyvalue.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(keyvalue.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(keyvalue);
    }
  };
}
function create_default_slot6(ctx) {
  let span;
  let t0_value = (
    /*error*/
    ctx[24].name + ""
  );
  let t0;
  let t1;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = text(" \u2705");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append5(span, t0);
      append5(span, t1);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*$invalidForms*/
      16 && t0_value !== (t0_value = /*error*/
      ctx2[24].name + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_each_block_13(ctx) {
  let keyvalue;
  let current;
  keyvalue = new KeyValue_default({
    props: {
      key: "field",
      $$slots: { default: [create_default_slot6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(keyvalue.$$.fragment);
    },
    m(target, anchor) {
      mount_component(keyvalue, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const keyvalue_changes = {};
      if (dirty[0] & /*$invalidForms*/
      16 | dirty[1] & /*$$scope*/
      1024) {
        keyvalue_changes.$$scope = { dirty, ctx: ctx2 };
      }
      keyvalue.$set(keyvalue_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(keyvalue.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(keyvalue.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(keyvalue, detaching);
    }
  };
}
function create_each_block6(ctx) {
  let div;
  let h4;
  let t0_value = (
    /*form*/
    ctx[21].name + ""
  );
  let t0;
  let t1;
  let t2;
  let t3;
  let current;
  let each_value_2 = ensure_array_like(left2(
    /*form*/
    ctx[21].fieldErrors
  ));
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks_1[i] = create_each_block_22(get_each_context_22(ctx, each_value_2, i));
  }
  const out = (i) => transition_out(each_blocks_1[i], 1, 1, () => {
    each_blocks_1[i] = null;
  });
  let each_value_1 = ensure_array_like(right2(
    /*form*/
    ctx[21].fieldErrors
  ));
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_13(get_each_context_13(ctx, each_value_1, i));
  }
  const out_1 = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      h4 = element("h4");
      t0 = text(t0_value);
      t1 = space();
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t2 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t3 = space();
      attr(h4, "class", "form-name svelte-1gkuvrl");
      attr(div, "class", "form-row svelte-1gkuvrl");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, h4);
      append5(h4, t0);
      append5(div, t1);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        if (each_blocks_1[i]) {
          each_blocks_1[i].m(div, null);
        }
      }
      append5(div, t2);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      append5(div, t3);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty[0] & /*$invalidForms*/
      16) && t0_value !== (t0_value = /*form*/
      ctx2[21].name + ""))
        set_data(t0, t0_value);
      if (dirty[0] & /*$invalidForms*/
      16) {
        each_value_2 = ensure_array_like(left2(
          /*form*/
          ctx2[21].fieldErrors
        ));
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_22(ctx2, each_value_2, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
            transition_in(each_blocks_1[i], 1);
          } else {
            each_blocks_1[i] = create_each_block_22(child_ctx);
            each_blocks_1[i].c();
            transition_in(each_blocks_1[i], 1);
            each_blocks_1[i].m(div, t2);
          }
        }
        group_outros();
        for (i = each_value_2.length; i < each_blocks_1.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (dirty[0] & /*$invalidForms*/
      16) {
        each_value_1 = ensure_array_like(right2(
          /*form*/
          ctx2[21].fieldErrors
        ));
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_13(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_13(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, t3);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks.length; i += 1) {
          out_1(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_2.length; i += 1) {
        transition_in(each_blocks_1[i]);
      }
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks_1 = each_blocks_1.filter(Boolean);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        transition_out(each_blocks_1[i]);
      }
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_each(each_blocks_1, detaching);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment14(ctx) {
  let div1;
  let h1;
  let t1;
  let div0;
  let button0;
  let t2;
  let button1;
  let t3;
  let t4;
  let div2;
  let t5;
  let current;
  button0 = new Button_default({
    props: {
      onClick: (
        /*createNewForm*/
        ctx[0]
      ),
      text: "Create new form",
      variant: "primary"
    }
  });
  button1 = new Button_default({
    props: {
      onClick: (
        /*openImportFormModal*/
        ctx[1]
      ),
      text: "Import form",
      variant: "regular"
    }
  });
  let if_block0 = (
    /*$invalidForms*/
    ctx[4].length && create_if_block_23(ctx)
  );
  let each_value_4 = ensure_array_like(
    /*$forms*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_4.length; i += 1) {
    each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  let if_block1 = (
    /*$invalidForms*/
    ctx[4].length && create_if_block6(ctx)
  );
  return {
    c() {
      div1 = element("div");
      h1 = element("h1");
      h1.textContent = "Manage forms";
      t1 = space();
      div0 = element("div");
      create_component(button0.$$.fragment);
      t2 = space();
      create_component(button1.$$.fragment);
      t3 = space();
      if (if_block0)
        if_block0.c();
      t4 = space();
      div2 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t5 = space();
      if (if_block1)
        if_block1.c();
      attr(div0, "class", "flex gap-1");
      attr(div1, "class", "header svelte-1gkuvrl");
      attr(div2, "id", "form-rows");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append5(div1, h1);
      append5(div1, t1);
      append5(div1, div0);
      mount_component(button0, div0, null);
      append5(div0, t2);
      mount_component(button1, div0, null);
      append5(div1, t3);
      if (if_block0)
        if_block0.m(div1, null);
      insert(target, t4, anchor);
      insert(target, div2, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div2, null);
        }
      }
      append5(div2, t5);
      if (if_block1)
        if_block1.m(div2, null);
      current = true;
    },
    p(ctx2, dirty) {
      const button0_changes = {};
      if (dirty[0] & /*createNewForm*/
      1)
        button0_changes.onClick = /*createNewForm*/
        ctx2[0];
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty[0] & /*openImportFormModal*/
      2)
        button1_changes.onClick = /*openImportFormModal*/
        ctx2[1];
      button1.$set(button1_changes);
      if (
        /*$invalidForms*/
        ctx2[4].length
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_23(ctx2);
          if_block0.c();
          if_block0.m(div1, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty[0] & /*$forms, handleCopyForm, handleOpenInTemplateBuilder, handleDuplicateForm, handleEditForm, handleDeleteForm*/
      2016) {
        each_value_4 = ensure_array_like(
          /*$forms*/
          ctx2[5]
        );
        let i;
        for (i = 0; i < each_value_4.length; i += 1) {
          const child_ctx = get_each_context_4(ctx2, each_value_4, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_4(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div2, t5);
          }
        }
        group_outros();
        for (i = each_value_4.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (
        /*$invalidForms*/
        ctx2[4].length
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*$invalidForms*/
          16) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block6(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div2, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(button0.$$.fragment, local);
      transition_in(button1.$$.fragment, local);
      for (let i = 0; i < each_value_4.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(button0.$$.fragment, local);
      transition_out(button1.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
        detach(t4);
        detach(div2);
      }
      destroy_component(button0);
      destroy_component(button1);
      if (if_block0)
        if_block0.d();
      destroy_each(each_blocks, detaching);
      if (if_block1)
        if_block1.d();
    }
  };
}
function instance14($$self, $$props, $$invalidate) {
  let $invalidForms, $$unsubscribe_invalidForms = noop, $$subscribe_invalidForms = () => ($$unsubscribe_invalidForms(), $$unsubscribe_invalidForms = subscribe(invalidForms, ($$value) => $$invalidate(4, $invalidForms = $$value)), invalidForms);
  let $forms, $$unsubscribe_forms = noop, $$subscribe_forms = () => ($$unsubscribe_forms(), $$unsubscribe_forms = subscribe(forms, ($$value) => $$invalidate(5, $forms = $$value)), forms);
  $$self.$$.on_destroy.push(() => $$unsubscribe_invalidForms());
  $$self.$$.on_destroy.push(() => $$unsubscribe_forms());
  let { createNewForm } = $$props;
  let { deleteForm } = $$props;
  let { duplicateForm: duplicateForm2 } = $$props;
  let { editForm } = $$props;
  let { copyFormToClipboard } = $$props;
  let { openInTemplateBuilder } = $$props;
  let { openImportFormModal } = $$props;
  let { forms } = $$props;
  $$subscribe_forms();
  let { invalidForms } = $$props;
  $$subscribe_invalidForms();
  function handleDeleteForm(formName) {
    const confirmed = confirm(`Are you sure you want to delete ${formName}?`);
    if (confirmed) {
      console.log(`Deleting ${formName}`);
      deleteForm(formName);
    }
  }
  function handleEditForm(formName) {
    console.log(`Editing ${formName}`);
    editForm(formName);
  }
  function handleDuplicateForm(form) {
    console.log(`Duplicating ${form.name}`);
    duplicateForm2(form.name);
  }
  function handleCopyForm(form) {
    console.log(`Copying ${form.name}`);
    copyFormToClipboard(form);
  }
  function handleOpenInTemplateBuilder(form) {
    console.log(`Opening ${form.name} in template builder`);
    openInTemplateBuilder(form);
  }
  const func = (form) => handleDeleteForm(form.name);
  const func_1 = (form) => handleEditForm(form.name);
  const click_handler = (form) => handleDuplicateForm(form);
  const click_handler_1 = (form) => handleOpenInTemplateBuilder(form);
  const func_2 = (form) => handleCopyForm(form);
  $$self.$$set = ($$props2) => {
    if ("createNewForm" in $$props2)
      $$invalidate(0, createNewForm = $$props2.createNewForm);
    if ("deleteForm" in $$props2)
      $$invalidate(11, deleteForm = $$props2.deleteForm);
    if ("duplicateForm" in $$props2)
      $$invalidate(12, duplicateForm2 = $$props2.duplicateForm);
    if ("editForm" in $$props2)
      $$invalidate(13, editForm = $$props2.editForm);
    if ("copyFormToClipboard" in $$props2)
      $$invalidate(14, copyFormToClipboard = $$props2.copyFormToClipboard);
    if ("openInTemplateBuilder" in $$props2)
      $$invalidate(15, openInTemplateBuilder = $$props2.openInTemplateBuilder);
    if ("openImportFormModal" in $$props2)
      $$invalidate(1, openImportFormModal = $$props2.openImportFormModal);
    if ("forms" in $$props2)
      $$subscribe_forms($$invalidate(2, forms = $$props2.forms));
    if ("invalidForms" in $$props2)
      $$subscribe_invalidForms($$invalidate(3, invalidForms = $$props2.invalidForms));
  };
  return [
    createNewForm,
    openImportFormModal,
    forms,
    invalidForms,
    $invalidForms,
    $forms,
    handleDeleteForm,
    handleEditForm,
    handleDuplicateForm,
    handleCopyForm,
    handleOpenInTemplateBuilder,
    deleteForm,
    duplicateForm2,
    editForm,
    copyFormToClipboard,
    openInTemplateBuilder,
    func,
    func_1,
    click_handler,
    click_handler_1,
    func_2
  ];
}
var ManageForms = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(
      this,
      options,
      instance14,
      create_fragment14,
      safe_not_equal,
      {
        createNewForm: 0,
        deleteForm: 11,
        duplicateForm: 12,
        editForm: 13,
        copyFormToClipboard: 14,
        openInTemplateBuilder: 15,
        openImportFormModal: 1,
        forms: 2,
        invalidForms: 3
      },
      add_css10,
      [-1, -1]
    );
  }
};
var ManageForms_default = ManageForms;

// src/views/ManageFormsView.ts
var MANAGE_FORMS_VIEW = "modal-form-manage-forms-view";
var ManageFormsView = class extends import_obsidian17.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.leaf = leaf;
    this.plugin = plugin;
    this.icon = "documents";
  }
  getViewType() {
    return MANAGE_FORMS_VIEW;
  }
  getDisplayText() {
    return "Manage forms";
  }
  async onOpen() {
    const container = this.containerEl.children[1] || this.containerEl.createDiv();
    container.empty();
    this.component = new ManageForms_default({
      target: container,
      props: {
        forms: formsStore,
        invalidForms: invalidFormsStore,
        createNewForm: () => {
          this.plugin.createNewForm();
        },
        editForm: (formName) => {
          this.plugin.editForm(formName);
        },
        deleteForm: (formName) => {
          settingsStore.removeForm(formName);
        },
        duplicateForm: (formName) => {
          settingsStore.duplicateForm(formName);
        },
        copyFormToClipboard: async (form) => {
          await navigator.clipboard.writeText(JSON.stringify(form, null, 2));
          new import_obsidian17.Notice("Form has been copied to the clipboard");
        },
        openImportFormModal: () => {
          this.plugin.openImportFormModal();
        },
        openInTemplateBuilder: (formDefinition) => {
          this.plugin.openTemplateBuilder({ formDefinition });
        }
      }
    });
  }
  async onClose() {
    this.component.$destroy();
  }
};

// src/suggesters/FormPickerModal.ts
var import_obsidian18 = require("obsidian");
var FormPickerModal = class extends import_obsidian18.FuzzySuggestModal {
  constructor(app2, forms, onSelected) {
    super(app2);
    this.forms = forms;
    this.onSelected = onSelected;
  }
  getItems() {
    return this.forms;
  }
  getItemText(item2) {
    return item2.title;
  }
  onChooseItem(item2, _) {
    this.close();
    this.onSelected(item2);
  }
};

// src/suggesters/NewNoteModal.ts
var import_obsidian20 = require("obsidian");

// src/suggesters/suggestGeneric.ts
var import_obsidian19 = require("obsidian");
var GenericSuggest = class extends import_obsidian19.AbstractInputSuggest {
  constructor(app2, inputEl, content, strategy) {
    super(app2, inputEl);
    this.inputEl = inputEl;
    this.strategy = strategy;
    this.content = content;
  }
  getSuggestions(inputStr) {
    const lowerCaseInputStr = inputStr.toLowerCase();
    return this.strategy.getSuggestions(lowerCaseInputStr, [...this.content]);
  }
  renderSuggestion(content, el) {
    return this.strategy.renderSuggestion(content, el);
  }
  selectSuggestion(value) {
    this.inputEl.value = this.strategy.selectSuggestion(value);
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/suggesters/NewNoteModal.ts
var formSuggester = (app2, input, forms, onChange) => new GenericSuggest(
  app2,
  input,
  new Set(forms),
  {
    getSuggestions: (inputStr, forms2) => {
      return forms2.filter((form) => form.name.toLowerCase().contains(inputStr));
    },
    renderSuggestion: (form, el) => {
      el.setText(form.name);
    },
    selectSuggestion: (form) => {
      onChange(form);
      return form.name;
    }
  }
);
var NewNoteModal = class extends import_obsidian20.Modal {
  constructor(app2, forms, onSelected) {
    super(app2);
    this.forms = forms;
    this.onSelected = onSelected;
  }
  onOpen() {
    let destinationFolder = "";
    let form;
    let noteName = "";
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "New Note from form" });
    new import_obsidian20.Setting(contentEl).addSearch((element2) => {
      formSuggester(this.app, element2.inputEl, this.forms, (value) => {
        form = value;
      });
    }).setDesc("Pick a form");
    new import_obsidian20.Setting(contentEl).addSearch((element2) => {
      new FolderSuggest(element2.inputEl, this.app);
      element2.onChange((value) => {
        destinationFolder = value;
      });
    }).setName("Destination folder");
    new import_obsidian20.Setting(contentEl).addText((element2) => {
      element2.onChange((value) => {
        noteName = value;
      });
    }).setName("Note name");
    new import_obsidian20.Setting(contentEl).addButton((element2) => {
      element2.setButtonText("Create new note");
      element2.onClick(() => {
        if (!form || !destinationFolder.trim() || !noteName.trim()) {
          log_notice("Missing fields", "Please fill all the fields");
          return;
        }
        this.close();
        this.onSelected({
          form,
          folder: destinationFolder.trim(),
          noteName: noteName.trim()
        });
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/views/FormImportView.ts
var import_obsidian21 = require("obsidian");

// src/views/FormImport.svelte
function add_css11(target) {
  append_styles(target, "svelte-it9buy", ".vertical.svelte-it9buy{display:flex;flex-direction:column;height:100%;gap:1rem}.full-height.svelte-it9buy{height:100%;flex:1}.horizontal.svelte-it9buy{display:flex;flex-direction:row;height:100%;gap:0.5rem}button.svelte-it9buy:disabled{opacity:0.5;cursor:not-allowed}.mainView.svelte-it9buy{padding:0.8rem;min-height:50vh}p.svelte-it9buy{margin:0}textarea.svelte-it9buy{font-family:monospace;flex-grow:1;flex-shrink:0;flex-basis:50%}");
}
function get_each_context7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list[i];
  return child_ctx;
}
function create_if_block7(ctx) {
  let div1;
  let p;
  let t1;
  let div0;
  let ul;
  let each_value = ensure_array_like(
    /*ui*/
    ctx[1].errors
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block7(get_each_context7(ctx, each_value, i));
  }
  return {
    c() {
      div1 = element("div");
      p = element("p");
      p.textContent = "We found the following errors in the form definition:";
      t1 = space();
      div0 = element("div");
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(p, "class", "modal-form-danger svelte-it9buy");
      attr(div1, "class", "vertical svelte-it9buy");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append5(div1, p);
      append5(div1, t1);
      append5(div1, div0);
      append5(div0, ul);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*ui*/
      2) {
        each_value = ensure_array_like(
          /*ui*/
          ctx2[1].errors
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context7(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block7(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block7(ctx) {
  let li;
  let t_value = (
    /*error*/
    ctx[8] + ""
  );
  let t;
  return {
    c() {
      li = element("li");
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append5(li, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*ui*/
      2 && t_value !== (t_value = /*error*/
      ctx2[8] + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(li);
      }
    }
  };
}
function create_fragment15(ctx) {
  let div3;
  let h1;
  let t1;
  let div0;
  let t3;
  let div2;
  let textarea;
  let t4;
  let div1;
  let t5;
  let button;
  let t6;
  let t7_value = (
    /*ui*/
    ctx[1].buttonHint + ""
  );
  let t7;
  let button_disabled_value;
  let mounted;
  let dispose;
  let if_block = (
    /*ui*/
    ctx[1].errors.length > 0 && create_if_block7(ctx)
  );
  return {
    c() {
      div3 = element("div");
      h1 = element("h1");
      h1.textContent = "Import a form";
      t1 = space();
      div0 = element("div");
      div0.textContent = "Import a form by pasting the JSON definition into the box below. You can export a form from\n        the Form Builder. Any errors in the JSON will be displayed below. You will only be able to\n        import the form if there are no errors.";
      t3 = space();
      div2 = element("div");
      textarea = element("textarea");
      t4 = space();
      div1 = element("div");
      if (if_block)
        if_block.c();
      t5 = space();
      button = element("button");
      t6 = text("Import ");
      t7 = text(t7_value);
      attr(textarea, "class", "form-input svelte-it9buy");
      attr(textarea, "placeholder", "Paste your form JSON here");
      attr(button, "class", "btn btn-primary svelte-it9buy");
      button.disabled = button_disabled_value = !/*ui*/
      ctx[1].canSubmit;
      attr(div1, "class", "vertical svelte-it9buy");
      attr(div2, "class", "horizontal full-height svelte-it9buy");
      attr(div3, "class", "vertical mainView svelte-it9buy");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append5(div3, h1);
      append5(div3, t1);
      append5(div3, div0);
      append5(div3, t3);
      append5(div3, div2);
      append5(div2, textarea);
      set_input_value(
        textarea,
        /*value*/
        ctx[0]
      );
      append5(div2, t4);
      append5(div2, div1);
      if (if_block)
        if_block.m(div1, null);
      append5(div1, t5);
      append5(div1, button);
      append5(button, t6);
      append5(button, t7);
      if (!mounted) {
        dispose = [
          listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[6]
          ),
          listen(
            textarea,
            "input",
            /*input_handler*/
            ctx[7]
          ),
          listen(button, "click", function() {
            if (is_function(
              /*ui*/
              ctx[1].onSubmit
            ))
              ctx[1].onSubmit.apply(this, arguments);
          })
        ];
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*value*/
      1) {
        set_input_value(
          textarea,
          /*value*/
          ctx[0]
        );
      }
      if (
        /*ui*/
        ctx[1].errors.length > 0
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block7(ctx);
          if_block.c();
          if_block.m(div1, t5);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*ui*/
      2 && t7_value !== (t7_value = /*ui*/
      ctx[1].buttonHint + ""))
        set_data(t7, t7_value);
      if (dirty & /*ui*/
      2 && button_disabled_value !== (button_disabled_value = !/*ui*/
      ctx[1].canSubmit)) {
        button.disabled = button_disabled_value;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div3);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance15($$self, $$props, $$invalidate) {
  let ui;
  let $state;
  let { model } = $$props;
  const { state, validate } = model;
  component_subscribe($$self, state, (value2) => $$invalidate(5, $state = value2));
  let value = "";
  function textarea_input_handler() {
    value = this.value;
    $$invalidate(0, value);
  }
  const input_handler = () => validate(value);
  $$self.$$set = ($$props2) => {
    if ("model" in $$props2)
      $$invalidate(4, model = $$props2.model);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*model, $state*/
    48) {
      $:
        $$invalidate(1, ui = model.uiState($state));
    }
  };
  return [
    value,
    ui,
    state,
    validate,
    model,
    $state,
    textarea_input_handler,
    input_handler
  ];
}
var FormImport = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance15, create_fragment15, safe_not_equal, { model: 4 }, add_css11);
  }
};
var FormImport_default = FormImport;

// node_modules/fp-ts/es6/Json.js
var parse4 = function(s) {
  return tryCatch(function() {
    return JSON.parse(s);
  }, identity);
};

// src/views/FormImport.ts
function matchState(state, matchers) {
  return pipe2(
    state,
    match3(
      matchers.error,
      (form) => pipe2(
        form,
        // prettier, shut up
        O.match(matchers.empty, matchers.ok)
      )
    )
  );
}
function noop2() {
}
function makeFormInputModel({ createForm }) {
  const state = writable(of4(O.none));
  const setErrors = (errors) => state.set(left3(errors));
  const resetState = () => state.set(of4(O.none));
  return {
    state,
    uiState(state2) {
      return matchState(state2, {
        empty: () => ({ canSubmit: false, errors: [], onSubmit: noop2, buttonHint: "" }),
        ok: (form) => ({
          canSubmit: true,
          errors: [],
          onSubmit: () => createForm(form),
          buttonHint: "\u2705"
        }),
        error: (errors) => ({ canSubmit: false, errors, onSubmit: noop2, buttonHint: "\u274C" })
      });
    },
    validate: (value) => {
      if (value.trim() === "") {
        resetState();
        return;
      }
      pipe2(
        value,
        parse4,
        mapLeft(ensureError),
        chainW(migrateToLatest),
        match3(
          (error2) => {
            if (error2 instanceof InvalidData) {
              setErrors(error2.toArrayOfStrings());
              return;
            }
            setErrors([error2.toString()]);
          },
          (form) => {
            if (form instanceof MigrationError) {
              setErrors(form.toArrayOfStrings());
              return;
            }
            state.set(of4(O.some(form)));
            console.log(form);
          }
        )
      );
    }
  };
}

// src/views/FormImportView.ts
var FormImportModal = class extends import_obsidian21.Modal {
  constructor(app2, deps) {
    super(app2);
    this.deps = deps;
  }
  onClose() {
    this._component.$destroy();
  }
  onOpen() {
    const { contentEl } = this;
    this._component = new FormImport_default({
      target: contentEl,
      props: { model: makeFormInputModel(this.deps) }
    });
  }
};

// src/views/TemplateBuilderModal.ts
var import_obsidian23 = require("obsidian");

// src/views/components/Label.svelte
function add_css12(target) {
  append_styles(target, "svelte-176ht1g", ".field-group.svelte-176ht1g{display:flex;flex-direction:column;gap:0.5rem}.inline.svelte-176ht1g{flex-direction:row;align-items:center;gap:1rem}");
}
function create_fragment16(ctx) {
  let label_1;
  let span;
  let t0;
  let t1;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[3].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    null
  );
  return {
    c() {
      label_1 = element("label");
      span = element("span");
      t0 = text(
        /*label*/
        ctx[0]
      );
      t1 = space();
      if (default_slot)
        default_slot.c();
      attr(label_1, "class", "field-group svelte-176ht1g");
      toggle_class(
        label_1,
        "inline",
        /*inline*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, label_1, anchor);
      append5(label_1, span);
      append5(span, t0);
      append5(label_1, t1);
      if (default_slot) {
        default_slot.m(label_1, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*label*/
      1)
        set_data(
          t0,
          /*label*/
          ctx2[0]
        );
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*inline*/
      2) {
        toggle_class(
          label_1,
          "inline",
          /*inline*/
          ctx2[1]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(label_1);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance16($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { label } = $$props;
  let { inline = false } = $$props;
  $$self.$$set = ($$props2) => {
    if ("label" in $$props2)
      $$invalidate(0, label = $$props2.label);
    if ("inline" in $$props2)
      $$invalidate(1, inline = $$props2.inline);
    if ("$$scope" in $$props2)
      $$invalidate(2, $$scope = $$props2.$$scope);
  };
  return [label, inline, $$scope, slots];
}
var Label = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance16, create_fragment16, safe_not_equal, { label: 0, inline: 1 }, add_css12);
  }
};
var Label_default = Label;

// src/views/components/TemplateBuilder.svelte
function add_css13(target) {
  append_styles(target, "svelte-1qlzwkg", ".code.svelte-1qlzwkg{font-family:var(--font-family-monospace);background-color:var(--background-secondary);color:var(--text-muted)}");
}
function get_each_context8(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i];
  return child_ctx;
}
function get_each_context_14(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i];
  return child_ctx;
}
function get_each_context_23(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i];
  return child_ctx;
}
function create_each_block_23(ctx) {
  let div;
  let label;
  let input;
  let input_checked_value;
  let t0;
  let span;
  let t1_value = (
    /*field*/
    ctx[19].name + ""
  );
  let t1;
  let t2;
  let mounted;
  let dispose;
  function change_handler(...args) {
    return (
      /*change_handler*/
      ctx[11](
        /*field*/
        ctx[19],
        ...args
      )
    );
  }
  return {
    c() {
      div = element("div");
      label = element("label");
      input = element("input");
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      attr(input, "type", "checkbox");
      input.checked = input_checked_value = /*field*/
      ctx[19].omit;
      attr(label, "class", "flex gap-1");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, label);
      append5(label, input);
      append5(label, t0);
      append5(label, span);
      append5(span, t1);
      append5(div, t2);
      if (!mounted) {
        dispose = listen(input, "change", change_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$fields*/
      64 && input_checked_value !== (input_checked_value = /*field*/
      ctx[19].omit)) {
        input.checked = input_checked_value;
      }
      if (dirty & /*$fields*/
      64 && t1_value !== (t1_value = /*field*/
      ctx[19].name + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block8(ctx) {
  let div;
  let label;
  let input;
  let input_checked_value;
  let t0;
  let span;
  let t1_value = (
    /*field*/
    ctx[19].name + ""
  );
  let t1;
  let mounted;
  let dispose;
  function input_handler(...args) {
    return (
      /*input_handler*/
      ctx[12](
        /*field*/
        ctx[19],
        ...args
      )
    );
  }
  return {
    c() {
      div = element("div");
      label = element("label");
      input = element("input");
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      attr(input, "type", "checkbox");
      input.checked = input_checked_value = /*field*/
      ctx[19].onFrontmatter;
      attr(label, "class", "flex gap-1");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append5(div, label);
      append5(label, input);
      append5(label, t0);
      append5(label, span);
      append5(span, t1);
      if (!mounted) {
        dispose = listen(input, "input", input_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$fields*/
      64 && input_checked_value !== (input_checked_value = /*field*/
      ctx[19].onFrontmatter)) {
        input.checked = input_checked_value;
      }
      if (dirty & /*$fields*/
      64 && t1_value !== (t1_value = /*field*/
      ctx[19].name + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_each_block_14(key_1, ctx) {
  let first2;
  let if_block_anchor;
  let if_block = (
    /*field*/
    ctx[19].omit === false && create_if_block8(ctx)
  );
  return {
    key: key_1,
    first: null,
    c() {
      first2 = empty4();
      if (if_block)
        if_block.c();
      if_block_anchor = empty4();
      this.first = first2;
    },
    m(target, anchor) {
      insert(target, first2, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*field*/
        ctx[19].omit === false
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block8(ctx);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(first2);
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_each_block8(ctx) {
  let button;
  let t0_value = (
    /*field*/
    ctx[19].name + ""
  );
  let t0;
  let t1;
  let mounted;
  let dispose;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[14](
        /*field*/
        ctx[19]
      )
    );
  }
  return {
    c() {
      button = element("button");
      t0 = text(t0_value);
      t1 = space();
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append5(button, t0);
      append5(button, t1);
      if (!mounted) {
        dispose = listen(button, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$fields*/
      64 && t0_value !== (t0_value = /*field*/
      ctx[19].name + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot_23(ctx) {
  let input;
  let input_checked_value;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(input, "type", "checkbox");
      input.checked = input_checked_value = /*$options*/
      ctx[8].includeFences;
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*change_handler_2*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*$options*/
      256 && input_checked_value !== (input_checked_value = /*$options*/
      ctx2[8].includeFences)) {
        input.checked = input_checked_value;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot_15(ctx) {
  let input;
  let input_value_value;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(input, "type", "text");
      input.value = input_value_value = /*$options*/
      ctx[8].resultName;
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*input_handler_1*/
          ctx[17]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*$options*/
      256 && input_value_value !== (input_value_value = /*$options*/
      ctx2[8].resultName) && input.value !== input_value_value) {
        input.value = input_value_value;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_default_slot7(ctx) {
  let t;
  return {
    c() {
      t = text(
        /*$code*/
        ctx[9]
      );
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$code*/
      512)
        set_data(
          t,
          /*$code*/
          ctx2[9]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
    }
  };
}
function create_fragment17(ctx) {
  let div9;
  let h2;
  let t0;
  let t1_value = (
    /*model*/
    ctx[0].title + ""
  );
  let t1;
  let t2;
  let div2;
  let div0;
  let h30;
  let t4;
  let t5;
  let div1;
  let h31;
  let t7;
  let each_blocks_1 = [];
  let each1_lookup = /* @__PURE__ */ new Map();
  let t8;
  let label0;
  let input;
  let t9;
  let t10;
  let div5;
  let h32;
  let t12;
  let div3;
  let p0;
  let t14;
  let p1;
  let t15;
  let span;
  let t17;
  let t18;
  let div4;
  let t19;
  let textarea;
  let t20;
  let div6;
  let h33;
  let t22;
  let label1;
  let t23;
  let formrow;
  let t24;
  let div8;
  let h34;
  let t26;
  let div7;
  let button;
  let t28;
  let code_1;
  let current;
  let mounted;
  let dispose;
  let each_value_2 = ensure_array_like(
    /*$fields*/
    ctx[6]
  );
  let each_blocks_2 = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks_2[i] = create_each_block_23(get_each_context_23(ctx, each_value_2, i));
  }
  let each_value_1 = ensure_array_like(
    /*$fields*/
    ctx[6]
  );
  const get_key = (ctx2) => (
    /*field*/
    ctx2[19].name
  );
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_14(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each1_lookup.set(key, each_blocks_1[i] = create_each_block_14(key, child_ctx));
  }
  let each_value = ensure_array_like(
    /*$fields*/
    ctx[6]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block8(get_each_context8(ctx, each_value, i));
  }
  label1 = new Label_default({
    props: {
      label: "Include frontmatter fences",
      inline: true,
      $$slots: { default: [create_default_slot_23] },
      $$scope: { ctx }
    }
  });
  formrow = new FormRow_default({
    props: {
      label: "Result variable name",
      id: `result_variable_name`,
      inline: true,
      $$slots: { default: [create_default_slot_15] },
      $$scope: { ctx }
    }
  });
  code_1 = new Code_default({
    props: {
      allowWrap: true,
      $$slots: { default: [create_default_slot7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div9 = element("div");
      h2 = element("h2");
      t0 = text("Template for: ");
      t1 = text(t1_value);
      t2 = space();
      div2 = element("div");
      div0 = element("div");
      h30 = element("h3");
      h30.textContent = "Fields to exclude";
      t4 = space();
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].c();
      }
      t5 = space();
      div1 = element("div");
      h31 = element("h3");
      h31.textContent = "Fields to include in frontmatter";
      t7 = space();
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t8 = space();
      label0 = element("label");
      input = element("input");
      t9 = text("\n                All");
      t10 = space();
      div5 = element("div");
      h32 = element("h3");
      h32.textContent = "Body template";
      t12 = space();
      div3 = element("div");
      p0 = element("p");
      p0.textContent = "Whatever you write here will be used in the body part of the template (after the\n                frontmatter).";
      t14 = space();
      p1 = element("p");
      t15 = text("You can use ");
      span = element("span");
      span.textContent = `${/*templateMessage*/
      ctx[10]}`;
      t17 = text(" syntax to build the body of the\n                template.");
      t18 = space();
      div4 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t19 = space();
      textarea = element("textarea");
      t20 = space();
      div6 = element("div");
      h33 = element("h3");
      h33.textContent = "Options";
      t22 = space();
      create_component(label1.$$.fragment);
      t23 = space();
      create_component(formrow.$$.fragment);
      t24 = space();
      div8 = element("div");
      h34 = element("h3");
      h34.textContent = "Template";
      t26 = space();
      div7 = element("div");
      button = element("button");
      button.textContent = "Copy to clipboard";
      t28 = space();
      create_component(code_1.$$.fragment);
      set_style(h2, "margin-bottom", "0");
      attr(div0, "class", "flex gap-1 flex-col");
      attr(input, "type", "checkbox");
      attr(div1, "class", "flex flex-col gap-1");
      attr(div2, "class", "flex gap-2 flex-wrap");
      set_style(p0, "margin", "0");
      set_style(p0, "padding", "0");
      attr(span, "class", "code svelte-1qlzwkg");
      set_style(p1, "margin", "0");
      set_style(p1, "padding", "0");
      attr(div4, "class", "flex gap-1 flex-wrap");
      attr(textarea, "class", "w-full");
      attr(textarea, "rows", "10");
      attr(div5, "class", "flex flex-col gap-2");
      attr(div6, "class", "flex flex-col flex-1 gap-1");
      attr(button, "type", "button");
      attr(div7, "class", "flex gap-1");
      attr(div8, "class", "flex flex-col flex-1");
      attr(div9, "class", "modal-form flex flex-col gap-2");
    },
    m(target, anchor) {
      insert(target, div9, anchor);
      append5(div9, h2);
      append5(h2, t0);
      append5(h2, t1);
      append5(div9, t2);
      append5(div9, div2);
      append5(div2, div0);
      append5(div0, h30);
      append5(div0, t4);
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        if (each_blocks_2[i]) {
          each_blocks_2[i].m(div0, null);
        }
      }
      append5(div2, t5);
      append5(div2, div1);
      append5(div1, h31);
      append5(div1, t7);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        if (each_blocks_1[i]) {
          each_blocks_1[i].m(div1, null);
        }
      }
      append5(div1, t8);
      append5(div1, label0);
      append5(label0, input);
      append5(label0, t9);
      append5(div9, t10);
      append5(div9, div5);
      append5(div5, h32);
      append5(div5, t12);
      append5(div5, div3);
      append5(div3, p0);
      append5(div3, t14);
      append5(div3, p1);
      append5(p1, t15);
      append5(p1, span);
      append5(p1, t17);
      append5(div5, t18);
      append5(div5, div4);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div4, null);
        }
      }
      append5(div5, t19);
      append5(div5, textarea);
      set_input_value(
        textarea,
        /*$bodyTemplate*/
        ctx[7]
      );
      append5(div9, t20);
      append5(div9, div6);
      append5(div6, h33);
      append5(div6, t22);
      mount_component(label1, div6, null);
      append5(div6, t23);
      mount_component(formrow, div6, null);
      append5(div9, t24);
      append5(div9, div8);
      append5(div8, h34);
      append5(div8, t26);
      append5(div8, div7);
      append5(div7, button);
      append5(div8, t28);
      mount_component(code_1, div8, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "change",
            /*change_handler_1*/
            ctx[13]
          ),
          listen(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[15]
          ),
          listen(
            button,
            "click",
            /*click_handler_1*/
            ctx[18]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & /*model*/
      1) && t1_value !== (t1_value = /*model*/
      ctx2[0].title + ""))
        set_data(t1, t1_value);
      if (dirty & /*$fields, model*/
      65) {
        each_value_2 = ensure_array_like(
          /*$fields*/
          ctx2[6]
        );
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_23(ctx2, each_value_2, i);
          if (each_blocks_2[i]) {
            each_blocks_2[i].p(child_ctx, dirty);
          } else {
            each_blocks_2[i] = create_each_block_23(child_ctx);
            each_blocks_2[i].c();
            each_blocks_2[i].m(div0, null);
          }
        }
        for (; i < each_blocks_2.length; i += 1) {
          each_blocks_2[i].d(1);
        }
        each_blocks_2.length = each_value_2.length;
      }
      if (dirty & /*$fields, model*/
      65) {
        each_value_1 = ensure_array_like(
          /*$fields*/
          ctx2[6]
        );
        each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx2, each_value_1, each1_lookup, div1, destroy_block, create_each_block_14, t8, get_each_context_14);
      }
      if (dirty & /*$bodyTemplate, $fields*/
      192) {
        each_value = ensure_array_like(
          /*$fields*/
          ctx2[6]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context8(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block8(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div4, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*$bodyTemplate*/
      128) {
        set_input_value(
          textarea,
          /*$bodyTemplate*/
          ctx2[7]
        );
      }
      const label1_changes = {};
      if (dirty & /*$$scope, $options*/
      67109120) {
        label1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      label1.$set(label1_changes);
      const formrow_changes = {};
      if (dirty & /*$$scope, $options*/
      67109120) {
        formrow_changes.$$scope = { dirty, ctx: ctx2 };
      }
      formrow.$set(formrow_changes);
      const code_1_changes = {};
      if (dirty & /*$$scope, $code*/
      67109376) {
        code_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      code_1.$set(code_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(label1.$$.fragment, local);
      transition_in(formrow.$$.fragment, local);
      transition_in(code_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(label1.$$.fragment, local);
      transition_out(formrow.$$.fragment, local);
      transition_out(code_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div9);
      }
      destroy_each(each_blocks_2, detaching);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].d();
      }
      destroy_each(each_blocks, detaching);
      destroy_component(label1);
      destroy_component(formrow);
      destroy_component(code_1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance17($$self, $$props, $$invalidate) {
  let fields;
  let code;
  let options;
  let bodyTemplate;
  let $fields, $$unsubscribe_fields = noop, $$subscribe_fields = () => ($$unsubscribe_fields(), $$unsubscribe_fields = subscribe(fields, ($$value) => $$invalidate(6, $fields = $$value)), fields);
  let $bodyTemplate, $$unsubscribe_bodyTemplate = noop, $$subscribe_bodyTemplate = () => ($$unsubscribe_bodyTemplate(), $$unsubscribe_bodyTemplate = subscribe(bodyTemplate, ($$value) => $$invalidate(7, $bodyTemplate = $$value)), bodyTemplate);
  let $options, $$unsubscribe_options = noop, $$subscribe_options = () => ($$unsubscribe_options(), $$unsubscribe_options = subscribe(options, ($$value) => $$invalidate(8, $options = $$value)), options);
  let $code, $$unsubscribe_code = noop, $$subscribe_code = () => ($$unsubscribe_code(), $$unsubscribe_code = subscribe(code, ($$value) => $$invalidate(9, $code = $$value)), code);
  $$self.$$.on_destroy.push(() => $$unsubscribe_fields());
  $$self.$$.on_destroy.push(() => $$unsubscribe_bodyTemplate());
  $$self.$$.on_destroy.push(() => $$unsubscribe_options());
  $$self.$$.on_destroy.push(() => $$unsubscribe_code());
  let { model } = $$props;
  let { copyToClipboard: copyToClipboard2 } = $$props;
  const templateMessage = `{{fieldName}} `;
  const change_handler = (field, v) => model.setField(field.name, { omit: v.currentTarget.checked });
  const input_handler = (field, v) => model.setField(field.name, { onFrontmatter: v.currentTarget.checked });
  const change_handler_1 = (e) => model.toggleAllFrontmatter(e.currentTarget.checked);
  const click_handler = (field) => set_store_value(bodyTemplate, $bodyTemplate += `{{${field.name}}}
`, $bodyTemplate);
  function textarea_input_handler() {
    $bodyTemplate = this.value;
    bodyTemplate.set($bodyTemplate);
  }
  const change_handler_2 = (e) => set_store_value(options, $options.includeFences = e.currentTarget.checked, $options);
  const input_handler_1 = (e) => set_store_value(options, $options.resultName = e.currentTarget.value, $options);
  const click_handler_1 = () => copyToClipboard2($code);
  $$self.$$set = ($$props2) => {
    if ("model" in $$props2)
      $$invalidate(0, model = $$props2.model);
    if ("copyToClipboard" in $$props2)
      $$invalidate(1, copyToClipboard2 = $$props2.copyToClipboard);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*model*/
    1) {
      $:
        $$subscribe_fields($$invalidate(5, fields = model.fields));
    }
    if ($$self.$$.dirty & /*model*/
    1) {
      $:
        $$subscribe_code($$invalidate(4, code = model.code));
    }
    if ($$self.$$.dirty & /*model*/
    1) {
      $:
        $$subscribe_options($$invalidate(3, options = model.options));
    }
    if ($$self.$$.dirty & /*model*/
    1) {
      $:
        $$subscribe_bodyTemplate($$invalidate(2, bodyTemplate = model.bodyTemplate));
    }
  };
  return [
    model,
    copyToClipboard2,
    bodyTemplate,
    options,
    code,
    fields,
    $fields,
    $bodyTemplate,
    $options,
    $code,
    templateMessage,
    change_handler,
    input_handler,
    change_handler_1,
    click_handler,
    textarea_input_handler,
    change_handler_2,
    input_handler_1,
    click_handler_1
  ];
}
var TemplateBuilder = class extends SvelteComponent {
  constructor(options) {
    super();
    init4(this, options, instance17, create_fragment17, safe_not_equal, { model: 0, copyToClipboard: 1 }, add_css13);
  }
};
var TemplateBuilder_default = TemplateBuilder;

// src/views/copyToClipboard.ts
var import_obsidian22 = require("obsidian");
function copyToClipboard(text3) {
  navigator.clipboard.writeText(text3).then(
    () => {
      new import_obsidian22.Notice("Template has been copied to the clipboard");
    },
    (err) => {
      console.error("Could not copy text: ", err);
    }
  );
}

// src/views/TemplateBuilderModal.ts
var TemplateBuilderModal = class extends import_obsidian23.Modal {
  constructor(app2, deps) {
    super(app2);
    this.deps = deps;
  }
  onClose() {
    this._component.$destroy();
  }
  onOpen() {
    const { contentEl } = this;
    this._component = new TemplateBuilder_default({
      target: contentEl,
      props: { model: this.deps, copyToClipboard }
    });
  }
};

// src/views/TemplateBuilderView.ts
var import_obsidian24 = require("obsidian");

// src/core/templater/builder.ts
function getFunctionBody(fn) {
  return fn.toString().replace(/^[^{]*{/, "").replace(/}[^}]*$/, "").trim();
}
function get_value() {
  result.get("__key__");
}
function buildResultBody(fields, template, options) {
  const getTemplate = getFunctionBody(get_value).replace(/result/, options.resultName).replace(/;$/, "");
  console.log({ getTemplate });
  return fields.reduce((template2, field) => {
    return template2.replace(
      new RegExp(`{{${field}}}`, "g"),
      `<% ${getTemplate.replace(/__key__/, field)} %>`
    );
  }, template);
}

// src/views/components/TemplateBuilder.ts
var Field2 = (name) => ({
  name,
  onFrontmatter: false,
  onBody: false,
  omit: false
});
function compileFrontmatter(fields, resultName) {
  const frontmatterFields = fields.filter((field) => field.onFrontmatter).map((field) => field.name);
  if (frontmatterFields.length === 0) {
    return "";
  }
  if (frontmatterFields.length === fields.length) {
    return `tR += ${resultName}.asFrontmatterString();`;
  }
  return `tR += ${resultName}.asFrontmatterString({ pick: ${JSON.stringify(
    frontmatterFields,
    null,
    16
  )} 	});`;
}
function compileOpenForm(formName, resultName, fieldsToOmit, usesGlobal = false) {
  const omitOptions = fieldsToOmit.length > 0 ? `, ${JSON.stringify({ omit: fieldsToOmit }, null, 8)}` : "";
  const args = `"${formName}"${omitOptions}`;
  console.log({ args });
  if (usesGlobal) {
    return [`const ${resultName} = await MF.openForm(${args});`];
  }
  return `
    const modalForm = app.plugins.plugins.modalforms.api;
    const ${resultName} = await modalForm.openForm(${args});`.trim().split("\n").map((x) => x.trim());
}
function compileTemplaterTemplate(formName) {
  return ([fields, options, bodyTemplate]) => {
    const fieldsToInclude = fields.filter((field) => !field.omit);
    const fieldsToOmit = fields.filter((field) => field.omit);
    const openTheform = compileOpenForm(
      formName,
      options.resultName,
      fieldsToOmit.map((x) => x.name)
    ).join("\n  ");
    return [
      options.includeFences ? `<% "---" %>` : "",
      `<%*`,
      `  ${openTheform}`,
      `  ${compileFrontmatter(fieldsToInclude, options.resultName)}`,
      `-%>`,
      options.includeFences ? `<% "---" %>` : "",
      buildResultBody(
        fieldsToInclude.map((f) => f.name),
        bodyTemplate,
        options
      )
    ].join("\n");
  };
}
var makeModel = (formDefinition) => {
  const fields = writable(
    formDefinition.fields.reduce((acc, { name }) => [...acc, Field2(name)], [])
  );
  const options = writable({ includeFences: true, resultName: "result" });
  const bodyTemplate = writable("");
  const code = derived(
    [fields, options, bodyTemplate],
    compileTemplaterTemplate(formDefinition.name)
  );
  function setField(name, newValues) {
    console.log({ name, newValues });
    fields.update(
      ($fields) => pipe2(
        $fields,
        Array_exports.updateFirst(
          (f) => f.name === name,
          (f) => {
            return { ...f, ...newValues };
          }
        )
      )
    );
  }
  function toggleAllFrontmatter(value) {
    fields.update(
      ($fields) => $fields.map((f) => {
        if (f.omit) {
          return f;
        }
        return { ...f, onFrontmatter: value };
      })
    );
  }
  function omitField(name, value) {
    setField(name, { omit: value });
  }
  return {
    fields,
    setField,
    code,
    omitField,
    toggleAllFrontmatter,
    options,
    bodyTemplate,
    title: formDefinition.name
  };
};

// src/views/TemplateBuilderView.ts
var TEMPLATE_BUILDER_VIEW = "modal-form-template-builder-view";
var TemplateBuilderView = class extends import_obsidian24.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.leaf = leaf;
    this.plugin = plugin;
  }
  getViewType() {
    return TEMPLATE_BUILDER_VIEW;
  }
  getDisplayText() {
    return "Template Builder";
  }
  async onClose() {
    var _a;
    (_a = this._component) == null ? void 0 : _a.$destroy();
  }
  async onOpen() {
    const { contentEl } = this;
    if (!this.model) {
      console.log("No model found");
      return;
    }
    contentEl.empty();
    this._component = new TemplateBuilder_default({
      target: contentEl,
      props: { model: makeModel(this.model), copyToClipboard }
    });
  }
  getState() {
    return this.model;
  }
  async setState(state, result2) {
    console.log("Setting state", state);
    this.model = state;
    this.app.workspace.trigger("view-state-change", result2);
    await this.onOpen();
  }
};

// src/main.ts
function notifyParsingErrors(errors) {
  if (errors.length === 0) {
    return;
  }
  log_notice(
    "\u26A0\uFE0F Some forms could not be parsed \u26A0\uFE0F",
    `We found some invalid data while parsing the form settings, please take a look at the following errors: 
            ${errors.join("\n")}`
  );
}
function notifyMigrationErrors(errors) {
  if (errors.length === 0) {
    return;
  }
  log_notice(
    "Some forms could not be migrated",
    `We tried to perform an automatic migration, but we failed. Go to the forms manager and fix the following forms:
            ${errors.map((e) => e.name).join("\n")}`
  );
}
var ModalFormPlugin = class extends import_obsidian25.Plugin {
  constructor() {
    super(...arguments);
    this.unsubscribeSettingsStore = () => {
    };
  }
  manageForms() {
    return this.activateView(MANAGE_FORMS_VIEW);
  }
  createNewForm() {
    return this.activateView(EDIT_FORM_VIEW);
  }
  /**
   * Opens the form in the editor.
   * @returns
   */
  async editForm(formName) {
    const savedSettings = await this.getSettings();
    const formDefinition = savedSettings.formDefinitions.find((form) => form.name === formName);
    if (!formDefinition) {
      throw new ModalFormError(`Form ${formName} not found`);
    }
    if (formDefinition instanceof MigrationError) {
      notifyMigrationErrors([formDefinition]);
      return;
    }
    await this.activateView(EDIT_FORM_VIEW, formDefinition);
  }
  openImportFormModal() {
    const importModal = new FormImportModal(this.app, {
      createForm: (form) => {
        importModal.close();
        this.activateView(EDIT_FORM_VIEW, form);
      }
    });
    importModal.open();
  }
  openTemplateBuilder({
    // We need the state to be serializable for the view, so we can't get the model directly
    formDefinition,
    openOnModal = false
  }) {
    if (openOnModal) {
      new TemplateBuilderModal(this.app, makeModel(formDefinition)).open();
    } else {
      this.activateView(TEMPLATE_BUILDER_VIEW, formDefinition);
    }
  }
  closeEditForm() {
    this.app.workspace.detachLeavesOfType(EDIT_FORM_VIEW);
  }
  onunload() {
    this.unsubscribeSettingsStore();
  }
  async activateView(viewType, state) {
    var _a, _b, _c, _d;
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(viewType)[0];
    if (leaf) {
      console.info("found leaf, no reason to create a new one");
    } else if (import_obsidian25.Platform.isMobile || ((_a = this.settings) == null ? void 0 : _a.editorPosition) === "mainView") {
      leaf = this.app.workspace.getLeaf("tab");
    } else if (((_b = this.settings) == null ? void 0 : _b.editorPosition) === "right") {
      leaf = this.app.workspace.getRightLeaf(false);
    } else if (((_c = this.settings) == null ? void 0 : _c.editorPosition) === "left") {
      leaf = this.app.workspace.getLeftLeaf(false);
    } else if (((_d = this.settings) == null ? void 0 : _d.editorPosition) === "modal") {
      leaf = this.app.workspace.getLeaf(false);
    } else {
      leaf = this.app.workspace.getRightLeaf(false);
    }
    await leaf.setViewState({
      type: viewType,
      active: true,
      state
    });
    this.app.workspace.revealLeaf(leaf);
    return leaf;
  }
  // TODO: extract the migration logic to a separate function and test it
  // TODO: collect actual migration events to decide if we need to migrate or not rather than this naive approach
  async getSettings() {
    const data = await this.loadData();
    const [migrationIsNeeded, settings2] = pipe2(
      parseSettings(data),
      E.map((settings3) => {
        const migrationIsNeeded2 = settings3.formDefinitions.some(formNeedsMigration);
        const { right: formDefinitions, left: errors } = Array_exports.partitionMap(migrateToLatest)(
          settings3.formDefinitions
        );
        notifyParsingErrors(errors);
        const validSettings = {
          ...settings3,
          formDefinitions
        };
        return [migrationIsNeeded2, validSettings];
      }),
      E.getOrElse(() => [false, getDefaultSettings()])
    );
    if (migrationIsNeeded) {
      await this.saveSettings(settings2);
      console.info("Settings were migrated to the latest version");
    }
    return settings2;
  }
  async saveSettings(newSettings) {
    await this.saveData(newSettings || this.settings);
  }
  async setEditorPosition(position) {
    this.settings.editorPosition = position;
    await this.saveSettings();
  }
  attachShortcutToGlobalWindow() {
    var _a;
    if (!this.settings) {
      log_error(new ModalFormError("Settings not loaded yet"));
      return;
    }
    const globalNamespace = this.settings.globalNamespace;
    if ((_a = this.settings) == null ? void 0 : _a.attachShortcutToGlobalWindow) {
      window[globalNamespace] = this.api;
    }
  }
  async setAttachShortcutToGlobalWindow(value) {
    this.settings.attachShortcutToGlobalWindow = value;
    this.attachShortcutToGlobalWindow();
    await this.saveSettings();
  }
  get validFormDefinitions() {
    return pipe2(
      this.settings.formDefinitions,
      Array_exports.filterMap((form) => form instanceof MigrationError ? O.none : O.some(form))
    );
  }
  async onload() {
    const settings2 = await this.getSettings();
    if (settings2.formDefinitions.length === 0) {
      settings2.formDefinitions.push(exampleModalDefinition);
    }
    settingsStore.set(settings2);
    this.unsubscribeSettingsStore = settingsStore.subscribe((s) => {
      console.log("settings changed", s);
      this.settings = s;
      this.saveSettings(s);
    });
    this.api = new API(this.app, this);
    this.attachShortcutToGlobalWindow();
    this.registerView(EDIT_FORM_VIEW, (leaf) => new EditFormView(leaf, this));
    this.registerView(MANAGE_FORMS_VIEW, (leaf) => new ManageFormsView(leaf, this));
    this.registerView(TEMPLATE_BUILDER_VIEW, (leaf) => new TemplateBuilderView(leaf, this));
    this.addRibbonIcon("documents", "Edit forms", (evt) => {
      this.manageForms();
    });
    this.addCommand({
      id: "new-form",
      name: "New form",
      callback: () => {
        this.createNewForm();
      }
    });
    this.addCommand({
      id: "manage-forms",
      name: "Manage forms",
      callback: () => {
        this.manageForms();
      }
    });
    this.addCommand({
      id: "create-note-from-form",
      name: "Create new note from a form",
      callback: () => {
        this.createNoteFromForm();
      }
    });
    this.addCommand({
      id: "edit-form",
      name: "Edit form",
      callback: async () => {
        new FormPickerModal(this.app, this.validFormDefinitions, (formToEdit) => {
          this.activateView(EDIT_FORM_VIEW, formToEdit);
        }).open();
      }
    });
    this.addCommand({
      id: "import-form",
      name: "Import form",
      callback: () => this.openImportFormModal
    });
    this.addSettingTab(new ModalFormSettingTab(this.app, this));
  }
  /**
   * Finds a unique name for a note, given a name.
   * It just adds a number at the end of the name if the name is already taken.
   * @param name the name of the note, without the extension
   * @returns a unique name for the note, full path including the extension
   */
  getUniqueNoteName(name, destinationFolder) {
    const defaultNotesFolder = this.app.fileManager.getNewFileParent("", "note.md");
    function makePath(name2, folder, suffix) {
      return `${folder || defaultNotesFolder.path}/${name2}${suffix ? "-" + suffix : ""}.md`;
    }
    let destinationPath = makePath(name, destinationFolder);
    let i = 1;
    while (file_exists(destinationPath, this.app)) {
      destinationPath = makePath(name, destinationFolder, i);
      i++;
    }
    return destinationPath;
  }
  /**
   * Checks if there are forms with templates, and presents a prompt
   * to select a form, then opens the forms, and creates a new note
   * with the template and the form values
   */
  createNoteFromForm() {
    const formsWithTemplates = pipe2(
      this.settings.formDefinitions,
      Array_exports.filterMap((form) => {
        if (form instanceof MigrationError) {
          return O.none;
        }
        if (form.template !== void 0) {
          return O.some(form);
        }
        return O.none;
      })
    );
    const onFormSelected = async (form, noteName, destinationFolder) => {
      const formData = await this.api.openForm(form);
      const newNoteFullPath = this.getUniqueNoteName(noteName, destinationFolder);
      const noteContent = executeTemplate(form.template.parsedTemplate, formData.getData());
      console.log("new note content", noteContent);
      this.app.vault.create(newNoteFullPath, noteContent);
    };
    const picker = new NewNoteModal(
      this.app,
      formsWithTemplates,
      ({ form, folder, noteName }) => {
        onFormSelected(form, noteName, folder);
      }
    );
    picker.open();
  }
};
